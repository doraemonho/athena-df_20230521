!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AddEMF	field_diffusion/field_diffusion.cpp	/^void FieldDiffusion::AddEMF(const EdgeField &e_src, EdgeField &e_des) {$/;"	f	class:FieldDiffusion
AddPoyntingFlux	field_diffusion/field_diffusion.cpp	/^void FieldDiffusion::AddPoyntingFlux(FaceField &p_src) {$/;"	f	class:FieldDiffusion
AmbipolarEMF	field_diffusion/diffusivity.cpp	/^void FieldDiffusion::AmbipolarEMF(const FaceField &b, const AthenaArray<Real> &bc,$/;"	f	class:FieldDiffusion
CT	ct.cpp	/^void Field::CT(const Real wght, FaceField &b_out) {$/;"	f	class:Field
CT_STS	ct.cpp	/^void Field::CT_STS(const Real wght, int stage,$/;"	f	class:Field
CalcCurrent	field_diffusion/diffusivity.cpp	/^void FieldDiffusion::CalcCurrent(FaceField &b) {$/;"	f	class:FieldDiffusion
CalcDiffusionEMF	field_diffusion/field_diffusion.cpp	/^void FieldDiffusion::CalcDiffusionEMF(FaceField &bi, const AthenaArray<Real> &bc,$/;"	f	class:FieldDiffusion
CalcMagDiffCoeff_	field_diffusion/field_diffusion.hpp	/^  FieldDiffusionCoeffFunc CalcMagDiffCoeff_; \/\/ calculate magnetic diffusivities$/;"	m	class:FieldDiffusion
CalculateCellCenteredField	field.cpp	/^void Field::CalculateCellCenteredField($/;"	f	class:Field
ClearEMF	field_diffusion/field_diffusion.cpp	/^void FieldDiffusion::ClearEMF(EdgeField &e) {$/;"	f	class:FieldDiffusion
ComputeCornerE	calculate_corner_e.cpp	/^void Field::ComputeCornerE(AthenaArray<Real> &w, AthenaArray<Real> &bcc) {$/;"	f	class:Field
ComputeCornerE_STS	calculate_corner_e.cpp	/^void Field::ComputeCornerE_STS() {$/;"	f	class:Field
ConstDiffusivity	field_diffusion/diffusivity.cpp	/^void ConstDiffusivity(FieldDiffusion *pfdif, MeshBlock *pmb, const AthenaArray<Real> &w,$/;"	f
DiffProcess	field_diffusion/field_diffusion.hpp	/^  enum DiffProcess {ohmic=0, hall=1, ambipolar=2};$/;"	g	class:FieldDiffusion
FIELD_FIELD_DIFFUSION_FIELD_DIFFUSION_HPP_	field_diffusion/field_diffusion.hpp	/^#define FIELD_FIELD_DIFFUSION_FIELD_DIFFUSION_HPP_$/;"	d
FIELD_FIELD_HPP_	field.hpp	/^#define FIELD_FIELD_HPP_$/;"	d
Field	field.cpp	/^Field::Field(MeshBlock *pmb, ParameterInput *pin) :$/;"	f	class:Field
Field	field.hpp	/^class Field {$/;"	c
FieldDiffusion	field_diffusion/field_diffusion.cpp	/^FieldDiffusion::FieldDiffusion(MeshBlock *pmb, ParameterInput *pin) :$/;"	f	class:FieldDiffusion
FieldDiffusion	field_diffusion/field_diffusion.hpp	/^class FieldDiffusion {$/;"	c
NewDiffusionDt	field_diffusion/field_diffusion.cpp	/^void FieldDiffusion::NewDiffusionDt(Real &dt_oa, Real &dt_h) {$/;"	f	class:FieldDiffusion
OhmicEMF	field_diffusion/diffusivity.cpp	/^void FieldDiffusion::OhmicEMF(const FaceField &b, const AthenaArray<Real> &bc,$/;"	f	class:FieldDiffusion
PolarAveragingEMF	ct.cpp	/^void Field::PolarAveragingEMF(EdgeField &e, int j, int nlayer, bool north)$/;"	f	class:Field
PoyntingFlux	field_diffusion/diffusivity.cpp	/^void FieldDiffusion::PoyntingFlux(EdgeField &e, const AthenaArray<Real> &bc) {$/;"	f	class:FieldDiffusion
SetDiffusivity	field_diffusion/field_diffusion.cpp	/^void FieldDiffusion::SetDiffusivity(const AthenaArray<Real> &w,$/;"	f	class:FieldDiffusion
ambipolar	field_diffusion/field_diffusion.hpp	/^  enum DiffProcess {ohmic=0, hall=1, ambipolar=2};$/;"	e	enum:FieldDiffusion::DiffProcess
b	field.hpp	/^  FaceField b;       \/\/!> time-integrator memory register #1$/;"	m	class:Field
b0	field.hpp	/^  FaceField b0, ct_update; \/\/ rkl2 STS memory registers$/;"	m	class:Field
b1	field.hpp	/^  FaceField b1;      \/\/!> time-integrator memory register #2$/;"	m	class:Field
b2	field.hpp	/^  FaceField b2;      \/\/!> time-integrator memory register #3$/;"	m	class:Field
bcc	field.hpp	/^  AthenaArray<Real> bcc;  \/\/!> time-integrator memory register #1$/;"	m	class:Field
bmag_	field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> bmag_; \/\/ B field strength$/;"	m	class:FieldDiffusion
cc_e_	field.hpp	/^  AthenaArray<Real> cc_e_;$/;"	m	class:Field
cell_volume_	field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real>  cell_volume_;$/;"	m	class:FieldDiffusion
coarse_b_	field.hpp	/^  FaceField coarse_b_;$/;"	m	class:Field
coarse_bcc_	field.hpp	/^  AthenaArray<Real> coarse_bcc_;$/;"	m	class:Field
ct_update	field.hpp	/^  FaceField b0, ct_update; \/\/ rkl2 STS memory registers$/;"	m	class:Field
dx1_	field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> dx1_, dx2_, dx3_, len_;$/;"	m	class:FieldDiffusion
dx2_	field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> dx1_, dx2_, dx3_, len_;$/;"	m	class:FieldDiffusion
dx3_	field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> dx1_, dx2_, dx3_, len_;$/;"	m	class:FieldDiffusion
e	field.hpp	/^  EdgeField e;    \/\/!> edge-centered electric fields used in CT$/;"	m	class:Field
e1_x2f	field.hpp	/^  AthenaArray<Real> e1_x2f, e3_x2f; \/\/ electric fields at x2-face from Riemann solver$/;"	m	class:Field
e1_x3f	field.hpp	/^  AthenaArray<Real> e1_x3f, e2_x3f; \/\/ electric fields at x3-face from Riemann solver$/;"	m	class:Field
e2_x1f	field.hpp	/^  AthenaArray<Real> e2_x1f, e3_x1f; \/\/ electric fields at x1-face from Riemann solver$/;"	m	class:Field
e2_x3f	field.hpp	/^  AthenaArray<Real> e1_x3f, e2_x3f; \/\/ electric fields at x3-face from Riemann solver$/;"	m	class:Field
e3_x1f	field.hpp	/^  AthenaArray<Real> e2_x1f, e3_x1f; \/\/ electric fields at x1-face from Riemann solver$/;"	m	class:Field
e3_x2f	field.hpp	/^  AthenaArray<Real> e1_x2f, e3_x2f; \/\/ electric fields at x2-face from Riemann solver$/;"	m	class:Field
e_avg_	field.hpp	/^  AthenaArray<Real> e_avg_;   \/\/ for polar averaging$/;"	m	class:Field
e_h	field_diffusion/field_diffusion.hpp	/^  EdgeField e_oa, e_h;     \/\/ edge-centered electric field from non-ideal MHD$/;"	m	class:FieldDiffusion
e_oa	field_diffusion/field_diffusion.hpp	/^  EdgeField e_oa, e_h;     \/\/ edge-centered electric field from non-ideal MHD$/;"	m	class:FieldDiffusion
edge_length_	field.hpp	/^  AthenaArray<Real> face_area_, edge_length_, edge_length_p1_;$/;"	m	class:Field
edge_length_	field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> face_area_, face_area_p1_, edge_length_, edge_length_m1_;$/;"	m	class:FieldDiffusion
edge_length_m1_	field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> face_area_, face_area_p1_, edge_length_, edge_length_m1_;$/;"	m	class:FieldDiffusion
edge_length_p1_	field.hpp	/^  AthenaArray<Real> face_area_, edge_length_, edge_length_p1_;$/;"	m	class:Field
etaB	field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> etaB; \/\/ 4-dim array, covering O\/H\/A altogether$/;"	m	class:FieldDiffusion
eta_ad	field_diffusion/field_diffusion.hpp	/^  Real eta_ohm, eta_hall, eta_ad;$/;"	m	class:FieldDiffusion
eta_hall	field_diffusion/field_diffusion.hpp	/^  Real eta_ohm, eta_hall, eta_ad;$/;"	m	class:FieldDiffusion
eta_ohm	field_diffusion/field_diffusion.hpp	/^  Real eta_ohm, eta_hall, eta_ad;$/;"	m	class:FieldDiffusion
eta_tot_	field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> eta_tot_;$/;"	m	class:FieldDiffusion
face_area_	field.hpp	/^  AthenaArray<Real> face_area_, edge_length_, edge_length_p1_;$/;"	m	class:Field
face_area_	field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> face_area_, face_area_p1_, edge_length_, edge_length_m1_;$/;"	m	class:FieldDiffusion
face_area_p1_	field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> face_area_, face_area_p1_, edge_length_, edge_length_m1_;$/;"	m	class:FieldDiffusion
fbvar	field.hpp	/^  FaceCenteredBoundaryVariable fbvar;$/;"	m	class:Field
fdif	field.hpp	/^  FieldDiffusion fdif;$/;"	m	class:Field
field_diffusion_defined	field_diffusion/field_diffusion.hpp	/^  bool field_diffusion_defined;$/;"	m	class:FieldDiffusion
g_	field.hpp	/^  AthenaArray<Real> g_, gi_;  \/\/ only used in GR$/;"	m	class:Field
gi_	field.hpp	/^  AthenaArray<Real> g_, gi_;  \/\/ only used in GR$/;"	m	class:Field
hall	field_diffusion/field_diffusion.hpp	/^  enum DiffProcess {ohmic=0, hall=1, ambipolar=2};$/;"	e	enum:FieldDiffusion::DiffProcess
jcc	field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> jcc;     \/\/ cell-centered current density (for the integrator)$/;"	m	class:FieldDiffusion
jedge_	field_diffusion/field_diffusion.hpp	/^  EdgeField jedge_;       \/\/ curl of B$/;"	m	class:FieldDiffusion
jfx	field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> jfx, jfy, jfz; \/\/ interface current density (for HLL Riemann solver)$/;"	m	class:FieldDiffusion
jfy	field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> jfx, jfy, jfz; \/\/ interface current density (for HLL Riemann solver)$/;"	m	class:FieldDiffusion
jfz	field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> jfx, jfy, jfz; \/\/ interface current density (for HLL Riemann solver)$/;"	m	class:FieldDiffusion
len_	field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> dx1_, dx2_, dx3_, len_;$/;"	m	class:FieldDiffusion
ohmic	field_diffusion/field_diffusion.hpp	/^  enum DiffProcess {ohmic=0, hall=1, ambipolar=2};$/;"	e	enum:FieldDiffusion::DiffProcess
pflux	field_diffusion/field_diffusion.hpp	/^  FaceField pflux;        \/\/ face-centered energy (Poynting) flux$/;"	m	class:FieldDiffusion
pmy_block	field.hpp	/^  MeshBlock* pmy_block;  \/\/!> ptr to MeshBlock containing this Field$/;"	m	class:Field
pmy_block	field_diffusion/field_diffusion.hpp	/^  MeshBlock* pmy_block;$/;"	m	class:FieldDiffusion
wght	field.hpp	/^  FaceField wght; \/\/!> weights used to integrate E to corner using GS algorithm$/;"	m	class:Field
