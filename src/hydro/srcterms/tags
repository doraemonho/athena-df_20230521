!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AddHydroSourceTerms	hydro_srcterms.cpp	/^void HydroSourceTerms::AddHydroSourceTerms(const Real time, const Real dt,$/;"	f	class:HydroSourceTerms
ConstantAcceleration	constant_acc.cpp	/^void HydroSourceTerms::ConstantAcceleration(const Real dt,const AthenaArray<Real> *flux,$/;"	f	class:HydroSourceTerms
GetG1	hydro_srcterms.hpp	/^  Real GetG1() const {return g1_;}$/;"	f	class:HydroSourceTerms
GetG2	hydro_srcterms.hpp	/^  Real GetG2() const {return g2_;}$/;"	f	class:HydroSourceTerms
GetG3	hydro_srcterms.hpp	/^  Real GetG3() const {return g3_;}$/;"	f	class:HydroSourceTerms
GetGM	hydro_srcterms.hpp	/^  Real GetGM() const {return gm_;}$/;"	f	class:HydroSourceTerms
HYDRO_SRCTERMS_HYDRO_SRCTERMS_HPP_	hydro_srcterms.hpp	/^#define HYDRO_SRCTERMS_HYDRO_SRCTERMS_HPP_$/;"	d
HydroSourceTerms	hydro_srcterms.cpp	/^HydroSourceTerms::HydroSourceTerms(Hydro *phyd, ParameterInput *pin) {$/;"	f	class:HydroSourceTerms
HydroSourceTerms	hydro_srcterms.hpp	/^class HydroSourceTerms {$/;"	c
Omega_0_	hydro_srcterms.hpp	/^  Real Omega_0_, qshear_; \/\/ Orbital freq and shear rate$/;"	m	class:HydroSourceTerms
OrbitalAdvectionSourceTerms	orbital_advection_srcterms.cpp	/^void HydroSourceTerms::OrbitalAdvectionSourceTerms$/;"	f	class:HydroSourceTerms
PointMass	pointmass.cpp	/^void HydroSourceTerms::PointMass(const Real dt, const AthenaArray<Real> *flux,$/;"	f	class:HydroSourceTerms
PolarAveragingHydro	hydro_srcterms.cpp	/^void HydroSourceTerms::PolarAveragingHydro(AthenaArray<Real> &cons, int j, int nlayer)$/;"	f	class:HydroSourceTerms
RotatingSystemSourceTerms	rotating_system_srcterms.cpp	/^void HydroSourceTerms::RotatingSystemSourceTerms$/;"	f	class:HydroSourceTerms
SelfGravity	self_gravity.cpp	/^void HydroSourceTerms::SelfGravity(const Real dt,const AthenaArray<Real> *flux,$/;"	f	class:HydroSourceTerms
ShBoxCoord_	hydro_srcterms.hpp	/^  int  ShBoxCoord_;       \/\/ ShearCoordinate type: 1=xy (default), 2=xz$/;"	m	class:HydroSourceTerms
ShearingBoxSourceTerms	shearing_box.cpp	/^void HydroSourceTerms::ShearingBoxSourceTerms(const Real dt,$/;"	f	class:HydroSourceTerms
UserSourceTerm	hydro_srcterms.hpp	/^  SrcTermFunc UserSourceTerm;$/;"	m	class:HydroSourceTerms
flag_point_mass_	hydro_srcterms.hpp	/^  bool flag_point_mass_;      \/\/ flag for calling PointMass function$/;"	m	class:HydroSourceTerms
flag_shearing_source_	hydro_srcterms.hpp	/^  int  flag_shearing_source_; \/\/ 1=orbital advection, 2=shearing box, 3=rotating system$/;"	m	class:HydroSourceTerms
g1_	hydro_srcterms.hpp	/^  Real g1_, g2_, g3_; \/\/ constant acc'n in each direction$/;"	m	class:HydroSourceTerms
g2_	hydro_srcterms.hpp	/^  Real g1_, g2_, g3_; \/\/ constant acc'n in each direction$/;"	m	class:HydroSourceTerms
g3_	hydro_srcterms.hpp	/^  Real g1_, g2_, g3_; \/\/ constant acc'n in each direction$/;"	m	class:HydroSourceTerms
gm_	hydro_srcterms.hpp	/^  Real gm_;           \/\/ GM for point mass MUST BE LOCATED AT ORIGIN$/;"	m	class:HydroSourceTerms
hyd_avg_	hydro_srcterms.hpp	/^  AthenaArray<Real> hyd_avg_; \/\/ storage for polar averaging$/;"	m	class:HydroSourceTerms
hydro_sourceterms_defined	hydro_srcterms.hpp	/^  bool hydro_sourceterms_defined;$/;"	m	class:HydroSourceTerms
pmy_hydro_	hydro_srcterms.hpp	/^  Hydro *pmy_hydro_;  \/\/ ptr to Hydro containing this HydroSourceTerms$/;"	m	class:HydroSourceTerms
qshear_	hydro_srcterms.hpp	/^  Real Omega_0_, qshear_; \/\/ Orbital freq and shear rate$/;"	m	class:HydroSourceTerms
