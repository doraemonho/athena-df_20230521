!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A0	pgen/disk_dust_drift.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon64	file:
A0	pgen/disk_streaming_cylindrical.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon54	file:
A0	pgen/disk_streaming_spherical.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon75	file:
A0	pgen/dust_diffusion.cpp	/^Real A0, sig_x1, sig_x2, cen1, cen2, offset;$/;"	m	namespace:__anon117	file:
A0	pgen/visc_dustfluids.cpp	/^Real A0, sig_x1, sig_x2, cen1, cen2;$/;"	m	namespace:__anon151	file:
A0	pgen/visc_scalars.cpp	/^Real A0, sig;$/;"	m	namespace:__anon53	file:
A1	pgen/cpaw.cpp	/^Real A1(const Real x1, const Real x2, const Real x3) {$/;"	f	namespace:__anon89
A1	pgen/dusty_wave.cpp	/^Real A1(const Real x1, const Real x2, const Real x3) {$/;"	f	namespace:__anon87
A1	pgen/field_loop_poles.cpp	/^Real A1(const Real x1, const Real x2, const Real x3) {$/;"	f	namespace:__anon57
A1	pgen/linear_wave.cpp	/^Real A1(const Real x1, const Real x2, const Real x3) {$/;"	f	namespace:__anon126
A2	pgen/cpaw.cpp	/^Real A2(const Real x1, const Real x2, const Real x3) {$/;"	f	namespace:__anon89
A2	pgen/dusty_wave.cpp	/^Real A2(const Real x1, const Real x2, const Real x3) {$/;"	f	namespace:__anon87
A2	pgen/field_loop_poles.cpp	/^Real A2(const Real x1, const Real x2, const Real x3) {$/;"	f	namespace:__anon57
A2	pgen/linear_wave.cpp	/^Real A2(const Real x1, const Real x2, const Real x3) {$/;"	f	namespace:__anon126
A3	pgen/cpaw.cpp	/^Real A3(const Real x1, const Real x2, const Real x3) {$/;"	f	namespace:__anon89
A3	pgen/dusty_wave.cpp	/^Real A3(const Real x1, const Real x2, const Real x3) {$/;"	f	namespace:__anon87
A3	pgen/field_loop_poles.cpp	/^Real A3(const Real x1, const Real x2, const Real x3) {$/;"	f	namespace:__anon57
A3	pgen/linear_wave.cpp	/^Real A3(const Real x1, const Real x2, const Real x3) {$/;"	f	namespace:__anon126
A30	pgen/disk_3d_mhd_dust.cpp	/^Real beta, mu, Am_in, Am0, Bz0, A30, RBmin, taddBp;$/;"	m	namespace:__anon60	file:
AM	utils/ran2.cpp	/^#define AM /;"	d	file:
AM	utils/ran2.cpp	/^#undef AM$/;"	d	file:
AMRFlag_	mesh/mesh.hpp	/^  AMRFlagFunc AMRFlag_;$/;"	m	class:Mesh
AMRFlag_	mesh/mesh_refinement.hpp	/^  AMRFlagFunc AMRFlag_; \/\/ duplicate of Mesh class member$/;"	m	class:MeshRefinement
AN	pgen/ssheet_planet_dust.cpp	/^kappap, kappap2, Kai0, etaVk, AN, BN, Psi, time_drag, user_dt, rs, gmp, gMth, t_planet_growth,$/;"	m	namespace:__anon111	file:
ASCIITableLoader	inputs/ascii_table_reader.cpp	/^void ASCIITableLoader(const char *filename, InterpTable2D &table,$/;"	f
ATHDF5Output	outputs/outputs.hpp	/^  explicit ATHDF5Output(OutputParameters oparams) : OutputType(oparams) {}$/;"	f	class:ATHDF5Output
ATHDF5Output	outputs/outputs.hpp	/^class ATHDF5Output : public OutputType {$/;"	c
ATHENA_ARRAYS_HPP_	athena_arrays.hpp	/^#define ATHENA_ARRAYS_HPP_$/;"	d
ATHENA_ERROR	defs.hpp	/^#define ATHENA_ERROR(/;"	d
ATHENA_HPP_	athena.hpp	/^#define ATHENA_HPP_$/;"	d
A_bump	pgen/disk_RWI_2D.cpp	/^A_bump, sigma_bump, r0_bump, width_vortex, eta_gas, beta_gas, ks_gas,$/;"	m	namespace:__anon101	file:
A_bump	pgen/disk_dust_diffusion.cpp	/^Real A_bump, sigma_bump, r0_bump;$/;"	m	namespace:__anon70	file:
A_bump	pgen/ssheet_RWI_dust.cpp	/^A_bump, sigma_bump, x1min, x1max, damping_rate, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon90	file:
A_gap	pgen/disk_planet_dust_cylindrical.cpp	/^t_planet_growth, dfloor, dffloor, Omega0, user_dt, A_gap,$/;"	m	namespace:__anon99	file:
A_gap	pgen/disk_planet_dust_spherical.cpp	/^t_planet_growth, dfloor, dffloor, Omega0, user_dt, A_gap,$/;"	m	namespace:__anon113	file:
AccumulateData	pgen/disk_VSI.cpp	/^void AccumulateData(MeshBlock *pmb) {$/;"	f
Add	dustfluids/dustfluids_drags/addition.cpp	/^void DustGasDrag::Add(AthenaArray<Real> &a_matrix, const Real b_num,$/;"	f	class:DustGasDrag
Add	dustfluids/dustfluids_drags/addition.cpp	/^void DustGasDrag::Add(const AthenaArray<Real> &a_matrix, const Real b_num,$/;"	f	class:DustGasDrag
Add	dustfluids/dustfluids_drags/addition.cpp	/^void DustGasDrag::Add(const Real a_num, const Real b_num,$/;"	f	class:DustGasDrag
AddCoordTermsDivergence	coordinates/coordinates.cpp	/^void Coordinates::AddCoordTermsDivergence($/;"	f	class:Coordinates
AddCoordTermsDivergence	coordinates/cylindrical.cpp	/^void Cylindrical::AddCoordTermsDivergence($/;"	f	class:Cylindrical
AddCoordTermsDivergence	coordinates/gr_user.cpp	/^void GRUser::AddCoordTermsDivergence(const Real dt, const AthenaArray<Real> *flux,$/;"	f	class:GRUser
AddCoordTermsDivergence	coordinates/kerr-schild.cpp	/^void KerrSchild::AddCoordTermsDivergence($/;"	f	class:KerrSchild
AddCoordTermsDivergence	coordinates/schwarzschild.cpp	/^void Schwarzschild::AddCoordTermsDivergence($/;"	f	class:Schwarzschild
AddCoordTermsDivergence	coordinates/spherical_polar.cpp	/^void SphericalPolar::AddCoordTermsDivergence(const Real dt, const AthenaArray<Real> *flux,$/;"	f	class:SphericalPolar
AddCoordTermsDivergenceDustFluids	coordinates/coordinates.cpp	/^void Coordinates::AddCoordTermsDivergenceDustFluids($/;"	f	class:Coordinates
AddCoordTermsDivergenceDustFluids	coordinates/cylindrical.cpp	/^void Cylindrical::AddCoordTermsDivergenceDustFluids($/;"	f	class:Cylindrical
AddCoordTermsDivergenceDustFluids	coordinates/spherical_polar.cpp	/^void SphericalPolar::AddCoordTermsDivergenceDustFluids(const Real dt, const AthenaArray<Real> *df_flx,$/;"	f	class:SphericalPolar
AddCoordTermsDivergence_STS	coordinates/coordinates.cpp	/^void Coordinates::AddCoordTermsDivergence_STS($/;"	f	class:Coordinates
AddCoordTermsDivergence_STS	coordinates/cylindrical.cpp	/^void Cylindrical::AddCoordTermsDivergence_STS($/;"	f	class:Cylindrical
AddCoordTermsDivergence_STS	coordinates/spherical_polar.cpp	/^void SphericalPolar::AddCoordTermsDivergence_STS(const Real dt, int stage,$/;"	f	class:SphericalPolar
AddDiffusionEnergyFlux	hydro/hydro_diffusion/hydro_diffusion.cpp	/^void HydroDiffusion::AddDiffusionEnergyFlux(AthenaArray<Real> *flux_src,$/;"	f	class:HydroDiffusion
AddDiffusionFlux	hydro/hydro_diffusion/hydro_diffusion.cpp	/^void HydroDiffusion::AddDiffusionFlux(AthenaArray<Real> *flux_src,$/;"	f	class:HydroDiffusion
AddDiffusionFluxes	dustfluids/calculate_dustfluids_fluxes.cpp	/^void DustFluids::AddDiffusionFluxes() {$/;"	f	class:DustFluids
AddDiffusionFluxes	hydro/calculate_fluxes.cpp	/^void Hydro::AddDiffusionFluxes() {$/;"	f	class:Hydro
AddDiffusionFluxes	scalars/scalar_diffusion.cpp	/^void PassiveScalars::AddDiffusionFluxes() {$/;"	f	class:PassiveScalars
AddDustDiffusionShearForInit	bvals/cc/dustdiffusion/bvals_shear_dustdiffusion.cpp	/^void DustDiffusionBoundaryVariable::AddDustDiffusionShearForInit() {$/;"	f	class:DustDiffusionBoundaryVariable
AddDustFluidsDiffusionFlux	dustfluids/dustfluids_diffusion/dustfluids_diffusion.cpp	/^void DustFluidsDiffusion::AddDustFluidsDiffusionFlux(AthenaArray<Real> *flux_diff,$/;"	f	class:DustFluidsDiffusion
AddDustFluidsFluxDivergence	dustfluids/add_dustfluids_flux_divergence.cpp	/^void DustFluids::AddDustFluidsFluxDivergence(const Real wght, AthenaArray<Real> &cons_df_out) {$/;"	f	class:DustFluids
AddDustFluidsFluxDivergence_STS	dustfluids/add_dustfluids_flux_divergence.cpp	/^void DustFluids::AddDustFluidsFluxDivergence_STS(const Real wght, int stage,$/;"	f	class:DustFluids
AddDustFluidsShearForInit	bvals/cc/dustfluids/bvals_shear_dustfluids.cpp	/^void DustFluidsBoundaryVariable::AddDustFluidsShearForInit() {$/;"	f	class:DustFluidsBoundaryVariable
AddDustFluidsSourceTerms	dustfluids/srcterms/dustfluids_srcterms.cpp	/^void DustFluidsSourceTerms::AddDustFluidsSourceTerms(const Real time, const Real dt,$/;"	f	class:DustFluidsSourceTerms
AddEMF	field/field_diffusion/field_diffusion.cpp	/^void FieldDiffusion::AddEMF(const EdgeField &e_src, EdgeField &e_des) {$/;"	f	class:FieldDiffusion
AddFluxDivergence	hydro/add_flux_divergence.cpp	/^void Hydro::AddFluxDivergence(const Real wght, AthenaArray<Real> &u_out) {$/;"	f	class:Hydro
AddFluxDivergence	scalars/add_scalar_flux_divergence.cpp	/^void PassiveScalars::AddFluxDivergence(const Real wght, AthenaArray<Real> &s_out) {$/;"	f	class:PassiveScalars
AddFluxDivergence_STS	hydro/add_flux_divergence.cpp	/^void Hydro::AddFluxDivergence_STS(const Real wght, int stage,$/;"	f	class:Hydro
AddFluxDivergence_STS	scalars/add_scalar_flux_divergence.cpp	/^void PassiveScalars::AddFluxDivergence_STS(const Real wght, int stage,$/;"	f	class:PassiveScalars
AddHydroShearForInit	bvals/cc/hydro/bvals_shear_hydro.cpp	/^void HydroBoundaryVariable::AddHydroShearForInit() {$/;"	f	class:HydroBoundaryVariable
AddHydroSourceTerms	hydro/srcterms/hydro_srcterms.cpp	/^void HydroSourceTerms::AddHydroSourceTerms(const Real time, const Real dt,$/;"	f	class:HydroSourceTerms
AddMeshBlock	mesh/meshblock_tree.cpp	/^void MeshBlockTree::AddMeshBlock(LogicalLocation rloc, int &nnew) {$/;"	f	class:MeshBlockTree
AddMeshBlockWithoutRefine	mesh/meshblock_tree.cpp	/^void MeshBlockTree::AddMeshBlockWithoutRefine(LogicalLocation rloc) {$/;"	f	class:MeshBlockTree
AddMultigridTask	task_list/mg_task_list.cpp	/^void MultigridTaskList::AddMultigridTask(const TaskID& id, const TaskID& dep) {$/;"	f	class:MultigridTaskList
AddParameter	parameter_input.cpp	/^void ParameterInput::AddParameter(InputBlock *pb, std::string name,$/;"	f	class:ParameterInput
AddPoloidalField	pgen/disk_3d_mhd_dust.cpp	/^void AddPoloidalField(MeshBlock *pmb)$/;"	f	namespace:__anon61
AddPoyntingFlux	field/field_diffusion/field_diffusion.cpp	/^void FieldDiffusion::AddPoyntingFlux(FaceField &p_src) {$/;"	f	class:FieldDiffusion
AddSourceTermsDustFluids	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::AddSourceTermsDustFluids(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
AddSourceTermsHydro	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::AddSourceTermsHydro(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
AddTask	task_list/fft_grav_task_list.cpp	/^void FFTGravitySolverTaskList::AddTask(const TaskID& id, const TaskID& dep) {$/;"	f	class:FFTGravitySolverTaskList
AddTask	task_list/sts_task_list.cpp	/^void SuperTimeStepTaskList::AddTask(const TaskID& id, const TaskID& dep) {$/;"	f	class:SuperTimeStepTaskList
AddTask	task_list/time_integrator.cpp	/^void TimeIntegratorTaskList::AddTask(const TaskID& id, const TaskID& dep) {$/;"	f	class:TimeIntegratorTaskList
AddToRefinement	mesh/mesh_refinement.cpp	/^int MeshRefinement::AddToRefinement(AthenaArray<Real> *pvar_cc,$/;"	f	class:MeshRefinement
AddToRefinement	mesh/mesh_refinement.cpp	/^int MeshRefinement::AddToRefinement(FaceField *pvar_fc, FaceField *pcoarse_fc) {$/;"	f	class:MeshRefinement
AdvanceCounterPhysID	bvals/bvals.cpp	/^int BoundaryValues::AdvanceCounterPhysID(int num_phys) {$/;"	f	class:BoundaryValues
AdvanceSystemRK4	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^void AdvanceSystemRK4(Real dt) {$/;"	f
AdvanceSystemRK4	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^void AdvanceSystemRK4(Real dt) {$/;"	f
AllocateData	athena_arrays.hpp	/^void AthenaArray<T>::AllocateData() {$/;"	f	class:AthenaArray
AllocateIntUserMeshBlockDataField	mesh/meshblock.cpp	/^void MeshBlock::AllocateIntUserMeshBlockDataField(int n) {$/;"	f	class:MeshBlock
AllocateIntUserMeshDataField	mesh/mesh.cpp	/^void Mesh::AllocateIntUserMeshDataField(int n) {$/;"	f	class:Mesh
AllocateRealUserMeshBlockDataField	mesh/meshblock.cpp	/^void MeshBlock::AllocateRealUserMeshBlockDataField(int n) {$/;"	f	class:MeshBlock
AllocateRealUserMeshDataField	mesh/mesh.cpp	/^void Mesh::AllocateRealUserMeshDataField(int n) {$/;"	f	class:Mesh
AllocateUserHistoryOutput	mesh/mesh.cpp	/^void Mesh::AllocateUserHistoryOutput(int n) {$/;"	f	class:Mesh
AllocateUserOutputVariables	mesh/meshblock.cpp	/^void MeshBlock::AllocateUserOutputVariables(int n) {$/;"	f	class:MeshBlock
AllocateUserOutputVariables1D	mesh/meshblock.cpp	/^void MeshBlock::AllocateUserOutputVariables1D(int n) {$/;"	f	class:MeshBlock
AllocateUserOutputVariables2D	mesh/meshblock.cpp	/^void MeshBlock::AllocateUserOutputVariables2D(int n) {$/;"	f	class:MeshBlock
Am0	pgen/disk_3d_mhd_dust.cpp	/^Real beta, mu, Am_in, Am0, Bz0, A30, RBmin, taddBp;$/;"	m	namespace:__anon60	file:
Am_in	pgen/disk_3d_mhd_dust.cpp	/^Real beta, mu, Am_in, Am0, Bz0, A30, RBmin, taddBp;$/;"	m	namespace:__anon60	file:
AmbipolarEMF	field/field_diffusion/diffusivity.cpp	/^void FieldDiffusion::AmbipolarEMF(const FaceField &b, const AthenaArray<Real> &bc,$/;"	f	class:FieldDiffusion
AphiLoop	pgen/disk_3d_mhd_dust.cpp	/^Real AphiLoop(const Real x1, const Real x2, const Real x3, Real R1, Real R2, int nloop)$/;"	f	namespace:__anon61
AphiOpen	pgen/disk_3d_mhd_dust.cpp	/^Real AphiOpen(const Real x1, const Real x2, const Real x3)$/;"	f	namespace:__anon61
AppendOutputDataNode	outputs/outputs.cpp	/^void OutputType::AppendOutputDataNode(OutputData *pnew_data) {$/;"	f	class:OutputType
ApplyDustFluidsFloors	eos/eos_dustfluids.cpp	/^void EquationOfState::ApplyDustFluidsFloors(AthenaArray<Real> &prim_df, int n, int k, int j, int i) {$/;"	f	class:EquationOfState
ApplyDustFluidsPrimitiveConservedFloors	eos/eos_dustfluids.cpp	/^void EquationOfState::ApplyDustFluidsPrimitiveConservedFloors($/;"	f	class:EquationOfState
ApplyKernel	fft/athena_fft.cpp	/^void FFTBlock::ApplyKernel(int mode) {$/;"	f	class:FFTBlock
ApplyKernel	gravity/fft_gravity.cpp	/^void FFTGravity::ApplyKernel(int mode) {$/;"	f	class:FFTGravity
ApplyPassiveScalarFloors	eos/eos_scalars.cpp	/^void EquationOfState::ApplyPassiveScalarFloors(AthenaArray<Real> &r, int n, int k, int j,$/;"	f	class:EquationOfState
ApplyPassiveScalarPrimitiveConservedFloors	eos/eos_scalars.cpp	/^void EquationOfState::ApplyPassiveScalarPrimitiveConservedFloors($/;"	f	class:EquationOfState
ApplyPhysicalBoundaries	bvals/bvals.cpp	/^void BoundaryValues::ApplyPhysicalBoundaries(const Real time, const Real dt,$/;"	f	class:BoundaryValues
ApplyPhysicalBoundaries	bvals/cc/mg/bvals_mg.cpp	/^void MGBoundaryValues::ApplyPhysicalBoundaries(int flag) {$/;"	f	class:MGBoundaryValues
ApplyPhysicalBoundariesOctet	multigrid/multigrid_driver.cpp	/^void MultigridDriver::ApplyPhysicalBoundariesOctet(AthenaArray<Real> &u,$/;"	f	class:MultigridDriver
ApplyPhysicalBoundariesOnCoarseLevel	bvals/bvals_refine.cpp	/^void BoundaryValues::ApplyPhysicalBoundariesOnCoarseLevel($/;"	f	class:BoundaryValues
ApplyPrimitiveConservedFloors	eos/adiabatic_hydro.cpp	/^void EquationOfState::ApplyPrimitiveConservedFloors($/;"	f	class:EquationOfState
ApplyPrimitiveConservedFloors	eos/adiabatic_mhd.cpp	/^void EquationOfState::ApplyPrimitiveConservedFloors($/;"	f	class:EquationOfState
ApplyPrimitiveConservedFloors	eos/eos.hpp	/^  void ApplyPrimitiveConservedFloors($/;"	f	class:EquationOfState
ApplyPrimitiveConservedFloors	eos/general/general_hydro.cpp	/^void EquationOfState::ApplyPrimitiveConservedFloors( AthenaArray<Real> &prim,$/;"	f	class:EquationOfState
ApplyPrimitiveConservedFloors	eos/general/general_mhd.cpp	/^void EquationOfState::ApplyPrimitiveConservedFloors($/;"	f	class:EquationOfState
ApplyPrimitiveConservedFloors	eos/isothermal_hydro.cpp	/^void EquationOfState::ApplyPrimitiveConservedFloors($/;"	f	class:EquationOfState
ApplyPrimitiveConservedFloors	eos/isothermal_mhd.cpp	/^void EquationOfState::ApplyPrimitiveConservedFloors($/;"	f	class:EquationOfState
ApplyPrimitiveFloors	eos/adiabatic_hydro.cpp	/^void EquationOfState::ApplyPrimitiveFloors(AthenaArray<Real> &prim, int k, int j, int i) {$/;"	f	class:EquationOfState
ApplyPrimitiveFloors	eos/adiabatic_hydro_gr.cpp	/^void EquationOfState::ApplyPrimitiveFloors(AthenaArray<Real> &prim, int k, int j, int i) {$/;"	f	class:EquationOfState
ApplyPrimitiveFloors	eos/adiabatic_hydro_sr.cpp	/^void EquationOfState::ApplyPrimitiveFloors(AthenaArray<Real> &prim, int k, int j, int i) {$/;"	f	class:EquationOfState
ApplyPrimitiveFloors	eos/adiabatic_mhd.cpp	/^void EquationOfState::ApplyPrimitiveFloors(AthenaArray<Real> &prim, int k, int j, int i) {$/;"	f	class:EquationOfState
ApplyPrimitiveFloors	eos/adiabatic_mhd_gr.cpp	/^void EquationOfState::ApplyPrimitiveFloors(AthenaArray<Real> &prim, int k, int j, int i) {$/;"	f	class:EquationOfState
ApplyPrimitiveFloors	eos/adiabatic_mhd_sr.cpp	/^void EquationOfState::ApplyPrimitiveFloors(AthenaArray<Real> &prim, int k, int j, int i) {$/;"	f	class:EquationOfState
ApplyPrimitiveFloors	eos/general/general_hydro.cpp	/^void EquationOfState::ApplyPrimitiveFloors(AthenaArray<Real> &prim, int k, int j, int i) {$/;"	f	class:EquationOfState
ApplyPrimitiveFloors	eos/general/general_mhd.cpp	/^void EquationOfState::ApplyPrimitiveFloors(AthenaArray<Real> &prim, int k, int j, int i) {$/;"	f	class:EquationOfState
ApplyPrimitiveFloors	eos/isothermal_hydro.cpp	/^void EquationOfState::ApplyPrimitiveFloors(AthenaArray<Real> &prim, int k, int j, int i) {$/;"	f	class:EquationOfState
ApplyPrimitiveFloors	eos/isothermal_mhd.cpp	/^void EquationOfState::ApplyPrimitiveFloors(AthenaArray<Real> &prim, int k, int j, int i) {$/;"	f	class:EquationOfState
ApplyUserWorkBeforeOutput	mesh/mesh.cpp	/^void Mesh::ApplyUserWorkBeforeOutput(ParameterInput *pin) {$/;"	f	class:Mesh
AsqFromRhoP	eos/general/eos_table.cpp	/^Real EquationOfState::AsqFromRhoP(Real rho, Real pres) {$/;"	f	class:EquationOfState
AsqFromRhoP	eos/general/hydrogen.cpp	/^Real EquationOfState::AsqFromRhoP(Real rho, Real pres) {$/;"	f	class:EquationOfState
AsqFromRhoP	eos/general/ideal.cpp	/^Real EquationOfState::AsqFromRhoP(Real rho, Real pres) {$/;"	f	class:EquationOfState
AsqFromRhoP	eos/general/noop.cpp	/^Real EquationOfState::AsqFromRhoP(Real rho, Real pres) {$/;"	f	class:EquationOfState
AthenaArray	athena_arrays.hpp	/^  AthenaArray() : pdata_(nullptr), nx1_(0), nx2_(0), nx3_(0),$/;"	f	class:AthenaArray
AthenaArray	athena_arrays.hpp	/^  AthenaArray(int nx2, int nx1, DataStatus init=DataStatus::allocated) :$/;"	f	class:AthenaArray
AthenaArray	athena_arrays.hpp	/^  AthenaArray(int nx3, int nx2, int nx1, DataStatus init=DataStatus::allocated) :$/;"	f	class:AthenaArray
AthenaArray	athena_arrays.hpp	/^  AthenaArray(int nx4, int nx3, int nx2, int nx1, DataStatus init=DataStatus::allocated) :$/;"	f	class:AthenaArray
AthenaArray	athena_arrays.hpp	/^  AthenaArray(int nx5, int nx4, int nx3, int nx2, int nx1,$/;"	f	class:AthenaArray
AthenaArray	athena_arrays.hpp	/^  AthenaArray(int nx6, int nx5, int nx4, int nx3, int nx2, int nx1,$/;"	f	class:AthenaArray
AthenaArray	athena_arrays.hpp	/^  explicit AthenaArray(int nx1, DataStatus init=DataStatus::allocated) :$/;"	f	class:AthenaArray
AthenaArray	athena_arrays.hpp	/^__attribute__((nothrow)) AthenaArray<T>::AthenaArray(AthenaArray<T>&& src) {$/;"	f	class:AthenaArray
AthenaArray	athena_arrays.hpp	/^__attribute__((nothrow)) AthenaArray<T>::AthenaArray(const AthenaArray<T>& src) {$/;"	f	class:AthenaArray
AthenaArray	athena_arrays.hpp	/^class AthenaArray {$/;"	c
AthenaFFTDirection	fft/athena_fft.hpp	/^  enum class AthenaFFTDirection {forward=-1, backward=1};$/;"	c	class:FFTBlock
AthenaFFTIndex	fft/athena_fft.cpp	/^AthenaFFTIndex::AthenaFFTIndex(const AthenaFFTIndex *psrc) {$/;"	f	class:AthenaFFTIndex
AthenaFFTIndex	fft/athena_fft.cpp	/^AthenaFFTIndex::AthenaFFTIndex(int dim, LogicalLocation loc, RegionSize msize,$/;"	f	class:AthenaFFTIndex
AthenaFFTIndex	fft/athena_fft.hpp	/^class AthenaFFTIndex{$/;"	c
AthenaFFTPlan	fft/athena_fft.hpp	/^struct AthenaFFTPlan {$/;"	s
AverageFluxBoundary	bvals/fc/flux_correction_fc.cpp	/^void FaceCenteredBoundaryVariable::AverageFluxBoundary() {$/;"	f	class:FaceCenteredBoundaryVariable
B0	pgen/hb3.cpp	/^Real beta, B0;$/;"	m	namespace:__anon58	file:
BLOCK_BNDRY	bvals/bvals_interfaces.hpp	/^enum {BLOCK_BNDRY = -1, BNDRY_UNDEF, REFLECTING_BNDRY, OUTFLOW_BNDRY, USER_BNDRY,$/;"	e	enum:__anon4
BLOCK_BNDRY	bvals/bvals_interfaces.hpp	/^enum {BLOCK_BNDRY __attribute__((deprecated)) = -1,$/;"	e	enum:__anon2
BN	pgen/ssheet_planet_dust.cpp	/^kappap, kappap2, Kai0, etaVk, AN, BN, Psi, time_drag, user_dt, rs, gmp, gMth, t_planet_growth,$/;"	m	namespace:__anon111	file:
BNDRY_UNDEF	bvals/bvals_interfaces.hpp	/^      BNDRY_UNDEF __attribute__((deprecated)),$/;"	e	enum:__anon2
BNDRY_UNDEF	bvals/bvals_interfaces.hpp	/^enum {BLOCK_BNDRY = -1, BNDRY_UNDEF, REFLECTING_BNDRY, OUTFLOW_BNDRY, USER_BNDRY,$/;"	e	enum:__anon4
BVALS_BVALS_HPP_	bvals/bvals.hpp	/^#define BVALS_BVALS_HPP_$/;"	d
BVALS_BVALS_INTERFACES_HPP_	bvals/bvals_interfaces.hpp	/^#define BVALS_BVALS_INTERFACES_HPP_$/;"	d
BVALS_CC_BVALS_CC_HPP_	bvals/cc/bvals_cc.hpp	/^#define BVALS_CC_BVALS_CC_HPP_$/;"	d
BVALS_CC_DUSTDIFFUSION_HPP_	bvals/cc/dustdiffusion/bvals_dustdiffusion.hpp	/^#define BVALS_CC_DUSTDIFFUSION_HPP_$/;"	d
BVALS_CC_DUSTFLUIDS_BVALS_DUSTFLUIDS_HPP_	bvals/cc/dustfluids/bvals_dustfluids.hpp	/^#define BVALS_CC_DUSTFLUIDS_BVALS_DUSTFLUIDS_HPP_$/;"	d
BVALS_CC_HYDRO_BVALS_HYDRO_HPP_	bvals/cc/hydro/bvals_hydro.hpp	/^#define BVALS_CC_HYDRO_BVALS_HYDRO_HPP_$/;"	d
BVALS_CC_MG_BVALS_MG_HPP_	bvals/cc/mg/bvals_mg.hpp	/^#define BVALS_CC_MG_BVALS_MG_HPP_$/;"	d
BVALS_FC_BVALS_FC_HPP_	bvals/fc/bvals_fc.hpp	/^#define BVALS_FC_BVALS_FC_HPP_$/;"	d
BVALS_ORBITAL_BVALS_ORBITAL_HPP_	bvals/orbital/bvals_orbital.hpp	/^#define BVALS_ORBITAL_BVALS_ORBITAL_HPP_$/;"	d
BackwardEulerFeedback	dustfluids/dustfluids_drags/backwardEuler_integrator.cpp	/^void DustGasDrag::BackwardEulerFeedback(const int stage,$/;"	f	class:DustGasDrag
BackwardEulerNoFeedback	dustfluids/dustfluids_drags/backwardEuler_integrator.cpp	/^void DustGasDrag::BackwardEulerNoFeedback(const int stage,$/;"	f	class:DustGasDrag
BoundaryBase	bvals/bvals.hpp	/^class BoundaryBase {$/;"	c
BoundaryBase	bvals/bvals_base.cpp	/^BoundaryBase::BoundaryBase(Mesh *pm, LogicalLocation iloc, RegionSize isize,$/;"	f	class:BoundaryBase
BoundaryBuffer	bvals/bvals_interfaces.hpp	/^  BoundaryBuffer() {}$/;"	f	class:BoundaryBuffer
BoundaryBuffer	bvals/bvals_interfaces.hpp	/^class BoundaryBuffer {$/;"	c
BoundaryCommSubset	athena.hpp	/^enum class BoundaryCommSubset {mesh_init, gr_amr, all, orbital};$/;"	c
BoundaryCommunication	bvals/bvals_interfaces.hpp	/^  BoundaryCommunication() {}$/;"	f	class:BoundaryCommunication
BoundaryCommunication	bvals/bvals_interfaces.hpp	/^class BoundaryCommunication {$/;"	c
BoundaryData	bvals/bvals_interfaces.hpp	/^struct BoundaryData { \/\/ aggregate and POD (even when MPI_PARALLEL is defined)$/;"	s
BoundaryFace	bvals/bvals_interfaces.hpp	/^enum BoundaryFace {undef=-1, inner_x1=0, outer_x1=1, inner_x2=2, outer_x2=3,$/;"	g
BoundaryFlag	bvals/bvals_interfaces.hpp	/^enum class BoundaryFlag {block=-1, undef, reflect, outflow, user, periodic,$/;"	c
BoundaryFunction_	mesh/mesh.hpp	/^  BValFunc BoundaryFunction_[6];$/;"	m	class:Mesh
BoundaryPhysics	bvals/bvals_interfaces.hpp	/^  BoundaryPhysics() {}$/;"	f	class:BoundaryPhysics
BoundaryPhysics	bvals/bvals_interfaces.hpp	/^class BoundaryPhysics {$/;"	c
BoundaryQuantity	athena.hpp	/^enum class BoundaryQuantity {cc, fc, cc_flcor, fc_flcor, mggrav,$/;"	c
BoundaryStatus	bvals/bvals_interfaces.hpp	/^enum class BoundaryStatus {waiting, arrived, completed};$/;"	c
BoundaryValues	bvals/bvals.cpp	/^BoundaryValues::BoundaryValues(MeshBlock *pmb, BoundaryFlag *input_bcs,$/;"	f	class:BoundaryValues
BoundaryValues	bvals/bvals.hpp	/^class BoundaryValues : public BoundaryBase, \/\/public BoundaryPhysics,$/;"	c
BoundaryVariable	bvals/bvals_interfaces.hpp	/^class BoundaryVariable : public BoundaryCommunication, public BoundaryBuffer,$/;"	c
BoundaryVariable	bvals/bvals_var.cpp	/^BoundaryVariable::BoundaryVariable(MeshBlock *pmb) : bvar_index(), pmy_block_(pmb),$/;"	f	class:BoundaryVariable
BufferID	bvals/bvals_base.cpp	/^int BoundaryBase::BufferID(int dim, bool multilevel) {$/;"	f	class:BoundaryBase
BufferUtility	utils/buffer_utils.cpp	/^namespace BufferUtility {$/;"	n	file:
BufferUtility	utils/buffer_utils.hpp	/^namespace BufferUtility {$/;"	n
Bump_Flag	pgen/disk_RWI_2D.cpp	/^bool Damping_Flag, Isothermal_Flag, Bump_Flag;$/;"	m	namespace:__anon101	file:
Bump_Flag	pgen/disk_dust_diffusion.cpp	/^bool Damping_Flag, Isothermal_Flag, Bump_Flag;$/;"	m	namespace:__anon70	file:
Bump_flag	pgen/disk_dust_drift.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon64	file:
Bump_flag	pgen/disk_streaming_cylindrical.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon54	file:
Bump_flag	pgen/disk_streaming_spherical.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon75	file:
Bump_flag	pgen/dust_diffusion.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon117	file:
Bz0	pgen/disk_3d_mhd_dust.cpp	/^Real beta, mu, Am_in, Am0, Bz0, A30, RBmin, taddBp;$/;"	m	namespace:__anon60	file:
CACHELINE_BYTES	athena.hpp	/^#define CACHELINE_BYTES /;"	d
CELLCENTER_DIFFUSION_HPP_	dustfluids/dustfluids_diffusion_cc/cell_center_diffusions.hpp	/^#define CELLCENTER_DIFFUSION_HPP_$/;"	d
COMPILED_WITH	defs.hpp	/^#define COMPILED_WITH /;"	d
COMPILED_WITH_OPTIONS	defs.hpp	/^#define COMPILED_WITH_OPTIONS /;"	d
COMPILER_COMMAND	defs.hpp	/^#define COMPILER_COMMAND /;"	d
COORDINATES_COORDINATES_HPP_	coordinates/coordinates.hpp	/^#define COORDINATES_COORDINATES_HPP_$/;"	d
COORDINATE_SYSTEM	defs.hpp	/^#define COORDINATE_SYSTEM /;"	d
CT	field/ct.cpp	/^void Field::CT(const Real wght, FaceField &b_out) {$/;"	f	class:Field
CT_STS	field/ct.cpp	/^void Field::CT_STS(const Real wght, int stage,$/;"	f	class:Field
CalcCondCoeff_	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  ConductionCoeffFunc CalcCondCoeff_;$/;"	m	class:HydroDiffusion
CalcCurrent	field/field_diffusion/diffusivity.cpp	/^void FieldDiffusion::CalcCurrent(FaceField &b) {$/;"	f	class:FieldDiffusion
CalcDiffusionEMF	field/field_diffusion/field_diffusion.cpp	/^void FieldDiffusion::CalcDiffusionEMF(FaceField &bi, const AthenaArray<Real> &bc,$/;"	f	class:FieldDiffusion
CalcDiffusionFlux	hydro/hydro_diffusion/hydro_diffusion.cpp	/^void HydroDiffusion::CalcDiffusionFlux(const AthenaArray<Real> &prim,$/;"	f	class:HydroDiffusion
CalcDustDiffusivityCoeff_	dustfluids/dustfluids_diffusion/dustfluids_diffusion.hpp	/^  DustDiffusionCoeffFunc CalcDustDiffusivityCoeff_;$/;"	m	class:DustFluidsDiffusion
CalcDustFluidsDiffusionFlux	dustfluids/dustfluids_diffusion/dustfluids_diffusion.cpp	/^void DustFluidsDiffusion::CalcDustFluidsDiffusionFlux($/;"	f	class:DustFluidsDiffusion
CalcMagDiffCoeff_	field/field_diffusion/field_diffusion.hpp	/^  FieldDiffusionCoeffFunc CalcMagDiffCoeff_; \/\/ calculate magnetic diffusivities$/;"	m	class:FieldDiffusion
CalcViscCoeff_	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  ViscosityCoeffFunc CalcViscCoeff_;$/;"	m	class:HydroDiffusion
CalculateCartesianVector	outputs/outputs.cpp	/^void OutputType::CalculateCartesianVector(AthenaArray<Real> &src, AthenaArray<Real> &dst,$/;"	f	class:OutputType
CalculateCellCenteredField	field/field.cpp	/^void Field::CalculateCellCenteredField($/;"	f	class:Field
CalculateDefect	gravity/mg_gravity.cpp	/^void MGGravity::CalculateDefect(AthenaArray<Real> &def, const AthenaArray<Real> &u,$/;"	f	class:MGGravity
CalculateDefectBlock	multigrid/multigrid.cpp	/^void Multigrid::CalculateDefectBlock() {$/;"	f	class:Multigrid
CalculateDefectNorm	multigrid/multigrid.cpp	/^Real Multigrid::CalculateDefectNorm(MGNormType nrm, int n) {$/;"	f	class:Multigrid
CalculateDefectNorm	multigrid/multigrid_driver.cpp	/^Real MultigridDriver::CalculateDefectNorm(MGNormType nrm, int n) {$/;"	f	class:MultigridDriver
CalculateDiffusiveMomentum	dustfluids/dustfluids_diffusion_cc/calculate_cellcenter_diffusion.cpp	/^void DustFluidsCellCenterDiffusion::CalculateDiffusiveMomentum(const AthenaArray<Real> &prim_df,$/;"	f	class:DustFluidsCellCenterDiffusion
CalculateDustFluidsFlux	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::CalculateDustFluidsFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
CalculateDustFluidsFluxes	dustfluids/calculate_dustfluids_fluxes.cpp	/^void DustFluids::CalculateDustFluidsFluxes(AthenaArray<Real> &prim_df, const int order) {$/;"	f	class:DustFluids
CalculateDustFluidsFluxes_STS	dustfluids/calculate_dustfluids_fluxes.cpp	/^void DustFluids::CalculateDustFluidsFluxes_STS() {$/;"	f	class:DustFluids
CalculateEMF	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::CalculateEMF(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
CalculateEMF_STS	task_list/sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::CalculateEMF_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
CalculateFASRHS	gravity/mg_gravity.cpp	/^void MGGravity::CalculateFASRHS(AthenaArray<Real> &src, const AthenaArray<Real> &u,$/;"	f	class:MGGravity
CalculateFASRHS	task_list/mg_task_list.cpp	/^TaskStatus MultigridTaskList::CalculateFASRHS(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
CalculateFASRHSBlock	multigrid/multigrid.cpp	/^void Multigrid::CalculateFASRHSBlock() {$/;"	f	class:Multigrid
CalculateFASRHSOctets	multigrid/multigrid_driver.cpp	/^void MultigridDriver::CalculateFASRHSOctets() {$/;"	f	class:MultigridDriver
CalculateFieldOrbital	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::CalculateFieldOrbital(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
CalculateFluxes	hydro/calculate_fluxes.cpp	/^void Hydro::CalculateFluxes(AthenaArray<Real> &w, FaceField &b,$/;"	f	class:Hydro
CalculateFluxes	scalars/calculate_scalar_fluxes.cpp	/^void PassiveScalars::CalculateFluxes(AthenaArray<Real> &r, const int order) {$/;"	f	class:PassiveScalars
CalculateFluxes_STS	hydro/calculate_fluxes.cpp	/^void Hydro::CalculateFluxes_STS() {$/;"	f	class:Hydro
CalculateFluxes_STS	scalars/calculate_scalar_fluxes.cpp	/^void PassiveScalars::CalculateFluxes_STS() {$/;"	f	class:PassiveScalars
CalculateFromTable	pgen/gr_mhd_inflow.cpp	/^void CalculateFromTable(Real r, Real theta, Real *prho, Real *put, Real *pur,$/;"	f	namespace:__anon73
CalculateHydroFlux	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::CalculateHydroFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
CalculateHydroFlux_STS	task_list/sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::CalculateHydroFlux_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
CalculateHydroOrbital	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::CalculateHydroOrbital(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
CalculateLFromRPeak	pgen/gr_torus.cpp	/^Real CalculateLFromRPeak(Real r) {$/;"	f	namespace:__anon44
CalculateLoadBalance	mesh/amr_loadbalance.cpp	/^void Mesh::CalculateLoadBalance(double *clist, int *rlist, int *slist, int *nlist,$/;"	f	class:Mesh
CalculateNormalConserved	eos/adiabatic_hydro_gr.cpp	/^void CalculateNormalConserved($/;"	f	namespace:__anon17
CalculateNormalConserved	eos/adiabatic_mhd_gr.cpp	/^void CalculateNormalConserved($/;"	f	namespace:__anon13
CalculateOrbitalAdvectionCC	orbital_advection/calculate_orbital_advection.cpp	/^void OrbitalAdvection::CalculateOrbitalAdvectionCC(const Real dt, AthenaArray<Real> &u,$/;"	f	class:OrbitalAdvection
CalculateOrbitalAdvectionFC	orbital_advection/calculate_orbital_advection.cpp	/^void OrbitalAdvection::CalculateOrbitalAdvectionFC(const Real dt, EdgeField &e) {$/;"	f	class:OrbitalAdvection
CalculatePrimitives	pgen/gr_bondi.cpp	/^void CalculatePrimitives(Real r, Real temp_min, Real temp_max, Real *prho,$/;"	f	namespace:__anon81
CalculateRPeakFromL	pgen/gr_torus.cpp	/^Real CalculateRPeakFromL(Real l_target) {$/;"	f	namespace:__anon45
CalculateScalarFlux	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::CalculateScalarFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
CalculateScalarFlux_STS	task_list/sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::CalculateScalarFlux_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
CalculateTotal	multigrid/multigrid.cpp	/^Real Multigrid::CalculateTotal(MGVariable type, int n) {$/;"	f	class:Multigrid
CalculateTransformation	coordinates/gr_user.cpp	/^void CalculateTransformation($/;"	f	namespace:__anon6
CalculateVelocityDifferences	hydro/calculate_velocity_differences.cpp	/^void Hydro::CalculateVelocityDifferences(const int k, const int j,$/;"	f	class:Hydro
CalculateVelocityInTiltedTorus	pgen/gr_torus.cpp	/^void CalculateVelocityInTiltedTorus(Real r, Real th, Real ph, Real *p_ut, Real *p_ur,$/;"	f	namespace:__anon48
CalculateVelocityInTorus	pgen/gr_torus.cpp	/^void CalculateVelocityInTorus(Real r, Real sth, Real *p_ut, Real *p_uph) {$/;"	f	namespace:__anon47
CancelWallTimeAlarm	utils/signal_handler.cpp	/^void CancelWallTimeAlarm() {$/;"	f	namespace:SignalHandler
Car2Sph	pgen/inject_pebble_3D.cpp	/^void Car2Sph(Real rad, Real theta,Real phi, Real vx, Real vy, Real vz, Real &v1, Real &v2, Real &v3) {$/;"	f	namespace:__anon63
CartInnerX1	pgen/dust_diffusion.cpp	/^void CartInnerX1(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
CartInnerX2	pgen/dust_diffusion.cpp	/^void CartInnerX2(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
CartOrbitalVelocity	orbital_advection/default_orbital_velocity.cpp	/^Real CartOrbitalVelocity(OrbitalAdvection *porb, Real x_, Real y_, Real z_) {$/;"	f
CartOrbitalVelocity_x	orbital_advection/default_orbital_velocity.cpp	/^Real CartOrbitalVelocity_x(OrbitalAdvection *porb, Real x_, Real y_, Real z_) {$/;"	f
CartOuterX1	pgen/dust_diffusion.cpp	/^void CartOuterX1(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
CartOuterX2	pgen/dust_diffusion.cpp	/^void CartOuterX2(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
Cartesian	coordinates/cartesian.cpp	/^Cartesian::Cartesian(MeshBlock *pmb, ParameterInput *pin, bool flag)$/;"	f	class:Cartesian
Cartesian	coordinates/coordinates.hpp	/^class Cartesian : public Coordinates {$/;"	c
CellCenteredBoundaryVariable	bvals/cc/bvals_cc.cpp	/^CellCenteredBoundaryVariable::CellCenteredBoundaryVariable($/;"	f	class:CellCenteredBoundaryVariable
CellCenteredBoundaryVariable	bvals/cc/bvals_cc.hpp	/^class CellCenteredBoundaryVariable : public BoundaryVariable {$/;"	c
CellMetric	coordinates/coordinates.hpp	/^  virtual void CellMetric(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates
CellMetric	coordinates/gr_user.cpp	/^void GRUser::CellMetric(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser
CellMetric	coordinates/kerr-schild.cpp	/^void KerrSchild::CellMetric(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild
CellMetric	coordinates/minkowski.cpp	/^void Minkowski::CellMetric(const int k, const int j, const int il, const int iu,$/;"	f	class:Minkowski
CellMetric	coordinates/schwarzschild.cpp	/^void Schwarzschild::CellMetric(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild
CellVolume	coordinates/coordinates.cpp	/^void Coordinates::CellVolume(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates
CellVolume	coordinates/cylindrical.cpp	/^void Cylindrical::CellVolume(const int k, const int j, const int il, const int iu,$/;"	f	class:Cylindrical
CellVolume	coordinates/gr_user.cpp	/^void GRUser::CellVolume(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser
CellVolume	coordinates/kerr-schild.cpp	/^void KerrSchild::CellVolume(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild
CellVolume	coordinates/schwarzschild.cpp	/^void Schwarzschild::CellVolume(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild
CellVolume	coordinates/spherical_polar.cpp	/^void SphericalPolar::CellVolume(const int k, const int j, const int il, const int iu,$/;"	f	class:SphericalPolar
CenterWidth1	coordinates/coordinates.cpp	/^void Coordinates::CenterWidth1(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates
CenterWidth1	coordinates/gr_user.cpp	/^void GRUser::CenterWidth1(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser
CenterWidth1	coordinates/kerr-schild.cpp	/^void KerrSchild::CenterWidth1(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild
CenterWidth1	coordinates/schwarzschild.cpp	/^void Schwarzschild::CenterWidth1(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild
CenterWidth2	coordinates/coordinates.cpp	/^void Coordinates::CenterWidth2(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates
CenterWidth2	coordinates/cylindrical.cpp	/^void Cylindrical::CenterWidth2(const int k, const int j, const int il, const int iu,$/;"	f	class:Cylindrical
CenterWidth2	coordinates/gr_user.cpp	/^void GRUser::CenterWidth2(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser
CenterWidth2	coordinates/kerr-schild.cpp	/^void KerrSchild::CenterWidth2(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild
CenterWidth2	coordinates/schwarzschild.cpp	/^void Schwarzschild::CenterWidth2(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild
CenterWidth2	coordinates/spherical_polar.cpp	/^void SphericalPolar::CenterWidth2(const int k, const int j, const int il, const int iu,$/;"	f	class:SphericalPolar
CenterWidth3	coordinates/coordinates.cpp	/^void Coordinates::CenterWidth3(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates
CenterWidth3	coordinates/gr_user.cpp	/^void GRUser::CenterWidth3(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser
CenterWidth3	coordinates/kerr-schild.cpp	/^void KerrSchild::CenterWidth3(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild
CenterWidth3	coordinates/schwarzschild.cpp	/^void Schwarzschild::CenterWidth3(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild
CenterWidth3	coordinates/spherical_polar.cpp	/^void SphericalPolar::CenterWidth3(const int k, const int j, const int il, const int iu,$/;"	f	class:SphericalPolar
ChangeRunDir	utils/change_rundir.cpp	/^void ChangeRunDir(const char *pdir) {$/;"	f
CheckBoundaryFlag	bvals/utils/boundary_flag.cpp	/^void CheckBoundaryFlag(BoundaryFlag block_flag, CoordinateDirection dir) {$/;"	f
CheckDependencies	task_list/task_id.cpp	/^bool TaskID::CheckDependencies(const TaskID& dep) const {$/;"	f	class:TaskID
CheckNextMainStage	task_list/task_list.hpp	/^  bool CheckNextMainStage(int stage) const {return stage_wghts[stage%nstages].main_stage;}$/;"	f	class:TimeIntegratorTaskList
CheckPolarBoundaries	bvals/utils/check_polar.cpp	/^void BoundaryValues::CheckPolarBoundaries() {$/;"	f	class:BoundaryValues
CheckRefinement	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::CheckRefinement(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
CheckRefinementCondition	mesh/mesh_refinement.cpp	/^void MeshRefinement::CheckRefinementCondition() {$/;"	f	class:MeshRefinement
CheckRefinement_STS	task_list/sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::CheckRefinement_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
CheckSignalFlags	utils/signal_handler.cpp	/^int CheckSignalFlags() {$/;"	f	namespace:SignalHandler
CheckUserBoundaries	bvals/bvals.cpp	/^void BoundaryValues::CheckUserBoundaries() {$/;"	f	class:BoundaryValues
Clear	task_list/task_id.cpp	/^void TaskID::Clear() {$/;"	f	class:TaskID
ClearAllBoundary	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ClearAllBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ClearAllBoundary_STS	task_list/sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::ClearAllBoundary_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
ClearBoundary	bvals/cc/bvals_cc.cpp	/^void CellCenteredBoundaryVariable::ClearBoundary(BoundaryCommSubset phase) {$/;"	f	class:CellCenteredBoundaryVariable
ClearBoundary	bvals/fc/bvals_fc.cpp	/^void FaceCenteredBoundaryVariable::ClearBoundary(BoundaryCommSubset phase) {$/;"	f	class:FaceCenteredBoundaryVariable
ClearBoundary	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::ClearBoundary(BoundaryCommSubset phase) {$/;"	f	class:OrbitalBoundaryCommunication
ClearBoundary	task_list/mg_task_list.cpp	/^TaskStatus MultigridTaskList::ClearBoundary(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
ClearBoundaryFluxCons	task_list/mg_task_list.cpp	/^TaskStatus MultigridTaskList::ClearBoundaryFluxCons(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
ClearBoundaryMultigrid	bvals/cc/mg/bvals_mg.cpp	/^void MGBoundaryValues::ClearBoundaryMultigrid(BoundaryQuantity type) {$/;"	f	class:MGBoundaryValues
ClearBoundarySubset	bvals/bvals.cpp	/^void BoundaryValues::ClearBoundarySubset(BoundaryCommSubset phase,$/;"	f	class:BoundaryValues
ClearCoarseFluxBoundary	bvals/fc/flux_correction_fc.cpp	/^void FaceCenteredBoundaryVariable::ClearCoarseFluxBoundary() {$/;"	f	class:FaceCenteredBoundaryVariable
ClearDustFluidsFlux	dustfluids/dustfluids_diffusion/dustfluids_diffusion.cpp	/^void DustFluidsDiffusion::ClearDustFluidsFlux(AthenaArray<Real> *flux_diff) {$/;"	f	class:DustFluidsDiffusion
ClearEMF	field/field_diffusion/field_diffusion.cpp	/^void FieldDiffusion::ClearEMF(EdgeField &e) {$/;"	f	class:FieldDiffusion
ClearEMFShearing	bvals/fc/bvals_shear_emf.cpp	/^void FaceCenteredBoundaryVariable::ClearEMFShearing(EdgeField &work) {$/;"	f	class:FaceCenteredBoundaryVariable
ClearFFTGravityBoundary	task_list/fft_grav_task_list.cpp	/^TaskStatus FFTGravitySolverTaskList::ClearFFTGravityBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:FFTGravitySolverTaskList
ClearFlux	hydro/hydro_diffusion/hydro_diffusion.cpp	/^void HydroDiffusion::ClearFlux(AthenaArray<Real> *flux) {$/;"	f	class:HydroDiffusion
ClearOutputData	outputs/outputs.cpp	/^void OutputType::ClearOutputData() {$/;"	f	class:OutputType
ClearTaskList	task_list/mg_task_list.hpp	/^  void ClearTaskList() {ntasks=0;}$/;"	f	class:MultigridTaskList
Close	outputs/io_wrapper.cpp	/^int IOWrapper::Close() {$/;"	f	class:IOWrapper
CompressedX2	pgen/disk_3d_mhd_dust.cpp	/^Real CompressedX2(Real x, RegionSize rs)$/;"	f	namespace:__anon61
ComputeCornerE	field/calculate_corner_e.cpp	/^void Field::ComputeCornerE(AthenaArray<Real> &w, AthenaArray<Real> &bcc) {$/;"	f	class:Field
ComputeCornerE_STS	field/calculate_corner_e.cpp	/^void Field::ComputeCornerE_STS() {$/;"	f	class:Field
ComputeFluxCorrectionBufferSize	bvals/cc/bvals_cc.cpp	/^int CellCenteredBoundaryVariable::ComputeFluxCorrectionBufferSize($/;"	f	class:CellCenteredBoundaryVariable
ComputeFluxCorrectionBufferSize	bvals/fc/bvals_fc.cpp	/^int FaceCenteredBoundaryVariable::ComputeFluxCorrectionBufferSize($/;"	f	class:FaceCenteredBoundaryVariable
ComputeMeshGeneratorX	mesh/mesh.hpp	/^inline Real ComputeMeshGeneratorX(std::int64_t index, std::int64_t nrange,$/;"	f
ComputeOrbit	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::ComputeOrbit(const Real dt) {$/;"	f	class:OrbitalBoundaryCommunication
ComputeShear	bvals/bvals.cpp	/^void BoundaryValues::ComputeShear(const Real time_fc, const Real time_int) {$/;"	f	class:BoundaryValues
ComputeUpwindFlux	scalars/calculate_scalar_fluxes.cpp	/^void PassiveScalars::ComputeUpwindFlux(const int k, const int j, const int il,$/;"	f	class:PassiveScalars
ComputeVariableBufferSize	bvals/cc/bvals_cc.cpp	/^int CellCenteredBoundaryVariable::ComputeVariableBufferSize(const NeighborIndexes& ni,$/;"	f	class:CellCenteredBoundaryVariable
ComputeVariableBufferSize	bvals/fc/bvals_fc.cpp	/^int FaceCenteredBoundaryVariable::ComputeVariableBufferSize(const NeighborIndexes& ni,$/;"	f	class:FaceCenteredBoundaryVariable
ConductionCoeff_	mesh/mesh.hpp	/^  ConductionCoeffFunc ConductionCoeff_;$/;"	m	class:Mesh
Cons1D	hydro/rsolvers/mhd/hlld.cpp	/^struct Cons1D {$/;"	s	file:
Cons1D	hydro/rsolvers/mhd/hlld_backup.cpp	/^struct Cons1D {$/;"	s	file:
Cons1D	hydro/rsolvers/mhd/hlld_iso.cpp	/^struct Cons1D {$/;"	s	file:
Cons1D	hydro/rsolvers/mhd/lhlld.cpp	/^struct Cons1D {$/;"	s	file:
ConsIndex	athena.hpp	/^enum ConsIndex {IDN=0, IM1=1, IM2=2, IM3=3, IEN=4};$/;"	g
ConservedToPrimitive	eos/adiabatic_hydro.cpp	/^void EquationOfState::ConservedToPrimitive($/;"	f	class:EquationOfState
ConservedToPrimitive	eos/adiabatic_hydro_gr.cpp	/^void EquationOfState::ConservedToPrimitive($/;"	f	class:EquationOfState
ConservedToPrimitive	eos/adiabatic_hydro_sr.cpp	/^void EquationOfState::ConservedToPrimitive($/;"	f	class:EquationOfState
ConservedToPrimitive	eos/adiabatic_mhd.cpp	/^void EquationOfState::ConservedToPrimitive($/;"	f	class:EquationOfState
ConservedToPrimitive	eos/adiabatic_mhd_gr.cpp	/^void EquationOfState::ConservedToPrimitive($/;"	f	class:EquationOfState
ConservedToPrimitive	eos/adiabatic_mhd_sr.cpp	/^void EquationOfState::ConservedToPrimitive($/;"	f	class:EquationOfState
ConservedToPrimitive	eos/general/general_hydro.cpp	/^void EquationOfState::ConservedToPrimitive($/;"	f	class:EquationOfState
ConservedToPrimitive	eos/general/general_mhd.cpp	/^void EquationOfState::ConservedToPrimitive($/;"	f	class:EquationOfState
ConservedToPrimitive	eos/isothermal_hydro.cpp	/^void EquationOfState::ConservedToPrimitive($/;"	f	class:EquationOfState
ConservedToPrimitive	eos/isothermal_mhd.cpp	/^void EquationOfState::ConservedToPrimitive($/;"	f	class:EquationOfState
ConservedToPrimitiveCellAverage	eos/eos_high_order.cpp	/^void EquationOfState::ConservedToPrimitiveCellAverage($/;"	f	class:EquationOfState
ConservedToPrimitiveNormal	eos/adiabatic_hydro_gr.cpp	/^bool ConservedToPrimitiveNormal($/;"	f	namespace:__anon17
ConservedToPrimitiveNormal	eos/adiabatic_hydro_sr.cpp	/^bool ConservedToPrimitiveNormal($/;"	f	namespace:__anon19
ConservedToPrimitiveNormal	eos/adiabatic_mhd_gr.cpp	/^bool ConservedToPrimitiveNormal($/;"	f	namespace:__anon13
ConservedToPrimitiveNormal	eos/adiabatic_mhd_sr.cpp	/^bool ConservedToPrimitiveNormal($/;"	f	namespace:__anon15
ConstConduction	hydro/hydro_diffusion/conduction.cpp	/^void ConstConduction(HydroDiffusion *phdif, MeshBlock *pmb, const AthenaArray<Real> &prim,$/;"	f
ConstDiffusivity	field/field_diffusion/diffusivity.cpp	/^void ConstDiffusivity(FieldDiffusion *pfdif, MeshBlock *pmb, const AthenaArray<Real> &w,$/;"	f
ConstViscosity	hydro/hydro_diffusion/viscosity.cpp	/^void ConstViscosity(HydroDiffusion *phdif, MeshBlock *pmb, const AthenaArray<Real> &prim,$/;"	f
ConstantAcceleration	hydro/srcterms/constant_acc.cpp	/^void HydroSourceTerms::ConstantAcceleration(const Real dt,const AthenaArray<Real> *flux,$/;"	f	class:HydroSourceTerms
ConstantAccelerationDustFluids	dustfluids/srcterms/constant_acc_dustfluids.cpp	/^void DustFluidsSourceTerms::ConstantAccelerationDustFluids(const Real dt, const AthenaArray<Real> *flux_df,$/;"	f	class:DustFluidsSourceTerms
ConstantDustDiffusivity	dustfluids/dustfluids_diffusion/diffusivity_dustfluids.cpp	/^void DustFluidsDiffusion::ConstantDustDiffusivity(DustFluids *pdf,$/;"	f	class:DustFluidsDiffusion
ConstantStoppingTime	dustfluids/dustfluids.cpp	/^void DustFluids::ConstantStoppingTime(MeshBlock *pmb,$/;"	f	class:DustFluids
ContainVariable	outputs/outputs.cpp	/^bool OutputType::ContainVariable(const std::string &haystack, const std::string &needle) {$/;"	f	class:OutputType
ConvertOrbitalSystem	orbital_advection/orbital_system_conversion.cpp	/^void OrbitalAdvection::ConvertOrbitalSystem(const AthenaArray<Real> &w0,$/;"	f	class:OrbitalAdvection
ConvertOrbitalSystemDustFluids	orbital_advection/orbital_system_conversion.cpp	/^void OrbitalAdvection::ConvertOrbitalSystemDustFluids(const int dust_id, const AthenaArray<Real> &df_prim0,$/;"	f	class:OrbitalAdvection
CoordinateDirection	athena.hpp	/^enum CoordinateDirection {X1DIR=0, X2DIR=1, X3DIR=2};$/;"	g
Coordinates	coordinates/coordinates.cpp	/^Coordinates::Coordinates(MeshBlock *pmb, ParameterInput *pin, bool flag) :$/;"	f	class:Coordinates
Coordinates	coordinates/coordinates.hpp	/^class Coordinates {$/;"	c
CopyFluxCorrectionBufferSameProcess	bvals/bvals_var.cpp	/^void BoundaryVariable::CopyFluxCorrectionBufferSameProcess(NeighborBlock& nb, int ssize) {$/;"	f	class:BoundaryVariable
CopyNeighborInfoFromMeshBlock	bvals/cc/mg/bvals_mg.cpp	/^void MGBoundaryValues::CopyNeighborInfoFromMeshBlock() {$/;"	f	class:MGBoundaryValues
CopyPolarBufferSameProcess	bvals/fc/flux_correction_fc.cpp	/^void FaceCenteredBoundaryVariable::CopyPolarBufferSameProcess($/;"	f	class:FaceCenteredBoundaryVariable
CopyShearBufferSameProcess	bvals/bvals_var.cpp	/^void BoundaryVariable::CopyShearBufferSameProcess(SimpleNeighborBlock& snb, int ssize,$/;"	f	class:BoundaryVariable
CopyShearFluxSameProcess	bvals/bvals_var.cpp	/^void BoundaryVariable::CopyShearFluxSameProcess(SimpleNeighborBlock& snb, int ssize,$/;"	f	class:BoundaryVariable
CopyVariableBufferSameProcess	bvals/bvals_var.cpp	/^void BoundaryVariable::CopyVariableBufferSameProcess(NeighborBlock& nb, int ssize) {$/;"	f	class:BoundaryVariable
CorrectMidpointInitialCondition	mesh/mesh.cpp	/^void Mesh::CorrectMidpointInitialCondition() {$/;"	f	class:Mesh
CountFineEdges	bvals/fc/bvals_fc.cpp	/^void FaceCenteredBoundaryVariable::CountFineEdges() {$/;"	f	class:FaceCenteredBoundaryVariable
CountMGOctets	mesh/meshblock_tree.cpp	/^void MeshBlockTree::CountMGOctets(int *noct) {$/;"	f	class:MeshBlockTree
CountMeshBlock	mesh/meshblock_tree.cpp	/^void MeshBlockTree::CountMeshBlock(int& count) {$/;"	f	class:MeshBlockTree
CreateAMRMPITag	mesh/amr_loadbalance.cpp	/^int Mesh::CreateAMRMPITag(int lid, int ox1, int ox2, int ox3) {$/;"	f	class:Mesh
CreateBufferID	bvals/bvals_base.cpp	/^int BoundaryBase::CreateBufferID(int ox1, int ox2, int ox3, int fi1, int fi2) {$/;"	f	class:BoundaryBase
CreateBvalsMPITag	bvals/bvals_base.cpp	/^int BoundaryBase::CreateBvalsMPITag(int lid, int bufid, int phys) {$/;"	f	class:BoundaryBase
CreatePlan	fft/athena_fft.cpp	/^AthenaFFTPlan *FFTBlock::CreatePlan(int nfast, int nmid, int nslow,$/;"	f	class:FFTBlock
CreatePlan	fft/athena_fft.cpp	/^AthenaFFTPlan *FFTBlock::CreatePlan(int nfast, int nslow,$/;"	f	class:FFTBlock
CreatePlan	fft/athena_fft.cpp	/^AthenaFFTPlan *FFTBlock::CreatePlan(int nfast, std::complex<Real> *data,$/;"	f	class:FFTBlock
CreateRootGrid	mesh/meshblock_tree.cpp	/^void MeshBlockTree::CreateRootGrid() {$/;"	f	class:MeshBlockTree
CubicRootReal	pgen/gr_linear_wave.cpp	/^Real CubicRootReal(Real a2, Real a1, Real a0) {$/;"	f	namespace:__anon85
CylOrbitalVelocity2D	orbital_advection/default_orbital_velocity.cpp	/^Real CylOrbitalVelocity2D(OrbitalAdvection *porb, Real x_, Real y_, Real z_) {$/;"	f
CylOrbitalVelocity2D_r	orbital_advection/default_orbital_velocity.cpp	/^Real CylOrbitalVelocity2D_r(OrbitalAdvection *porb, Real x_, Real y_, Real z_) {$/;"	f
CylOrbitalVelocity3D	orbital_advection/default_orbital_velocity.cpp	/^Real CylOrbitalVelocity3D(OrbitalAdvection *porb, Real x_, Real y_, Real z_) {$/;"	f
CylOrbitalVelocity3D_r	orbital_advection/default_orbital_velocity.cpp	/^Real CylOrbitalVelocity3D_r(OrbitalAdvection *porb, Real x_, Real y_, Real z_) {$/;"	f
CylOrbitalVelocity3D_z	orbital_advection/default_orbital_velocity.cpp	/^Real CylOrbitalVelocity3D_z(OrbitalAdvection *porb, Real x_, Real y_, Real z_) {$/;"	f
Cylindrical	coordinates/coordinates.hpp	/^class Cylindrical : public Coordinates {$/;"	c
Cylindrical	coordinates/cylindrical.cpp	/^Cylindrical::Cylindrical(MeshBlock *pmb, ParameterInput *pin, bool flag)$/;"	f	class:Cylindrical
DEFS_HPP_	defs.hpp	/^#define DEFS_HPP_$/;"	d
DMRInnerX1	pgen/dmr.cpp	/^void DMRInnerX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df, FaceField &b,$/;"	f
DMRInnerX1	pgen/dmr_dust.cpp	/^void DMRInnerX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DMRInnerX2	pgen/dmr.cpp	/^void DMRInnerX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df, FaceField &b,$/;"	f
DMRInnerX2	pgen/dmr_dust.cpp	/^void DMRInnerX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DMROuterX2	pgen/dmr.cpp	/^void DMROuterX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df, FaceField &b,$/;"	f
DMROuterX2	pgen/dmr_dust.cpp	/^void DMROuterX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DRAG_DUSTGAS_HPP_	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^#define DRAG_DUSTGAS_HPP_$/;"	d
DUSTFLUIDS_DIFFUSION_HPP_	dustfluids/dustfluids_diffusion/dustfluids_diffusion.hpp	/^#define DUSTFLUIDS_DIFFUSION_HPP_$/;"	d
DUSTFLUIDS_HPP_	dustfluids/dustfluids.hpp	/^#define DUSTFLUIDS_HPP_$/;"	d
DUSTFLUIDS_SRCTERMS_HPP_	dustfluids/srcterms/dustfluids_srcterms.hpp	/^#define DUSTFLUIDS_SRCTERMS_HPP_$/;"	d
Damping_Flag	pgen/disk_RWI_2D.cpp	/^bool Damping_Flag, Isothermal_Flag, Bump_Flag;$/;"	m	namespace:__anon101	file:
Damping_Flag	pgen/disk_dust_diffusion.cpp	/^bool Damping_Flag, Isothermal_Flag, Bump_Flag;$/;"	m	namespace:__anon70	file:
Damping_Flag	pgen/disk_dust_drift.cpp	/^bool Damping_Flag;$/;"	m	namespace:__anon64	file:
Damping_Flag	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^bool Damping_Flag, Isothermal_Flag, MassTransfer_Flag,$/;"	m	namespace:__anon68	file:
Damping_Flag	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^bool Damping_Flag, Isothermal_Flag, MassTransfer_Flag,$/;"	m	namespace:__anon109	file:
Damping_Flag	pgen/disk_planet_dust_cylindrical.cpp	/^bool Damping_Flag, Isothermal_Flag, MassTransfer_Flag,$/;"	m	namespace:__anon99	file:
Damping_Flag	pgen/disk_planet_dust_spherical.cpp	/^bool Damping_Flag, Isothermal_Flag, MassTransfer_Flag,$/;"	m	namespace:__anon113	file:
Damping_Flag	pgen/disk_streaming_cylindrical.cpp	/^bool Damping_Flag;$/;"	m	namespace:__anon54	file:
Damping_Flag	pgen/disk_streaming_spherical.cpp	/^bool Damping_Flag;$/;"	m	namespace:__anon75	file:
Damping_Flag	pgen/dust_diffusion.cpp	/^bool Damping_Flag, Isothermal_Flag;$/;"	m	namespace:__anon117	file:
Damping_Flag	pgen/ssheet_RWI_dust.cpp	/^bool DustDrift_Flag, Damping_Flag;$/;"	m	namespace:__anon90	file:
Damping_Flag	pgen/ssheet_planet_dust.cpp	/^bool DustDrift_Flag, Damping_Flag;$/;"	m	namespace:__anon111	file:
DataStatus	athena_arrays.hpp	/^  enum class DataStatus {empty, shallow_slice, allocated};  \/\/ formerly, "bool scopy_"$/;"	c	class:AthenaArray
Dd	pgen/disk_dust_diffusion.cpp	/^weight_dust[NDUSTFLUIDS], Dd[NDUSTFLUIDS];$/;"	m	namespace:__anon70	file:
DecompositionNames	fft/athena_fft.hpp	/^namespace DecompositionNames{$/;"	n	class:FFTBlock
DeepCopy	mesh/weighted_ave.cpp	/^void MeshBlock::DeepCopy(AthenaArray<Real> &u_out, const AthenaArray<Real> &u_in) {$/;"	f	class:MeshBlock
DefaultMeshGeneratorX1	mesh/mesh.hpp	/^inline Real DefaultMeshGeneratorX1(Real x, RegionSize rs) {$/;"	f
DefaultMeshGeneratorX2	mesh/mesh.hpp	/^inline Real DefaultMeshGeneratorX2(Real x, RegionSize rs) {$/;"	f
DefaultMeshGeneratorX3	mesh/mesh.hpp	/^inline Real DefaultMeshGeneratorX3(Real x, RegionSize rs) {$/;"	f
DeleteAthenaArray	athena_arrays.hpp	/^void AthenaArray<T>::DeleteAthenaArray() {$/;"	f	class:AthenaArray
Delta_dust_vphi	pgen/disk_RWI_2D.cpp	/^Real Delta_dust_vphi(const Real ts, const Real vk, const Real d_vgr, const Real d_vgphi) {$/;"	f	namespace:__anon102
Delta_dust_vphi	pgen/disk_dust_diffusion.cpp	/^Real Delta_dust_vphi(const Real ts, const Real vk, const Real d_vgr, const Real d_vgphi) {$/;"	f	namespace:__anon71
Delta_dust_vphi	pgen/disk_dust_drift.cpp	/^Real Delta_dust_vphi(const Real ts, const Real vk, const Real d_vgr, const Real d_vgphi) {$/;"	f	namespace:__anon65
Delta_dust_vphi	pgen/disk_streaming_cylindrical.cpp	/^Real Delta_dust_vphi(const Real ts, const Real vk, const Real d_vgr, const Real d_vgphi) {$/;"	f	namespace:__anon55
Delta_dust_vphi	pgen/disk_streaming_spherical.cpp	/^Real Delta_dust_vphi(const Real ts, const Real vk, const Real d_vgr, const Real d_vgphi) {$/;"	f	namespace:__anon76
Delta_dust_vr	pgen/disk_RWI_2D.cpp	/^Real Delta_dust_vr(const Real ts, const Real vk, const Real d_vgr, const Real d_vgphi) {$/;"	f	namespace:__anon102
Delta_dust_vr	pgen/disk_dust_diffusion.cpp	/^Real Delta_dust_vr(const Real ts, const Real vk, const Real d_vgr, const Real d_vgphi) {$/;"	f	namespace:__anon71
Delta_dust_vr	pgen/disk_dust_drift.cpp	/^Real Delta_dust_vr(const Real ts, const Real vk, const Real d_vgr, const Real d_vgphi) {$/;"	f	namespace:__anon65
Delta_dust_vr	pgen/disk_streaming_cylindrical.cpp	/^Real Delta_dust_vr(const Real ts, const Real vk, const Real d_vgr, const Real d_vgphi) {$/;"	f	namespace:__anon55
Delta_dust_vr	pgen/disk_streaming_spherical.cpp	/^Real Delta_dust_vr(const Real ts, const Real vk, const Real d_vgr, const Real d_vgphi) {$/;"	f	namespace:__anon76
Delta_gas_vphi	pgen/disk_RWI_2D.cpp	/^Real Delta_gas_vphi(const Real vk, const Real SN, const Real QN, const Real Psi) {$/;"	f	namespace:__anon102
Delta_gas_vphi	pgen/disk_dust_diffusion.cpp	/^Real Delta_gas_vphi(const Real vk, const Real SN, const Real QN, const Real Psi) {$/;"	f	namespace:__anon71
Delta_gas_vphi	pgen/disk_dust_drift.cpp	/^Real Delta_gas_vphi(const Real vk, const Real SN, const Real QN, const Real Psi) {$/;"	f	namespace:__anon65
Delta_gas_vphi	pgen/disk_streaming_cylindrical.cpp	/^Real Delta_gas_vphi(const Real vk, const Real SN, const Real QN, const Real Psi) {$/;"	f	namespace:__anon55
Delta_gas_vphi	pgen/disk_streaming_spherical.cpp	/^Real Delta_gas_vphi(const Real vk, const Real SN, const Real QN, const Real Psi) {$/;"	f	namespace:__anon76
Delta_gas_vr	pgen/disk_RWI_2D.cpp	/^Real Delta_gas_vr(const Real vk, const Real SN, const Real QN, const Real Psi) {$/;"	f	namespace:__anon102
Delta_gas_vr	pgen/disk_dust_diffusion.cpp	/^Real Delta_gas_vr(const Real vk, const Real SN, const Real QN, const Real Psi) {$/;"	f	namespace:__anon71
Delta_gas_vr	pgen/disk_dust_drift.cpp	/^Real Delta_gas_vr(const Real vk, const Real SN, const Real QN, const Real Psi) {$/;"	f	namespace:__anon65
Delta_gas_vr	pgen/disk_streaming_cylindrical.cpp	/^Real Delta_gas_vr(const Real vk, const Real SN, const Real QN, const Real Psi) {$/;"	f	namespace:__anon55
Delta_gas_vr	pgen/disk_streaming_spherical.cpp	/^Real Delta_gas_vr(const Real vk, const Real SN, const Real QN, const Real Psi) {$/;"	f	namespace:__anon76
DenProfileCyl	pgen/disk.cpp	/^Real DenProfileCyl(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon37
DenProfileCyl	pgen/disk_dust_drift.cpp	/^Real DenProfileCyl(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon65
DenProfileCyl_Dust	pgen/disk_streaming_cylindrical.cpp	/^Real DenProfileCyl_Dust(const Real rad, const Real phi, const Real z, const Real den_ratio, const Real H_ratio) {$/;"	f	namespace:__anon55
DenProfileCyl_Dust	pgen/disk_streaming_spherical.cpp	/^Real DenProfileCyl_Dust(const Real rad, const Real phi, const Real z, const Real den_ratio, const Real H_ratio) {$/;"	f	namespace:__anon76
DenProfileCyl_Gas	pgen/disk_streaming_cylindrical.cpp	/^Real DenProfileCyl_Gas(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon55
DenProfileCyl_Gas	pgen/disk_streaming_spherical.cpp	/^Real DenProfileCyl_Gas(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon76
DenProfileCyl_dust	pgen/disk_RWI_2D.cpp	/^Real DenProfileCyl_dust(const Real rad, const Real phi, const Real z, const Real den_ratio, const Real H_ratio) {$/;"	f	namespace:__anon102
DenProfileCyl_dust	pgen/disk_VSI.cpp	/^Real DenProfileCyl_dust(const Real rad, const Real phi, const Real z, const Real den_ratio, const Real H_ratio) {$/;"	f	namespace:__anon134
DenProfileCyl_dust	pgen/disk_dust_diffusion.cpp	/^Real DenProfileCyl_dust(const Real rad, const Real phi, const Real z, const Real den_ratio, const Real H_ratio) {$/;"	f	namespace:__anon71
DenProfileCyl_dust	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real DenProfileCyl_dust(const Real rad, const Real phi, const Real z, const Real den_ratio, const Real H_ratio) {$/;"	f	namespace:__anon69
DenProfileCyl_dust	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real DenProfileCyl_dust(const Real rad, const Real phi, const Real z, const Real den_ratio, const Real H_ratio) {$/;"	f	namespace:__anon110
DenProfileCyl_dust	pgen/disk_planet_dust_cylindrical.cpp	/^Real DenProfileCyl_dust(const Real rad, const Real phi, const Real z, const Real den_ratio, const Real H_ratio) {$/;"	f	namespace:__anon100
DenProfileCyl_dust	pgen/disk_planet_dust_spherical.cpp	/^Real DenProfileCyl_dust(const Real rad, const Real phi, const Real z, const Real den_ratio, const Real H_ratio) {$/;"	f	namespace:__anon114
DenProfileCyl_dust	pgen/dust_diffusion.cpp	/^Real DenProfileCyl_dust(const Real rad, const Real phi, const Real z, const Real den_ratio, const Real H_ratio) {$/;"	f	namespace:__anon118
DenProfileCyl_gas	pgen/disk_RWI_2D.cpp	/^Real DenProfileCyl_gas(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon102
DenProfileCyl_gas	pgen/disk_VSI.cpp	/^Real DenProfileCyl_gas(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon134
DenProfileCyl_gas	pgen/disk_dust_diffusion.cpp	/^Real DenProfileCyl_gas(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon71
DenProfileCyl_gas	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real DenProfileCyl_gas(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon69
DenProfileCyl_gas	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real DenProfileCyl_gas(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon110
DenProfileCyl_gas	pgen/disk_planet_dust_cylindrical.cpp	/^Real DenProfileCyl_gas(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon100
DenProfileCyl_gas	pgen/disk_planet_dust_spherical.cpp	/^Real DenProfileCyl_gas(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon114
DenProfileCyl_gas	pgen/dust_diffusion.cpp	/^Real DenProfileCyl_gas(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon118
DensityFloor	pgen/disk_VSI.cpp	/^void DensityFloor(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon134
Density_interpolate	pgen/disk_dust_drift.cpp	/^void Density_interpolate(const Real r_active, const Real r_ghost, const Real rho_active,$/;"	f	namespace:__anon65
Density_interpolate	pgen/disk_streaming_cylindrical.cpp	/^void Density_interpolate(const Real r_active, const Real r_ghost, const Real rho_active,$/;"	f	namespace:__anon55
Density_interpolate	pgen/disk_streaming_spherical.cpp	/^void Density_interpolate(const Real r_active, const Real r_ghost, const Real rho_active,$/;"	f	namespace:__anon76
Derefine	mesh/meshblock_tree.cpp	/^void MeshBlockTree::Derefine(int &ndel) {$/;"	f	class:MeshBlockTree
DerivMotionRK4	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^void DerivMotionRK4(Real *q_init, Real *gmasses, Real *deriv, int n, Real dt, bool *feelothers) {$/;"	f
DerivMotionRK4	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^void DerivMotionRK4(Real *q_init, Real *gmasses, Real *deriv, int n, Real dt, bool *feelothers) {$/;"	f
DestroyBoundaryData	bvals/bvals_var.cpp	/^void BoundaryVariable::DestroyBoundaryData(BoundaryData<> &bd) {$/;"	f	class:BoundaryVariable
DestroyBoundaryData	bvals/cc/mg/bvals_mg.cpp	/^void MGBoundaryValues::DestroyBoundaryData() {$/;"	f	class:MGBoundaryValues
DestroyBoundaryData	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::DestroyBoundaryData(OrbitalBoundaryData &bd) {$/;"	f	class:OrbitalBoundaryCommunication
DestroyPlan	fft/athena_fft.cpp	/^void FFTBlock::DestroyPlan(AthenaFFTPlan *plan) {$/;"	f	class:FFTBlock
Determinant	coordinates/gr_user.cpp	/^Real Determinant(Real a11, Real a12, Real a13, Real a21, Real a22, Real a23,$/;"	f	namespace:__anon6
Determinant	coordinates/gr_user.cpp	/^Real Determinant(Real a11, Real a12, Real a21, Real a22) {$/;"	f	namespace:__anon6
Determinant	coordinates/gr_user.cpp	/^Real Determinant(const AthenaArray<Real> &g) {$/;"	f	namespace:__anon6
DiffProcess	field/field_diffusion/field_diffusion.hpp	/^  enum DiffProcess {ohmic=0, hall=1, ambipolar=2};$/;"	g	class:FieldDiffusion
DiffProcess	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  enum DiffProcess {iso=0, aniso=1, alpha=2};$/;"	g	class:HydroDiffusion
DiffuseDustFluids	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::DiffuseDustFluids(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
DiffuseField	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::DiffuseField(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
DiffuseHydro	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::DiffuseHydro(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
DiffuseScalars	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::DiffuseScalars(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
Diffusion_Flag	dustfluids/dustfluids_diffusion/dustfluids_diffusion.hpp	/^  bool Diffusion_Flag;               \/\/ true or false, the flag of inviscid dust fluids$/;"	m	class:DustFluidsDiffusion
Diffusion_Flag	pgen/dmr_dust.cpp	/^bool Diffusion_Flag;$/;"	m	namespace:__anon148	file:
DiffusiveFluxIso	scalars/scalar_diffusion.cpp	/^void PassiveScalars::DiffusiveFluxIso(const AthenaArray<Real> &prim_r,$/;"	f	class:PassiveScalars
DiffusivityNonidealMHD	pgen/disk_3d_mhd_dust.cpp	/^void DiffusivityNonidealMHD(FieldDiffusion *pfdif, MeshBlock *pmb,$/;"	f	namespace:__anon61
DiskInnerX1	pgen/disk.cpp	/^void DiskInnerX1(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f
DiskInnerX1	pgen/disk_3d_mhd_dust.cpp	/^void DiskInnerX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f
DiskInnerX1	pgen/disk_RWI_2D.cpp	/^void DiskInnerX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskInnerX1	pgen/disk_VSI.cpp	/^void DiskInnerX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskInnerX1	pgen/disk_dust_diffusion.cpp	/^void DiskInnerX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskInnerX1	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^void DiskInnerX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskInnerX1	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^void DiskInnerX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskInnerX1	pgen/disk_planet_dust_cylindrical.cpp	/^void DiskInnerX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskInnerX1	pgen/disk_planet_dust_spherical.cpp	/^void DiskInnerX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskInnerX1	pgen/dust_diffusion.cpp	/^void DiskInnerX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskInnerX1	pgen/inject_pebble_3D.cpp	/^void DiskInnerX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskInnerX2	pgen/disk.cpp	/^void DiskInnerX2(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f
DiskInnerX2	pgen/disk_3d_mhd_dust.cpp	/^void DiskInnerX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f
DiskInnerX2	pgen/disk_VSI.cpp	/^void DiskInnerX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskInnerX2	pgen/disk_dust_diffusion.cpp	/^void DiskInnerX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskInnerX2	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^void DiskInnerX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskInnerX2	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^void DiskInnerX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskInnerX2	pgen/disk_planet_dust_cylindrical.cpp	/^void DiskInnerX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskInnerX2	pgen/disk_planet_dust_spherical.cpp	/^void DiskInnerX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskInnerX2	pgen/inject_pebble_3D.cpp	/^void DiskInnerX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f
DiskInnerX3	pgen/disk.cpp	/^void DiskInnerX3(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f
DiskInnerX3	pgen/disk_dust_diffusion.cpp	/^void DiskInnerX3(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskOuterX1	pgen/disk.cpp	/^void DiskOuterX1(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f
DiskOuterX1	pgen/disk_3d_mhd_dust.cpp	/^void DiskOuterX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f
DiskOuterX1	pgen/disk_RWI_2D.cpp	/^void DiskOuterX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskOuterX1	pgen/disk_VSI.cpp	/^void DiskOuterX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskOuterX1	pgen/disk_dust_diffusion.cpp	/^void DiskOuterX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskOuterX1	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^void DiskOuterX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskOuterX1	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^void DiskOuterX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskOuterX1	pgen/disk_planet_dust_cylindrical.cpp	/^void DiskOuterX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskOuterX1	pgen/disk_planet_dust_spherical.cpp	/^void DiskOuterX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskOuterX1	pgen/dust_diffusion.cpp	/^void DiskOuterX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskOuterX1	pgen/inject_pebble_3D.cpp	/^void DiskOuterX1(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df, FaceField &b,$/;"	f
DiskOuterX2	pgen/disk.cpp	/^void DiskOuterX2(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f
DiskOuterX2	pgen/disk_3d_mhd_dust.cpp	/^void DiskOuterX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f
DiskOuterX2	pgen/disk_VSI.cpp	/^void DiskOuterX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskOuterX2	pgen/disk_dust_diffusion.cpp	/^void DiskOuterX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskOuterX2	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^void DiskOuterX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskOuterX2	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^void DiskOuterX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskOuterX2	pgen/disk_planet_dust_cylindrical.cpp	/^void DiskOuterX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskOuterX2	pgen/disk_planet_dust_spherical.cpp	/^void DiskOuterX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskOuterX2	pgen/inject_pebble_3D.cpp	/^void DiskOuterX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DiskOuterX3	pgen/disk.cpp	/^void DiskOuterX3(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f
DiskOuterX3	pgen/disk_dust_diffusion.cpp	/^void DiskOuterX3(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
DispatchBoundaryFunctions	bvals/bvals.cpp	/^void BoundaryValues::DispatchBoundaryFunctions($/;"	f	class:BoundaryValues
Dissipation_Flag	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  bool Dissipation_Flag;   \/\/ true or false, the flag of energy dissipation term$/;"	m	class:DustGasDrag
Dist	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^static Real q0[60], q1[60], Dist[60], k1[60], k2[60], k3[60], k4[60];\/\/RK4 parameters$/;"	m	namespace:__anon68	file:
Dist	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^static Real q0[60], q1[60], Dist[60], k1[60], k2[60], k3[60], k4[60];\/\/RK4 parameters$/;"	m	namespace:__anon109	file:
DistanceBetweenPoints	pgen/gr_blast.cpp	/^Real DistanceBetweenPoints(Real x1, Real x2, Real x3, Real y1, Real y2, Real y3) {$/;"	f	namespace:__anon79
DivVelocity	hydro/hydro_diffusion/viscosity.cpp	/^void HydroDiffusion::DivVelocity(const AthenaArray<Real> &prim,$/;"	f	class:HydroDiffusion
DoAllAvailableTasks	task_list/mg_task_list.cpp	/^TaskListStatus MultigridTaskList::DoAllAvailableTasks(Multigrid *pmg, TaskStates &ts) {$/;"	f	class:MultigridTaskList
DoAllAvailableTasks	task_list/task_list.cpp	/^TaskListStatus TaskList::DoAllAvailableTasks(MeshBlock *pmb, int stage, TaskStates &ts) {$/;"	f	class:TaskList
DoOutput	pgen/disk_VSI.cpp	/^void DoOutput(MeshBlock *pmb, int dlevel) {$/;"	f
DoTaskListOneStage	task_list/mg_task_list.cpp	/^void MultigridTaskList::DoTaskListOneStage(MultigridDriver *pmd) {$/;"	f	class:MultigridTaskList
DoTaskListOneStage	task_list/task_list.cpp	/^void TaskList::DoTaskListOneStage(Mesh *pmesh, int stage) {$/;"	f	class:TaskList
DoesParameterExist	parameter_input.cpp	/^int ParameterInput::DoesParameterExist(std::string block, std::string name) {$/;"	f	class:ParameterInput
DonorCellX1	reconstruct/dc.cpp	/^void Reconstruction::DonorCellX1(const int k, const int j, const int il, const int iu,$/;"	f	class:Reconstruction
DonorCellX1	reconstruct/dc_simple.cpp	/^void Reconstruction::DonorCellX1(const int k, const int j, const int il, const int iu,$/;"	f	class:Reconstruction
DonorCellX1_DustFluids	reconstruct/dc_dustfluids.cpp	/^void Reconstruction::DonorCellX1_DustFluids(const int k, const int j, const int il, const int iu,$/;"	f	class:Reconstruction
DonorCellX2	reconstruct/dc.cpp	/^void Reconstruction::DonorCellX2(const int k, const int j, const int il, const int iu,$/;"	f	class:Reconstruction
DonorCellX2	reconstruct/dc_simple.cpp	/^void Reconstruction::DonorCellX2(const int k, const int j, const int il, const int iu,$/;"	f	class:Reconstruction
DonorCellX2_DustFluids	reconstruct/dc_dustfluids.cpp	/^void Reconstruction::DonorCellX2_DustFluids(const int k, const int j, const int il, const int iu,$/;"	f	class:Reconstruction
DonorCellX3	reconstruct/dc.cpp	/^void Reconstruction::DonorCellX3(const int k, const int j, const int il, const int iu,$/;"	f	class:Reconstruction
DonorCellX3	reconstruct/dc_simple.cpp	/^void Reconstruction::DonorCellX3(const int k, const int j, const int il, const int iu,$/;"	f	class:Reconstruction
DonorCellX3_DustFluids	reconstruct/dc_dustfluids.cpp	/^void Reconstruction::DonorCellX3_DustFluids(const int k, const int j, const int il, const int iu,$/;"	f	class:Reconstruction
DoolittleLUPDecompose	reconstruct/reconstruction.cpp	/^int DoolittleLUPDecompose(Real **a, int n, int *pivot) {$/;"	f	namespace:__anon8
DoolittleLUPSolve	reconstruct/reconstruction.cpp	/^void DoolittleLUPSolve(Real **lu, int *pivot, Real *b, int n, Real *x) {$/;"	f	namespace:__anon8
DragIntegrate	dustfluids/dustfluids_drags/dust_gas_drag.cpp	/^void DustGasDrag::DragIntegrate(const int stage, const Real dt,$/;"	f	class:DustGasDrag
Driving	fft/turbulence.cpp	/^void TurbulenceDriver::Driving() {$/;"	f	class:TurbulenceDriver
DustDiffusionBoundaryQuantity	athena.hpp	/^enum class DustDiffusionBoundaryQuantity {cons_diff};$/;"	c
DustDiffusionBoundaryVariable	bvals/cc/dustdiffusion/bvals_dustdiffusion.cpp	/^DustDiffusionBoundaryVariable::DustDiffusionBoundaryVariable($/;"	f	class:DustDiffusionBoundaryVariable
DustDiffusionBoundaryVariable	bvals/cc/dustdiffusion/bvals_dustdiffusion.hpp	/^class DustDiffusionBoundaryVariable : public CellCenteredBoundaryVariable {$/;"	c
DustDiffusivity_	mesh/mesh.hpp	/^  DustDiffusionCoeffFunc DustDiffusivity_;$/;"	m	class:Mesh
DustDrift_Flag	pgen/ssheet_RWI_dust.cpp	/^bool DustDrift_Flag, Damping_Flag;$/;"	m	namespace:__anon90	file:
DustDrift_Flag	pgen/ssheet_planet_dust.cpp	/^bool DustDrift_Flag, Damping_Flag;$/;"	m	namespace:__anon111	file:
DustFeedback_Flag	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  bool DustFeedback_Flag;  \/\/ true or false, the flag of dust feedback term$/;"	m	class:DustGasDrag
DustFluids	dustfluids/dustfluids.cpp	/^DustFluids::DustFluids(MeshBlock *pmb, ParameterInput *pin)  :$/;"	f	class:DustFluids
DustFluids	dustfluids/dustfluids.hpp	/^class DustFluids {$/;"	c
DustFluidsBoundaryQuantity	athena.hpp	/^enum class DustFluidsBoundaryQuantity {cons_df, prim_df};$/;"	c
DustFluidsBoundaryVariable	bvals/cc/dustfluids/bvals_dustfluids.cpp	/^DustFluidsBoundaryVariable::DustFluidsBoundaryVariable($/;"	f	class:DustFluidsBoundaryVariable
DustFluidsBoundaryVariable	bvals/cc/dustfluids/bvals_dustfluids.hpp	/^class DustFluidsBoundaryVariable : public CellCenteredBoundaryVariable {$/;"	c
DustFluidsCellCenterDiffusion	dustfluids/dustfluids_diffusion_cc/cell_center_diffusions.cpp	/^DustFluidsCellCenterDiffusion::DustFluidsCellCenterDiffusion(MeshBlock *pmb,$/;"	f	class:DustFluidsCellCenterDiffusion
DustFluidsCellCenterDiffusion	dustfluids/dustfluids_diffusion_cc/cell_center_diffusions.hpp	/^class DustFluidsCellCenterDiffusion {$/;"	c
DustFluidsConcentrationDiffusiveFlux	dustfluids/dustfluids_diffusion/concentration_diffusion.cpp	/^void DustFluidsDiffusion::DustFluidsConcentrationDiffusiveFlux(const AthenaArray<Real> &prim_df,$/;"	f	class:DustFluidsDiffusion
DustFluidsConservedToPrimitive	eos/eos_dustfluids.cpp	/^void EquationOfState::DustFluidsConservedToPrimitive($/;"	f	class:EquationOfState
DustFluidsConservedToPrimitiveCellAverage	eos/eos_dustfluids.cpp	/^void EquationOfState::DustFluidsConservedToPrimitiveCellAverage($/;"	f	class:EquationOfState
DustFluidsDiffusion	dustfluids/dustfluids_diffusion/dustfluids_diffusion.cpp	/^DustFluidsDiffusion::DustFluidsDiffusion(DustFluids *pdf, ParameterInput *pin) :$/;"	f	class:DustFluidsDiffusion
DustFluidsDiffusion	dustfluids/dustfluids_diffusion/dustfluids_diffusion.hpp	/^class DustFluidsDiffusion {$/;"	c
DustFluidsDyeEntropy	pgen/dusty_kh.cpp	/^Real DustFluidsDyeEntropy(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon130
DustFluidsDyeEntropy	pgen/kh_dust.cpp	/^Real DustFluidsDyeEntropy(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon108
DustFluidsGasStd	pgen/dust_NSH.cpp	/^Real DustFluidsGasStd(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon104
DustFluidsGasStd	pgen/streaming_nonlinear.cpp	/^Real DustFluidsGasStd(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon136
DustFluidsMomentumDiffusiveFlux	dustfluids/dustfluids_diffusion/momentum_diffusion.cpp	/^void DustFluidsDiffusion::DustFluidsMomentumDiffusiveFlux(const AthenaArray<Real> &prim_df,$/;"	f	class:DustFluidsDiffusion
DustFluidsPrimitiveToConserved	eos/eos_dustfluids.cpp	/^void EquationOfState::DustFluidsPrimitiveToConserved($/;"	f	class:EquationOfState
DustFluidsRatioMaximum	pgen/disk_VSI.cpp	/^Real DustFluidsRatioMaximum(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon134
DustFluidsRatioMaximum	pgen/dust_NSH.cpp	/^Real DustFluidsRatioMaximum(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon104
DustFluidsRatioMaximum	pgen/streaming_nonlinear.cpp	/^Real DustFluidsRatioMaximum(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon136
DustFluidsRatioStd	pgen/dust_NSH.cpp	/^Real DustFluidsRatioStd(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon104
DustFluidsRatioStd	pgen/streaming_nonlinear.cpp	/^Real DustFluidsRatioStd(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon136
DustFluidsSourceTerms	dustfluids/srcterms/dustfluids_srcterms.cpp	/^DustFluidsSourceTerms::DustFluidsSourceTerms(DustFluids *pdf, ParameterInput *pin) {$/;"	f	class:DustFluidsSourceTerms
DustFluidsSourceTerms	dustfluids/srcterms/dustfluids_srcterms.hpp	/^class DustFluidsSourceTerms {$/;"	c
DustGasDrag	dustfluids/dustfluids_drags/dust_gas_drag.cpp	/^DustGasDrag::DustGasDrag(DustFluids *pdf, ParameterInput *pin) :$/;"	f	class:DustGasDrag
DustGasDrag	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^class DustGasDrag {$/;"	c
DustGasDrag	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::DustGasDrag(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
DustVel1Maximum	pgen/streaming_nonlinear.cpp	/^Real DustVel1Maximum(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon136
DustVel2Maximum	pgen/streaming_nonlinear.cpp	/^Real DustVel2Maximum(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon136
DustVel3Maximum	pgen/streaming_nonlinear.cpp	/^Real DustVel3Maximum(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon136
DustVelProfileCyl	pgen/disk_dust_drift.cpp	/^void DustVelProfileCyl(const Real rad, const Real phi, const Real z,$/;"	f	namespace:__anon65
DustVelProfileCyl	pgen/dust_diffusion.cpp	/^void DustVelProfileCyl(const Real rad, const Real phi, const Real z,$/;"	f	namespace:__anon118
DustVelProfileCyl_NSH	pgen/disk_RWI_2D.cpp	/^void DustVelProfileCyl_NSH(const Real ts, const Real SN, const Real QN, const Real Psi,$/;"	f	namespace:__anon102
DustVelProfileCyl_NSH	pgen/disk_dust_diffusion.cpp	/^void DustVelProfileCyl_NSH(const Real ts, const Real SN, const Real QN, const Real Psi,$/;"	f	namespace:__anon71
DustVelProfileCyl_NSH	pgen/disk_dust_drift.cpp	/^void DustVelProfileCyl_NSH(const Real ts, const Real SN, const Real QN, const Real Psi,$/;"	f	namespace:__anon65
DustVelProfileCyl_NSH	pgen/disk_streaming_cylindrical.cpp	/^void DustVelProfileCyl_NSH(const Real ts, const Real SN, const Real QN, const Real Psi,$/;"	f	namespace:__anon55
DustVelProfileCyl_NSH	pgen/disk_streaming_spherical.cpp	/^void DustVelProfileCyl_NSH(const Real ts, const Real SN, const Real QN, const Real Psi,$/;"	f	namespace:__anon76
ENABLE_EXCEPTIONS	defs.hpp	/^#define ENABLE_EXCEPTIONS$/;"	d
EOS_EOS_HPP_	eos/eos.hpp	/^#define EOS_EOS_HPP_$/;"	d
EOS_TABLE_ENABLED	defs.hpp	/^#define EOS_TABLE_ENABLED /;"	d
EQUATION_OF_STATE	defs.hpp	/^#define EQUATION_OF_STATE /;"	d
EResidual	hydro/rsolvers/mhd/hlld_rel.cpp	/^Real EResidual(Real w_guess, Real dd, Real ee, Real m_sq, Real bb_sq, Real ss_sq,$/;"	f	namespace:__anon27
EResidualPrime	hydro/rsolvers/mhd/hlld_rel.cpp	/^Real EResidualPrime(Real w_guess, Real dd, Real m_sq, Real bb_sq, Real ss_sq,$/;"	f	namespace:__anon27
Edge1Length	coordinates/coordinates.cpp	/^void Coordinates::Edge1Length(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates
Edge1Length	coordinates/gr_user.cpp	/^void GRUser::Edge1Length(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser
Edge1Length	coordinates/kerr-schild.cpp	/^void KerrSchild::Edge1Length(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild
Edge1Length	coordinates/schwarzschild.cpp	/^void Schwarzschild::Edge1Length(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild
Edge2Length	coordinates/coordinates.cpp	/^void Coordinates::Edge2Length(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates
Edge2Length	coordinates/cylindrical.cpp	/^void Cylindrical::Edge2Length(const int k, const int j, const int il, const int iu,$/;"	f	class:Cylindrical
Edge2Length	coordinates/gr_user.cpp	/^void GRUser::Edge2Length(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser
Edge2Length	coordinates/kerr-schild.cpp	/^void KerrSchild::Edge2Length(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild
Edge2Length	coordinates/schwarzschild.cpp	/^void Schwarzschild::Edge2Length(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild
Edge2Length	coordinates/spherical_polar.cpp	/^void SphericalPolar::Edge2Length(const int k, const int j, const int il, const int iu,$/;"	f	class:SphericalPolar
Edge3Length	coordinates/coordinates.cpp	/^void Coordinates::Edge3Length(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates
Edge3Length	coordinates/gr_user.cpp	/^void GRUser::Edge3Length(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser
Edge3Length	coordinates/kerr-schild.cpp	/^void KerrSchild::Edge3Length(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild
Edge3Length	coordinates/schwarzschild.cpp	/^void Schwarzschild::Edge3Length(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild
Edge3Length	coordinates/spherical_polar.cpp	/^void SphericalPolar::Edge3Length(const int k, const int j, const int il, const int iu,$/;"	f	class:SphericalPolar
EdgeField	athena.hpp	/^  EdgeField(int ncells3, int ncells2, int ncells1,$/;"	f	struct:EdgeField
EdgeField	athena.hpp	/^struct EdgeField {$/;"	s
EgasFromRhoP	eos/general/eos_table.cpp	/^Real EquationOfState::EgasFromRhoP(Real rho, Real pres) {$/;"	f	class:EquationOfState
EgasFromRhoP	eos/general/hydrogen.cpp	/^Real EquationOfState::EgasFromRhoP(Real rho, Real pres) {$/;"	f	class:EquationOfState
EgasFromRhoP	eos/general/ideal.cpp	/^Real EquationOfState::EgasFromRhoP(Real rho, Real pres) {$/;"	f	class:EquationOfState
EgasFromRhoP	eos/general/noop.cpp	/^Real EquationOfState::EgasFromRhoP(Real rho, Real pres) {$/;"	f	class:EquationOfState
Eigensystem	pgen/dusty_wave.cpp	/^void Eigensystem(const Real d, const Real v1, const Real v2, const Real v3,$/;"	f	namespace:__anon87
Eigensystem	pgen/linear_wave.cpp	/^void Eigensystem(const Real d, const Real v1, const Real v2, const Real v3,$/;"	f	namespace:__anon126
ElectricIndex	athena.hpp	/^enum ElectricIndex {X1E2=0, X1E3=1, X2E3=0, X2E1=1, X3E1=0, X3E2=1};$/;"	g
EnrollConductionCoefficient	mesh/mesh.cpp	/^void Mesh::EnrollConductionCoefficient(ConductionCoeffFunc my_func) {$/;"	f	class:Mesh
EnrollDustDiffusivity	mesh/mesh.cpp	/^void Mesh::EnrollDustDiffusivity(DustDiffusionCoeffFunc my_func) {$/;"	f	class:Mesh
EnrollFieldDiffusivity	mesh/mesh.cpp	/^void Mesh::EnrollFieldDiffusivity(FieldDiffusionCoeffFunc my_func) {$/;"	f	class:Mesh
EnrollOrbitalVelocity	mesh/mesh.cpp	/^void Mesh::EnrollOrbitalVelocity(OrbitalVelocityFunc my_func) {$/;"	f	class:Mesh
EnrollOrbitalVelocityDerivative	mesh/mesh.cpp	/^void Mesh::EnrollOrbitalVelocityDerivative(int i, OrbitalVelocityFunc my_func) {$/;"	f	class:Mesh
EnrollUserBoundaryFunction	mesh/mesh.cpp	/^void Mesh::EnrollUserBoundaryFunction(BoundaryFace dir, BValFunc my_bc) {$/;"	f	class:Mesh
EnrollUserBoundaryFunction	mesh/mesh.cpp	/^void Mesh::EnrollUserBoundaryFunction(int dir, BValFunc my_bc) {$/;"	f	class:Mesh
EnrollUserDustStoppingTime	mesh/mesh.cpp	/^void Mesh::EnrollUserDustStoppingTime(DustStoppingTimeFunc my_func) {$/;"	f	class:Mesh
EnrollUserExplicitSourceFunction	mesh/mesh.cpp	/^void Mesh::EnrollUserExplicitSourceFunction(SrcTermFunc my_func) {$/;"	f	class:Mesh
EnrollUserHistoryOutput	mesh/mesh.cpp	/^void Mesh::EnrollUserHistoryOutput(int i, HistoryOutputFunc my_func, const char *name,$/;"	f	class:Mesh
EnrollUserMGGravityBoundaryFunction	mesh/mesh.cpp	/^void Mesh::EnrollUserMGGravityBoundaryFunction(BoundaryFace dir, MGBoundaryFunc my_bc) {$/;"	f	class:Mesh
EnrollUserMGGravityBoundaryFunction	mesh/mesh.cpp	/^void Mesh::EnrollUserMGGravityBoundaryFunction(int dir, MGBoundaryFunc my_bc) {$/;"	f	class:Mesh
EnrollUserMeshGenerator	mesh/mesh.cpp	/^void Mesh::EnrollUserMeshGenerator(CoordinateDirection dir, MeshGenFunc my_mg) {$/;"	f	class:Mesh
EnrollUserMetric	mesh/mesh.cpp	/^void Mesh::EnrollUserMetric(MetricFunc my_func) {$/;"	f	class:Mesh
EnrollUserRefinementCondition	mesh/mesh.cpp	/^void Mesh::EnrollUserRefinementCondition(AMRFlagFunc amrflag) {$/;"	f	class:Mesh
EnrollUserTimeStepFunction	mesh/mesh.cpp	/^void Mesh::EnrollUserTimeStepFunction(TimeStepFunc my_func) {$/;"	f	class:Mesh
EnrollViscosityCoefficient	mesh/mesh.cpp	/^void Mesh::EnrollViscosityCoefficient(ViscosityCoeffFunc my_func) {$/;"	f	class:Mesh
EosRatios	utils/interp_table.hpp	/^  AthenaArray<Real> EosRatios;$/;"	m	class:EosTable
EosTable	utils/eos_table_class.cpp	/^EosTable::EosTable(ParameterInput *pin) :$/;"	f	class:EosTable
EosTable	utils/interp_table.hpp	/^class EosTable {$/;"	c
EquationOfState	eos/adiabatic_hydro.cpp	/^EquationOfState::EquationOfState(MeshBlock *pmb, ParameterInput *pin) :$/;"	f	class:EquationOfState
EquationOfState	eos/adiabatic_hydro_gr.cpp	/^EquationOfState::EquationOfState(MeshBlock *pmb, ParameterInput *pin) :$/;"	f	class:EquationOfState
EquationOfState	eos/adiabatic_hydro_sr.cpp	/^EquationOfState::EquationOfState(MeshBlock *pmb, ParameterInput *pin) :$/;"	f	class:EquationOfState
EquationOfState	eos/adiabatic_mhd.cpp	/^EquationOfState::EquationOfState(MeshBlock *pmb, ParameterInput *pin) :$/;"	f	class:EquationOfState
EquationOfState	eos/adiabatic_mhd_gr.cpp	/^EquationOfState::EquationOfState(MeshBlock *pmb, ParameterInput *pin) :$/;"	f	class:EquationOfState
EquationOfState	eos/adiabatic_mhd_sr.cpp	/^EquationOfState::EquationOfState(MeshBlock *pmb, ParameterInput *pin) :$/;"	f	class:EquationOfState
EquationOfState	eos/eos.hpp	/^class EquationOfState {$/;"	c
EquationOfState	eos/general/general_hydro.cpp	/^EquationOfState::EquationOfState(MeshBlock *pmb, ParameterInput *pin) :$/;"	f	class:EquationOfState
EquationOfState	eos/general/general_mhd.cpp	/^EquationOfState::EquationOfState(MeshBlock *pmb, ParameterInput *pin) :$/;"	f	class:EquationOfState
EquationOfState	eos/isothermal_hydro.cpp	/^EquationOfState::EquationOfState(MeshBlock *pmb, ParameterInput *pin) :$/;"	f	class:EquationOfState
EquationOfState	eos/isothermal_mhd.cpp	/^EquationOfState::EquationOfState(MeshBlock *pmb, ParameterInput *pin) :$/;"	f	class:EquationOfState
ExchangeAthenaArray	athena_arrays.hpp	/^void AthenaArray<T>::ExchangeAthenaArray(AthenaArray<T>& array2) {$/;"	f	class:AthenaArray
Execute	fft/athena_fft.cpp	/^void FFTBlock::Execute(AthenaFFTPlan *plan) {$/;"	f	class:FFTBlock
Execute	fft/athena_fft.cpp	/^void FFTBlock::Execute(AthenaFFTPlan *plan, std::complex<Real> *data) {$/;"	f	class:FFTBlock
Execute	fft/athena_fft.cpp	/^void FFTBlock::Execute(AthenaFFTPlan *plan, std::complex<Real> *in_data,$/;"	f	class:FFTBlock
ExecuteBackward	fft/athena_fft.hpp	/^  void ExecuteBackward() {Execute(bplan_);}$/;"	f	class:FFTBlock::AthenaFFTDirection
ExecuteForward	fft/athena_fft.hpp	/^  void ExecuteForward() {Execute(fplan_);}$/;"	f	class:FFTBlock::AthenaFFTDirection
ExplicitFeedback	dustfluids/dustfluids_drags/explicit_integrator.cpp	/^void DustGasDrag::ExplicitFeedback(const int stage,$/;"	f	class:DustGasDrag
ExplicitNoFeedback	dustfluids/dustfluids_drags/explicit_integrator.cpp	/^void DustGasDrag::ExplicitNoFeedback(const int stage,$/;"	f	class:DustGasDrag
FACE_UNDEF	bvals/bvals_interfaces.hpp	/^enum {FACE_UNDEF = -1, INNER_X1, OUTER_X1, INNER_X2, OUTER_X2, INNER_X3, OUTER_X3};$/;"	e	enum:__anon3
FACE_UNDEF	bvals/bvals_interfaces.hpp	/^enum {FACE_UNDEF __attribute__((deprecated)) = -1,$/;"	e	enum:__anon1
FFTBlock	fft/athena_fft.cpp	/^FFTBlock::FFTBlock(FFTDriver *pfd, LogicalLocation iloc, int igid,$/;"	f	class:FFTBlock
FFTBlock	fft/athena_fft.hpp	/^class FFTBlock {$/;"	c
FFTDriver	fft/athena_fft.hpp	/^class FFTDriver {$/;"	c	class:FFTBlock
FFTDriver	fft/fft_driver.cpp	/^FFTDriver::FFTDriver(Mesh *pm, ParameterInput *pin) : nranks_(Globals::nranks),$/;"	f	class:FFTDriver
FFTGravity	gravity/fft_gravity.hpp	/^  FFTGravity(FFTDriver *pfd, LogicalLocation iloc, int igid,$/;"	f	class:FFTGravity
FFTGravity	gravity/fft_gravity.hpp	/^class FFTGravity : public FFTBlock {$/;"	c
FFTGravityDriver	gravity/fft_gravity.cpp	/^FFTGravityDriver::FFTGravityDriver(Mesh *pm, ParameterInput *pin)$/;"	f	class:FFTGravityDriver
FFTGravityDriver	gravity/fft_gravity.hpp	/^class FFTGravityDriver : public FFTDriver{$/;"	c
FFTGravitySolverTaskList	task_list/fft_grav_task_list.cpp	/^FFTGravitySolverTaskList::FFTGravitySolverTaskList(ParameterInput *pin, Mesh *pm) {$/;"	f	class:FFTGravitySolverTaskList
FFTGravitySolverTaskList	task_list/fft_grav_task_list.hpp	/^class FFTGravitySolverTaskList : public TaskList {$/;"	c
FFTGravitySolverTaskNames	task_list/fft_grav_task_list.hpp	/^namespace FFTGravitySolverTaskNames {$/;"	n
FFT_ATHENA_FFT_HPP_	fft/athena_fft.hpp	/^#define FFT_ATHENA_FFT_HPP_$/;"	d
FFT_DATA	fft/plimpton/fft_2d.h	/^typedef fftw_complex FFT_DATA;$/;"	t
FFT_DATA	fft/plimpton/fft_3d.h	/^typedef fftw_complex FFT_DATA;$/;"	t
FFT_PRECISION	fft/plimpton/fft_2d.h	/^#define FFT_PRECISION /;"	d
FFT_PRECISION	fft/plimpton/fft_3d.h	/^#define FFT_PRECISION /;"	d
FFT_TURBULENCE_HPP_	fft/turbulence.hpp	/^#define FFT_TURBULENCE_HPP_$/;"	d
FIELD_FIELD_DIFFUSION_FIELD_DIFFUSION_HPP_	field/field_diffusion/field_diffusion.hpp	/^#define FIELD_FIELD_DIFFUSION_FIELD_DIFFUSION_HPP_$/;"	d
FIELD_FIELD_HPP_	field/field.hpp	/^#define FIELD_FIELD_HPP_$/;"	d
FMGProlongate	multigrid/multigrid.cpp	/^void Multigrid::FMGProlongate(AthenaArray<Real> &dst, const AthenaArray<Real> &src,$/;"	f	class:Multigrid
FMGProlongate	multigrid/multigrid_driver.cpp	/^void MultigridDriver::FMGProlongate() {$/;"	f	class:MultigridDriver
FMGProlongate	task_list/mg_task_list.cpp	/^TaskStatus MultigridTaskList::FMGProlongate(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
FMGProlongateBlock	multigrid/multigrid.cpp	/^void Multigrid::FMGProlongateBlock() {$/;"	f	class:Multigrid
FMGProlongateOctets	multigrid/multigrid_driver.cpp	/^void MultigridDriver::FMGProlongateOctets() {$/;"	f	class:MultigridDriver
FOUR_3RD	defs.hpp	/^#define FOUR_3RD /;"	d
FRAME_TRANSFORMATIONS	defs.hpp	/^#define FRAME_TRANSFORMATIONS /;"	d
Face1Area	coordinates/coordinates.cpp	/^void Coordinates::Face1Area(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates
Face1Area	coordinates/cylindrical.cpp	/^void Cylindrical::Face1Area(const int k, const int j, const int il, const int iu,$/;"	f	class:Cylindrical
Face1Area	coordinates/gr_user.cpp	/^void GRUser::Face1Area(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser
Face1Area	coordinates/kerr-schild.cpp	/^void KerrSchild::Face1Area(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild
Face1Area	coordinates/schwarzschild.cpp	/^void Schwarzschild::Face1Area(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild
Face1Area	coordinates/spherical_polar.cpp	/^void SphericalPolar::Face1Area(const int k, const int j, const int il, const int iu,$/;"	f	class:SphericalPolar
Face1Metric	coordinates/coordinates.hpp	/^  virtual void Face1Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates
Face1Metric	coordinates/gr_user.cpp	/^void GRUser::Face1Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser
Face1Metric	coordinates/kerr-schild.cpp	/^void KerrSchild::Face1Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild
Face1Metric	coordinates/minkowski.cpp	/^void Minkowski::Face1Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:Minkowski
Face1Metric	coordinates/schwarzschild.cpp	/^void Schwarzschild::Face1Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild
Face2Area	coordinates/coordinates.cpp	/^void Coordinates::Face2Area(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates
Face2Area	coordinates/gr_user.cpp	/^void GRUser::Face2Area(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser
Face2Area	coordinates/kerr-schild.cpp	/^void KerrSchild::Face2Area(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild
Face2Area	coordinates/schwarzschild.cpp	/^void Schwarzschild::Face2Area(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild
Face2Area	coordinates/spherical_polar.cpp	/^void SphericalPolar::Face2Area(const int k, const int j, const int il, const int iu,$/;"	f	class:SphericalPolar
Face2Metric	coordinates/coordinates.hpp	/^  virtual void Face2Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates
Face2Metric	coordinates/gr_user.cpp	/^void GRUser::Face2Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser
Face2Metric	coordinates/kerr-schild.cpp	/^void KerrSchild::Face2Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild
Face2Metric	coordinates/minkowski.cpp	/^void Minkowski::Face2Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:Minkowski
Face2Metric	coordinates/schwarzschild.cpp	/^void Schwarzschild::Face2Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild
Face3Area	coordinates/coordinates.cpp	/^void Coordinates::Face3Area(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates
Face3Area	coordinates/cylindrical.cpp	/^void Cylindrical::Face3Area(const int k, const int j, const int il, const int iu,$/;"	f	class:Cylindrical
Face3Area	coordinates/gr_user.cpp	/^void GRUser::Face3Area(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser
Face3Area	coordinates/kerr-schild.cpp	/^void KerrSchild::Face3Area(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild
Face3Area	coordinates/schwarzschild.cpp	/^void Schwarzschild::Face3Area(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild
Face3Area	coordinates/spherical_polar.cpp	/^void SphericalPolar::Face3Area(const int k, const int j, const int il, const int iu,$/;"	f	class:SphericalPolar
Face3Metric	coordinates/coordinates.hpp	/^  virtual void Face3Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates
Face3Metric	coordinates/gr_user.cpp	/^void GRUser::Face3Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:GRUser
Face3Metric	coordinates/kerr-schild.cpp	/^void KerrSchild::Face3Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:KerrSchild
Face3Metric	coordinates/minkowski.cpp	/^void Minkowski::Face3Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:Minkowski
Face3Metric	coordinates/schwarzschild.cpp	/^void Schwarzschild::Face3Metric(const int k, const int j, const int il, const int iu,$/;"	f	class:Schwarzschild
FaceCenteredBoundaryVariable	bvals/fc/bvals_fc.cpp	/^FaceCenteredBoundaryVariable::FaceCenteredBoundaryVariable($/;"	f	class:FaceCenteredBoundaryVariable
FaceCenteredBoundaryVariable	bvals/fc/bvals_fc.hpp	/^class FaceCenteredBoundaryVariable : public BoundaryVariable {$/;"	c
FaceField	athena.hpp	/^  FaceField(int ncells3, int ncells2, int ncells1,$/;"	f	struct:FaceField
FaceField	athena.hpp	/^struct FaceField {$/;"	s
FaceXdx	hydro/hydro_diffusion/viscosity.cpp	/^void HydroDiffusion::FaceXdx(const int k, const int j, const int il, const int iu,$/;"	f	class:HydroDiffusion
FaceXdy	hydro/hydro_diffusion/viscosity.cpp	/^void HydroDiffusion::FaceXdy(const int k, const int j, const int il, const int iu,$/;"	f	class:HydroDiffusion
FaceXdz	hydro/hydro_diffusion/viscosity.cpp	/^void HydroDiffusion::FaceXdz(const int k, const int j, const int il, const int iu,$/;"	f	class:HydroDiffusion
FaceYdx	hydro/hydro_diffusion/viscosity.cpp	/^void HydroDiffusion::FaceYdx(const int k, const int j, const int il, const int iu,$/;"	f	class:HydroDiffusion
FaceYdy	hydro/hydro_diffusion/viscosity.cpp	/^void HydroDiffusion::FaceYdy(const int k, const int j, const int il, const int iu,$/;"	f	class:HydroDiffusion
FaceYdz	hydro/hydro_diffusion/viscosity.cpp	/^void HydroDiffusion::FaceYdz(const int k, const int j, const int il, const int iu,$/;"	f	class:HydroDiffusion
FaceZdx	hydro/hydro_diffusion/viscosity.cpp	/^void HydroDiffusion::FaceZdx(const int k, const int j, const int il, const int iu,$/;"	f	class:HydroDiffusion
FaceZdy	hydro/hydro_diffusion/viscosity.cpp	/^void HydroDiffusion::FaceZdy(const int k, const int j, const int il, const int iu,$/;"	f	class:HydroDiffusion
FaceZdz	hydro/hydro_diffusion/viscosity.cpp	/^void HydroDiffusion::FaceZdz(const int k, const int j, const int il, const int iu,$/;"	f	class:HydroDiffusion
FastMagnetosonicSpeed	eos/adiabatic_mhd.cpp	/^Real EquationOfState::FastMagnetosonicSpeed(const Real prim[(NWAVE)], const Real bx) {$/;"	f	class:EquationOfState
FastMagnetosonicSpeed	eos/eos.hpp	/^  Real FastMagnetosonicSpeed(const Real[], const Real) {return 0.0;}$/;"	f	class:EquationOfState
FastMagnetosonicSpeed	eos/general/general_mhd.cpp	/^Real EquationOfState::FastMagnetosonicSpeed(const Real prim[(NWAVE)], const Real bx) {$/;"	f	class:EquationOfState
FastMagnetosonicSpeed	eos/isothermal_mhd.cpp	/^Real EquationOfState::FastMagnetosonicSpeed(const Real prim[(NWAVE)], const Real bx) {$/;"	f	class:EquationOfState
FastMagnetosonicSpeedsGR	eos/adiabatic_mhd_gr.cpp	/^void EquationOfState::FastMagnetosonicSpeedsGR(Real wgas, Real pgas, Real u0, Real u1,$/;"	f	class:EquationOfState
FastMagnetosonicSpeedsGR	eos/adiabatic_mhd_sr.cpp	/^void EquationOfState::FastMagnetosonicSpeedsGR(Real wgas, Real pgas, Real u0, Real u1,$/;"	f	class:EquationOfState
FastMagnetosonicSpeedsGR	eos/eos.hpp	/^  void FastMagnetosonicSpeedsGR(Real, Real, Real, Real, Real, Real, Real, Real, Real *,$/;"	f	class:EquationOfState
FastMagnetosonicSpeedsGR	eos/eos.hpp	/^  void FastMagnetosonicSpeedsGR(Real, Real, Real, Real, Real, Real, Real, Real,$/;"	f	class:EquationOfState
FeelOthers_Flag	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^     RadiativeConduction_Flag, TransferFeedback_Flag, RK4_Flag, FeelOthers_Flag[11];$/;"	m	namespace:__anon68	file:
FeelOthers_Flag	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^     RadiativeConduction_Flag, Gap_Flag, TransferFeedback_Flag, RK4_Flag, FeelOthers_Flag[11];$/;"	m	namespace:__anon109	file:
Field	field/field.cpp	/^Field::Field(MeshBlock *pmb, ParameterInput *pin) :$/;"	f	class:Field
Field	field/field.hpp	/^class Field {$/;"	c
FieldDiffusion	field/field_diffusion/field_diffusion.cpp	/^FieldDiffusion::FieldDiffusion(MeshBlock *pmb, ParameterInput *pin) :$/;"	f	class:FieldDiffusion
FieldDiffusion	field/field_diffusion/field_diffusion.hpp	/^class FieldDiffusion {$/;"	c
FieldDiffusivity_	mesh/mesh.hpp	/^  FieldDiffusionCoeffFunc FieldDiffusivity_;$/;"	m	class:Mesh
FileMode	outputs/io_wrapper.hpp	/^  enum class FileMode {read, write};$/;"	c	class:IOWrapper
FillSameRankCoarseToFineAMR	mesh/amr_loadbalance.cpp	/^void Mesh::FillSameRankCoarseToFineAMR(MeshBlock* pob, MeshBlock* pmb,$/;"	f	class:Mesh
FillSameRankFineToCoarseAMR	mesh/amr_loadbalance.cpp	/^void Mesh::FillSameRankFineToCoarseAMR(MeshBlock* pob, MeshBlock* pmb,$/;"	f	class:Mesh
FinalCosineProfile	pgen/mignone_advection.cpp	/^Real FinalCosineProfile(Real x2) {$/;"	f	namespace:__anon150
FinalCosineSphericalIntegrand	pgen/mignone_advection.cpp	/^Real FinalCosineSphericalIntegrand(Real x2) {$/;"	f	namespace:__anon150
FinalGaussianCylindricalIntegrand	pgen/mignone_advection.cpp	/^Real FinalGaussianCylindricalIntegrand(Real x1) {$/;"	f	namespace:__anon150
FinalGaussianProfile	pgen/mignone_advection.cpp	/^Real FinalGaussianProfile(Real x1) {$/;"	f	namespace:__anon150
FinalGaussianSphericalIntegrand	pgen/mignone_advection.cpp	/^Real FinalGaussianSphericalIntegrand(Real x1) {$/;"	f	namespace:__anon150
FindBufferID	bvals/bvals_base.cpp	/^int BoundaryBase::FindBufferID(int ox1, int ox2, int ox3, int fi1, int fi2) {$/;"	f	class:BoundaryBase
FindMeshBlock	mesh/mesh.cpp	/^MeshBlock* Mesh::FindMeshBlock(int tgid) {$/;"	f	class:Mesh
FindMeshBlock	mesh/meshblock_tree.cpp	/^MeshBlockTree* MeshBlockTree::FindMeshBlock(LogicalLocation tloc) {$/;"	f	class:MeshBlockTree
FindMultigrid	multigrid/multigrid_driver.cpp	/^Multigrid* MultigridDriver::FindMultigrid(int tgid) {$/;"	f	class:MultigridDriver
FindNeighbor	mesh/meshblock_tree.cpp	/^MeshBlockTree* MeshBlockTree::FindNeighbor(LogicalLocation myloc,$/;"	f	class:MeshBlockTree
FindOrAddBlock	parameter_input.cpp	/^InputBlock* ParameterInput::FindOrAddBlock(std::string name) {$/;"	f	class:ParameterInput
FinishRecvCoarseToFineAMR	mesh/amr_loadbalance.cpp	/^void Mesh::FinishRecvCoarseToFineAMR(MeshBlock *pb, Real *recvbuf) {$/;"	f	class:Mesh
FinishRecvFineToCoarseAMR	mesh/amr_loadbalance.cpp	/^void Mesh::FinishRecvFineToCoarseAMR(MeshBlock *pb, Real *recvbuf,$/;"	f	class:Mesh
FinishRecvSameLevel	mesh/amr_loadbalance.cpp	/^void Mesh::FinishRecvSameLevel(MeshBlock *pb, Real *recvbuf) {$/;"	f	class:Mesh
FixedBoundary	pgen/gr_bondi.cpp	/^void FixedBoundary(MeshBlock *pmb, Coordinates *pcoord, AthenaArray<Real> &prim,$/;"	f
FixedBoundary	pgen/gr_geodesic_infall.cpp	/^void FixedBoundary(MeshBlock *pmb, Coordinates *pcoord, AthenaArray<Real> &prim,$/;"	f
FixedBoundary	pgen/gr_mhd_inflow.cpp	/^void FixedBoundary(MeshBlock *pmb, Coordinates *pcoord, AthenaArray<Real> &prim,$/;"	f
FixedDust	pgen/disk_3d_mhd_dust.cpp	/^void FixedDust(MeshBlock *pmb, int il, int iu, int jl, int ju, int kl, int ku,$/;"	f
FixedDust	pgen/disk_RWI_2D.cpp	/^void FixedDust(MeshBlock *pmb, int il, int iu, int jl, int ju, int kl, int ku,$/;"	f
FixedDust	pgen/disk_VSI.cpp	/^void FixedDust(MeshBlock *pmb, int il, int iu, int jl, int ju, int kl, int ku,$/;"	f
FixedDust	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^void FixedDust(MeshBlock *pmb, int il, int iu, int jl, int ju, int kl, int ku,$/;"	f
FixedDust	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^void FixedDust(MeshBlock *pmb, int il, int iu, int jl, int ju, int kl, int ku,$/;"	f
FixedDust	pgen/disk_planet_dust_cylindrical.cpp	/^void FixedDust(MeshBlock *pmb, int il, int iu, int jl, int ju, int kl, int ku,$/;"	f
FixedDust	pgen/disk_planet_dust_spherical.cpp	/^void FixedDust(MeshBlock *pmb, int il, int iu, int jl, int ju, int kl, int ku,$/;"	f
FixedDust	pgen/ssheet_RWI_dust.cpp	/^void FixedDust(MeshBlock *pmb, int il, int iu, int jl, int ju, int kl, int ku,$/;"	f
FixedDust	pgen/ssheet_planet_dust.cpp	/^void FixedDust(MeshBlock *pmb, int il, int iu, int jl, int ju, int kl, int ku,$/;"	f
FluidFormulation	athena.hpp	/^enum class FluidFormulation {evolve, background, disabled}; \/\/ rename background -> fixed?$/;"	c
FluxToGlobal1	coordinates/coordinates.hpp	/^  virtual void FluxToGlobal1($/;"	f	class:Coordinates
FluxToGlobal1	coordinates/gr_user.cpp	/^void GRUser::FluxToGlobal1($/;"	f	class:GRUser
FluxToGlobal1	coordinates/kerr-schild.cpp	/^void KerrSchild::FluxToGlobal1($/;"	f	class:KerrSchild
FluxToGlobal1	coordinates/minkowski.cpp	/^void Minkowski::FluxToGlobal1($/;"	f	class:Minkowski
FluxToGlobal1	coordinates/schwarzschild.cpp	/^void Schwarzschild::FluxToGlobal1($/;"	f	class:Schwarzschild
FluxToGlobal2	coordinates/coordinates.hpp	/^  virtual void FluxToGlobal2($/;"	f	class:Coordinates
FluxToGlobal2	coordinates/gr_user.cpp	/^void GRUser::FluxToGlobal2($/;"	f	class:GRUser
FluxToGlobal2	coordinates/kerr-schild.cpp	/^void KerrSchild::FluxToGlobal2($/;"	f	class:KerrSchild
FluxToGlobal2	coordinates/minkowski.cpp	/^void Minkowski::FluxToGlobal2($/;"	f	class:Minkowski
FluxToGlobal2	coordinates/schwarzschild.cpp	/^void Schwarzschild::FluxToGlobal2($/;"	f	class:Schwarzschild
FluxToGlobal3	coordinates/coordinates.hpp	/^  virtual void FluxToGlobal3($/;"	f	class:Coordinates
FluxToGlobal3	coordinates/gr_user.cpp	/^void GRUser::FluxToGlobal3($/;"	f	class:GRUser
FluxToGlobal3	coordinates/kerr-schild.cpp	/^void KerrSchild::FluxToGlobal3($/;"	f	class:KerrSchild
FluxToGlobal3	coordinates/minkowski.cpp	/^void Minkowski::FluxToGlobal3($/;"	f	class:Minkowski
FluxToGlobal3	coordinates/schwarzschild.cpp	/^void Schwarzschild::FluxToGlobal3($/;"	f	class:Schwarzschild
FormattedTableOutput	outputs/outputs.hpp	/^  explicit FormattedTableOutput(OutputParameters oparams) : OutputType(oparams) {}$/;"	f	class:FormattedTableOutput
FormattedTableOutput	outputs/outputs.hpp	/^class FormattedTableOutput : public OutputType {$/;"	c
ForwardNextTime	parameter_input.cpp	/^void ParameterInput::ForwardNextTime(Real mesh_time) {$/;"	f	class:ParameterInput
GENERAL_EOS	defs.hpp	/^#define GENERAL_EOS /;"	d
GENERAL_RELATIVITY	defs.hpp	/^#define GENERAL_RELATIVITY /;"	d
GLOBALS_HPP_	globals.hpp	/^#define GLOBALS_HPP_$/;"	d
GM	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  Real GM;                         \/\/ GM in disk problem$/;"	m	class:HydroDiffusion
GM	pgen/disk_3d_mhd_dust.cpp	/^Real GM = 1.0, R0 = 1.0;$/;"	m	namespace:__anon60	file:
GRAVITY_FFT_GRAVITY_HPP_	gravity/fft_gravity.hpp	/^#define GRAVITY_FFT_GRAVITY_HPP_$/;"	d
GRAVITY_GRAVITY_HPP_	gravity/gravity.hpp	/^#define GRAVITY_GRAVITY_HPP_$/;"	d
GRAVITY_MG_GRAVITY_HPP_	gravity/mg_gravity.hpp	/^#define GRAVITY_MG_GRAVITY_HPP_$/;"	d
GRUser	coordinates/coordinates.hpp	/^class GRUser : public Coordinates {$/;"	c
GRUser	coordinates/gr_user.cpp	/^GRUser::GRUser(MeshBlock *pmb, ParameterInput *pin, bool flag)$/;"	f	class:GRUser
Gap_Flag	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^     RadiativeConduction_Flag, Gap_Flag, TransferFeedback_Flag, RK4_Flag, FeelOthers_Flag[11];$/;"	m	namespace:__anon109	file:
GasVel1Maximum	pgen/streaming_nonlinear.cpp	/^Real GasVel1Maximum(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon136
GasVel2Maximum	pgen/streaming_nonlinear.cpp	/^Real GasVel2Maximum(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon136
GasVel3Maximum	pgen/streaming_nonlinear.cpp	/^Real GasVel3Maximum(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon136
GasVelProfileCyl	pgen/disk_dust_drift.cpp	/^void GasVelProfileCyl(const Real rad, const Real phi, const Real z,$/;"	f	namespace:__anon65
GasVelProfileCyl	pgen/dust_diffusion.cpp	/^void GasVelProfileCyl(const Real rad, const Real phi, const Real z,$/;"	f	namespace:__anon118
GasVelProfileCyl_NSH	pgen/disk_RWI_2D.cpp	/^void GasVelProfileCyl_NSH(const Real SN, const Real QN, const Real Psi,$/;"	f	namespace:__anon102
GasVelProfileCyl_NSH	pgen/disk_dust_diffusion.cpp	/^void GasVelProfileCyl_NSH(const Real SN, const Real QN, const Real Psi,$/;"	f	namespace:__anon71
GasVelProfileCyl_NSH	pgen/disk_dust_drift.cpp	/^void GasVelProfileCyl_NSH(const Real SN, const Real QN, const Real Psi,$/;"	f	namespace:__anon65
GasVelProfileCyl_NSH	pgen/disk_streaming_cylindrical.cpp	/^void GasVelProfileCyl_NSH(const Real SN, const Real QN, const Real Psi,$/;"	f	namespace:__anon55
GasVelProfileCyl_NSH	pgen/disk_streaming_spherical.cpp	/^void GasVelProfileCyl_NSH(const Real SN, const Real QN, const Real Psi,$/;"	f	namespace:__anon76
GatherCostListAndCheckBalance	mesh/amr_loadbalance.cpp	/^bool Mesh::GatherCostListAndCheckBalance() {$/;"	f	class:Mesh
GaussLegendre	utils/gl_quadrature.cpp	/^namespace GaussLegendre {$/;"	n	file:
GaussLegendre	utils/gl_quadrature.hpp	/^namespace GaussLegendre {$/;"	n
Generate	fft/turbulence.cpp	/^void TurbulenceDriver::Generate() {$/;"	f	class:TurbulenceDriver
GetBlockSizeInBytes	mesh/meshblock.cpp	/^std::size_t MeshBlock::GetBlockSizeInBytes() {$/;"	f	class:MeshBlock
GetBoolean	parameter_input.cpp	/^bool ParameterInput::GetBoolean(std::string block, std::string name) {$/;"	f	class:ParameterInput
GetBoundaryFlag	bvals/utils/boundary_flag.cpp	/^BoundaryFlag GetBoundaryFlag(const std::string& input_string) {$/;"	f
GetBoundaryString	bvals/utils/boundary_flag.cpp	/^std::string GetBoundaryString(BoundaryFlag input_flag) {$/;"	f
GetBoyerLindquistCoordinates	pgen/gr_bondi.cpp	/^void GetBoyerLindquistCoordinates(Real x1, Real x2, Real x3, Real *pr,$/;"	f	namespace:__anon81
GetBoyerLindquistCoordinates	pgen/gr_geodesic_infall.cpp	/^void GetBoyerLindquistCoordinates(Real x1, Real x2, Real x3, Real *pr,$/;"	f	namespace:__anon139
GetBoyerLindquistCoordinates	pgen/gr_mhd_inflow.cpp	/^void GetBoyerLindquistCoordinates(Real x1, Real x2, Real x3, Real *pr,$/;"	f	namespace:__anon73
GetBoyerLindquistCoordinates	pgen/gr_torus.cpp	/^void GetBoyerLindquistCoordinates(Real x1, Real x2, Real x3, Real *p_r, Real *p_th,$/;"	f	namespace:__anon41
GetCartesian	pgen/disk_planet_dust_spherical.cpp	/^void GetCartesian(Coordinates *pco, Real &x, Real &y, Real &z, int i, int j, int k) {$/;"	f	namespace:__anon114
GetCellVolume	coordinates/coordinates.cpp	/^Real Coordinates::GetCellVolume(const int k, const int j, const int i) {$/;"	f	class:Coordinates
GetCellVolume	coordinates/cylindrical.cpp	/^Real Cylindrical::GetCellVolume(const int k, const int j, const int i) {$/;"	f	class:Cylindrical
GetCellVolume	coordinates/gr_user.cpp	/^Real GRUser::GetCellVolume(const int k, const int j, const int i) {$/;"	f	class:GRUser
GetCellVolume	coordinates/kerr-schild.cpp	/^Real KerrSchild::GetCellVolume(const int k, const int j, const int i) {$/;"	f	class:KerrSchild
GetCellVolume	coordinates/schwarzschild.cpp	/^Real Schwarzschild::GetCellVolume(const int k, const int j, const int i) {$/;"	f	class:Schwarzschild
GetCellVolume	coordinates/spherical_polar.cpp	/^Real SphericalPolar::GetCellVolume(const int k, const int j, const int i) {$/;"	f	class:SphericalPolar
GetCoarsestData	multigrid/multigrid.cpp	/^Real Multigrid::GetCoarsestData(MGVariable type, int n) {$/;"	f	class:Multigrid
GetCurrentData	multigrid/multigrid.hpp	/^  AthenaArray<Real>& GetCurrentData() { return u_[current_level_]; }$/;"	f	class:Multigrid
GetCurrentLevel	multigrid/multigrid.hpp	/^  int GetCurrentLevel() { return current_level_; }$/;"	f	class:Multigrid
GetCurrentNumberOfCells	multigrid/multigrid.hpp	/^  int GetCurrentNumberOfCells() { return 1<<current_level_; }$/;"	f	class:Multigrid
GetCurrentOldData	multigrid/multigrid.hpp	/^  AthenaArray<Real>& GetCurrentOldData() { return uold_[current_level_]; }$/;"	f	class:Multigrid
GetCurrentSource	multigrid/multigrid.hpp	/^  AthenaArray<Real>& GetCurrentSource() { return src_[current_level_]; }$/;"	f	class:Multigrid
GetCylCoord	hydro/hydro_diffusion/viscosity.cpp	/^void GetCylCoord(Coordinates *pco, Real &rad, Real &phi, Real &z, int i, int j, int k) {$/;"	f
GetCylCoord	pgen/disk.cpp	/^void GetCylCoord(Coordinates *pco,Real &rad,Real &phi,Real &z,int i,int j,int k) {$/;"	f	namespace:__anon37
GetCylCoord	pgen/disk_RWI_2D.cpp	/^void GetCylCoord(Coordinates *pco,Real &rad,Real &phi,Real &z,int i,int j,int k) {$/;"	f	namespace:__anon102
GetCylCoord	pgen/disk_dust_diffusion.cpp	/^void GetCylCoord(Coordinates *pco,Real &rad,Real &phi,Real &z,int i,int j,int k) {$/;"	f	namespace:__anon71
GetCylCoord	pgen/disk_dust_drift.cpp	/^void GetCylCoord(Coordinates *pco,Real &rad,Real &phi,Real &z,int i,int j,int k) {$/;"	f	namespace:__anon65
GetCylCoord	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^void GetCylCoord(Coordinates *pco,Real &rad,Real &phi,Real &z,int i,int j,int k) {$/;"	f	namespace:__anon69
GetCylCoord	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^void GetCylCoord(Coordinates *pco,Real &rad,Real &phi,Real &z,int i,int j,int k) {$/;"	f	namespace:__anon110
GetCylCoord	pgen/disk_planet_dust_cylindrical.cpp	/^void GetCylCoord(Coordinates *pco,Real &rad,Real &phi,Real &z,int i,int j,int k) {$/;"	f	namespace:__anon100
GetCylCoord	pgen/disk_planet_dust_spherical.cpp	/^void GetCylCoord(Coordinates *pco,Real &rad,Real &phi,Real &z,int i,int j,int k) {$/;"	f	namespace:__anon114
GetCylCoord	pgen/disk_streaming_cylindrical.cpp	/^void GetCylCoord(Coordinates *pco,Real &rad,Real &phi,Real &z,int i,int j,int k) {$/;"	f	namespace:__anon55
GetCylCoord	pgen/disk_streaming_spherical.cpp	/^void GetCylCoord(Coordinates *pco,Real &rad,Real &phi,Real &z,int i,int j,int k) {$/;"	f	namespace:__anon76
GetCylCoord	pgen/dust_diffusion.cpp	/^void GetCylCoord(Coordinates *pco,Real &rad,Real &phi,Real &z,int i,int j,int k) {$/;"	f	namespace:__anon118
GetCylCoord	pgen/inject_pebble_3D.cpp	/^void GetCylCoord(Coordinates *pco,Real &rad,Real &phi,Real &z,int i,int j,int k) {$/;"	f	namespace:__anon63
GetCylCoordInSpherical	pgen/disk_VSI.cpp	/^void GetCylCoordInSpherical(Coordinates *pco,Real &rad,Real &phi,Real &z,int i,int j,int k) {$/;"	f	namespace:__anon134
GetDensityFloor	eos/eos.hpp	/^  Real GetDensityFloor() const {return density_floor_;}$/;"	f	class:EquationOfState
GetDim1	athena_arrays.hpp	/^  int GetDim1() const { return nx1_; }$/;"	f	class:AthenaArray
GetDim2	athena_arrays.hpp	/^  int GetDim2() const { return nx2_; }$/;"	f	class:AthenaArray
GetDim3	athena_arrays.hpp	/^  int GetDim3() const { return nx3_; }$/;"	f	class:AthenaArray
GetDim4	athena_arrays.hpp	/^  int GetDim4() const { return nx4_; }$/;"	f	class:AthenaArray
GetDim5	athena_arrays.hpp	/^  int GetDim5() const { return nx5_; }$/;"	f	class:AthenaArray
GetDim6	athena_arrays.hpp	/^  int GetDim6() const { return nx6_; }$/;"	f	class:AthenaArray
GetEdge1Length	coordinates/coordinates.cpp	/^Real Coordinates::GetEdge1Length(const int k, const int j, const int i) {$/;"	f	class:Coordinates
GetEdge1Length	coordinates/gr_user.cpp	/^Real GRUser::GetEdge1Length(const int k, const int j, const int i) {$/;"	f	class:GRUser
GetEdge1Length	coordinates/kerr-schild.cpp	/^Real KerrSchild::GetEdge1Length(const int k, const int j, const int i) {$/;"	f	class:KerrSchild
GetEdge1Length	coordinates/schwarzschild.cpp	/^Real Schwarzschild::GetEdge1Length(const int k, const int j, const int i) {$/;"	f	class:Schwarzschild
GetEdge2Length	coordinates/coordinates.cpp	/^Real Coordinates::GetEdge2Length(const int k, const int j, const int i) {$/;"	f	class:Coordinates
GetEdge2Length	coordinates/cylindrical.cpp	/^Real Cylindrical::GetEdge2Length(const int k, const int j, const int i) {$/;"	f	class:Cylindrical
GetEdge2Length	coordinates/gr_user.cpp	/^Real GRUser::GetEdge2Length(const int k, const int j, const int i) {$/;"	f	class:GRUser
GetEdge2Length	coordinates/kerr-schild.cpp	/^Real KerrSchild::GetEdge2Length(const int k, const int j, const int i) {$/;"	f	class:KerrSchild
GetEdge2Length	coordinates/schwarzschild.cpp	/^Real Schwarzschild::GetEdge2Length(const int k, const int j, const int i) {$/;"	f	class:Schwarzschild
GetEdge2Length	coordinates/spherical_polar.cpp	/^Real SphericalPolar::GetEdge2Length(const int k, const int j, const int i) {$/;"	f	class:SphericalPolar
GetEdge3Length	coordinates/coordinates.cpp	/^Real Coordinates::GetEdge3Length(const int k, const int j, const int i) {$/;"	f	class:Coordinates
GetEdge3Length	coordinates/gr_user.cpp	/^Real GRUser::GetEdge3Length(const int k, const int j, const int i) {$/;"	f	class:GRUser
GetEdge3Length	coordinates/kerr-schild.cpp	/^Real KerrSchild::GetEdge3Length(const int k, const int j, const int i) {$/;"	f	class:KerrSchild
GetEdge3Length	coordinates/schwarzschild.cpp	/^Real Schwarzschild::GetEdge3Length(const int k, const int j, const int i) {$/;"	f	class:Schwarzschild
GetEdge3Length	coordinates/spherical_polar.cpp	/^Real SphericalPolar::GetEdge3Length(const int k, const int j, const int i) {$/;"	f	class:SphericalPolar
GetEosData	eos/general/eos_table.cpp	/^inline Real GetEosData(EosTable *ptable, int kOut, Real var, Real rho) {$/;"	f	namespace:__anon10
GetFace1Area	coordinates/coordinates.cpp	/^Real Coordinates::GetFace1Area(const int k, const int j, const int i) {$/;"	f	class:Coordinates
GetFace1Area	coordinates/cylindrical.cpp	/^Real Cylindrical::GetFace1Area(const int k, const int j, const int i) {$/;"	f	class:Cylindrical
GetFace1Area	coordinates/gr_user.cpp	/^Real GRUser::GetFace1Area(const int k, const int j, const int i) {$/;"	f	class:GRUser
GetFace1Area	coordinates/kerr-schild.cpp	/^Real KerrSchild::GetFace1Area(const int k, const int j, const int i) {$/;"	f	class:KerrSchild
GetFace1Area	coordinates/schwarzschild.cpp	/^Real Schwarzschild::GetFace1Area(const int k, const int j, const int i) {$/;"	f	class:Schwarzschild
GetFace1Area	coordinates/spherical_polar.cpp	/^Real SphericalPolar::GetFace1Area(const int k, const int j, const int i) {$/;"	f	class:SphericalPolar
GetFace2Area	coordinates/coordinates.cpp	/^Real Coordinates::GetFace2Area(const int k, const int j, const int i) {$/;"	f	class:Coordinates
GetFace2Area	coordinates/gr_user.cpp	/^Real GRUser::GetFace2Area(const int k, const int j, const int i) {$/;"	f	class:GRUser
GetFace2Area	coordinates/kerr-schild.cpp	/^Real KerrSchild::GetFace2Area(const int k, const int j, const int i) {$/;"	f	class:KerrSchild
GetFace2Area	coordinates/schwarzschild.cpp	/^Real Schwarzschild::GetFace2Area(const int k, const int j, const int i) {$/;"	f	class:Schwarzschild
GetFace2Area	coordinates/spherical_polar.cpp	/^Real SphericalPolar::GetFace2Area(const int k, const int j, const int i) {$/;"	f	class:SphericalPolar
GetFace3Area	coordinates/coordinates.cpp	/^Real Coordinates::GetFace3Area(const int k, const int j, const int i) {$/;"	f	class:Coordinates
GetFace3Area	coordinates/cylindrical.cpp	/^Real Cylindrical::GetFace3Area(const int k, const int j, const int i) {$/;"	f	class:Cylindrical
GetFace3Area	coordinates/gr_user.cpp	/^Real GRUser::GetFace3Area(const int k, const int j, const int i) {$/;"	f	class:GRUser
GetFace3Area	coordinates/kerr-schild.cpp	/^Real KerrSchild::GetFace3Area(const int k, const int j, const int i) {$/;"	f	class:KerrSchild
GetFace3Area	coordinates/schwarzschild.cpp	/^Real Schwarzschild::GetFace3Area(const int k, const int j, const int i) {$/;"	f	class:Schwarzschild
GetFace3Area	coordinates/spherical_polar.cpp	/^Real SphericalPolar::GetFace3Area(const int k, const int j, const int i) {$/;"	f	class:SphericalPolar
GetFluidFormulation	mesh/mesh.cpp	/^FluidFormulation GetFluidFormulation(const std::string& input_string) {$/;"	f
GetG1	hydro/srcterms/hydro_srcterms.hpp	/^  Real GetG1() const {return g1_;}$/;"	f	class:HydroSourceTerms
GetG2	hydro/srcterms/hydro_srcterms.hpp	/^  Real GetG2() const {return g2_;}$/;"	f	class:HydroSourceTerms
GetG3	hydro/srcterms/hydro_srcterms.hpp	/^  Real GetG3() const {return g3_;}$/;"	f	class:HydroSourceTerms
GetGM	dustfluids/srcterms/dustfluids_srcterms.hpp	/^  Real GetGM() const {return gm_;}$/;"	f	class:DustFluidsSourceTerms
GetGM	hydro/srcterms/hydro_srcterms.hpp	/^  Real GetGM() const {return gm_;}$/;"	f	class:HydroSourceTerms
GetGamma	eos/eos.hpp	/^  Real GetGamma() const {return gamma_;}$/;"	f	class:EquationOfState
GetGamma	eos/general/general_hydro.cpp	/^Real EquationOfState::GetGamma() {$/;"	f	class:EquationOfState
GetGamma	eos/general/general_mhd.cpp	/^Real EquationOfState::GetGamma() {$/;"	f	class:EquationOfState
GetGid	mesh/meshblock_tree.hpp	/^  int GetGid() const {return gid_;}$/;"	f	class:MeshBlockTree
GetGlobalIndex	fft/athena_fft.cpp	/^std::int64_t FFTBlock::GetGlobalIndex(const int i, const int j, const int k) {$/;"	f	class:FFTBlock
GetIndex	fft/athena_fft.cpp	/^std::int64_t FFTBlock::GetIndex(const int i, const int j, const int k) {$/;"	f	class:FFTBlock
GetIndex	fft/athena_fft.cpp	/^std::int64_t FFTBlock::GetIndex(const int i, const int j, const int k,$/;"	f	class:FFTBlock
GetInteger	parameter_input.cpp	/^int ParameterInput::GetInteger(std::string block, std::string name) {$/;"	f	class:ParameterInput
GetIsoSoundSpeed	eos/eos.hpp	/^  Real GetIsoSoundSpeed() const {return iso_sound_speed_;}$/;"	f	class:EquationOfState
GetKcomp	fft/turbulence.cpp	/^std::int64_t TurbulenceDriver::GetKcomp(int idx, int disp, int Nx) {$/;"	f	class:TurbulenceDriver
GetKerrSchildCoordinates	pgen/gr_torus.cpp	/^void GetKerrSchildCoordinates(Real x1, Real x2, Real x3, Real *p_r, Real *p_th,$/;"	f	namespace:__anon40
GetLeaf	mesh/meshblock_tree.hpp	/^  MeshBlockTree* GetLeaf(int ox1, int ox2, int ox3)$/;"	f	class:MeshBlockTree
GetMGOctetList	mesh/meshblock_tree.cpp	/^void MeshBlockTree::GetMGOctetList(std::vector<MGOctet> *oct,$/;"	f	class:MeshBlockTree
GetMass	coordinates/coordinates.hpp	/^  Real GetMass() const {return bh_mass_;}$/;"	f	class:Coordinates
GetMeshBlockList	mesh/meshblock_tree.cpp	/^void MeshBlockTree::GetMeshBlockList(LogicalLocation *list, int *pglist, int& count) {$/;"	f	class:MeshBlockTree
GetMinkowskiCoordinates	pgen/gr_blast.cpp	/^void GetMinkowskiCoordinates(Real x0, Real x1, Real x2, Real x3, Real *pt,$/;"	f	namespace:__anon79
GetMinkowskiCoordinates	pgen/gr_linear_wave.cpp	/^void GetMinkowskiCoordinates(Real x0, Real x1, Real x2, Real x3, Real *pt,$/;"	f	namespace:__anon85
GetMinkowskiCoordinates	pgen/gr_shock_tube.cpp	/^void GetMinkowskiCoordinates(Real x0, Real x1, Real x2, Real x3, Real *pt,$/;"	f	namespace:__anon94
GetNumFFTBlocks	fft/athena_fft.hpp	/^  int GetNumFFTBlocks() { return nblist_[Globals::my_rank]; }$/;"	f	class:FFTBlock::FFTDriver
GetNumMeshThreads	mesh/mesh.hpp	/^  int GetNumMeshThreads() const {return num_mesh_threads_;}$/;"	f	class:Mesh
GetNumMultigrids	multigrid/multigrid.hpp	/^  int GetNumMultigrids() { return nblist_[Globals::my_rank]; }$/;"	f	class:MultigridDriver
GetNumberOfLevels	multigrid/multigrid.hpp	/^  int GetNumberOfLevels() { return nlevel_; }$/;"	f	class:Multigrid
GetNumberOfMeshBlockCells	mesh/mesh.hpp	/^  int GetNumberOfMeshBlockCells() {$/;"	f	class:MeshBlock
GetOrAddBoolean	parameter_input.cpp	/^bool ParameterInput::GetOrAddBoolean(std::string block,std::string name, bool def_value) {$/;"	f	class:ParameterInput
GetOrAddInteger	parameter_input.cpp	/^int ParameterInput::GetOrAddInteger(std::string block, std::string name, int def_value) {$/;"	f	class:ParameterInput
GetOrAddReal	parameter_input.cpp	/^Real ParameterInput::GetOrAddReal(std::string block, std::string name, Real def_value) {$/;"	f	class:ParameterInput
GetOrAddString	parameter_input.cpp	/^std::string ParameterInput::GetOrAddString(std::string block, std::string name,$/;"	f	class:ParameterInput
GetPosition	outputs/io_wrapper.cpp	/^IOWrapperSizeT IOWrapper::GetPosition() {$/;"	f	class:IOWrapper
GetPressureFloor	eos/eos.hpp	/^  Real GetPressureFloor() const {return pressure_floor_;}$/;"	f	class:EquationOfState
GetPtrToBlock	parameter_input.cpp	/^InputBlock* ParameterInput::GetPtrToBlock(std::string name) {$/;"	f	class:ParameterInput
GetPtrToLine	parameter_input.cpp	/^InputLine* InputBlock::GetPtrToLine(std::string name) {$/;"	f	class:InputBlock
GetReal	parameter_input.cpp	/^Real ParameterInput::GetReal(std::string block, std::string name) {$/;"	f	class:ParameterInput
GetSignalFlag	utils/signal_handler.cpp	/^int GetSignalFlag(int s) {$/;"	f	namespace:SignalHandler
GetSize	athena_arrays.hpp	/^  int GetSize() const {$/;"	f	class:AthenaArray
GetSize	utils/interp_table.cpp	/^void InterpTable2D::GetSize(int &nvar, int &nx2, int &nx1) {$/;"	f	class:InterpTable2D
GetSizeInBytes	athena_arrays.hpp	/^  std::size_t GetSizeInBytes() const {$/;"	f	class:AthenaArray
GetSphCoord	pgen/inject_pebble_3D.cpp	/^void GetSphCoord(Coordinates *pco,Real &rad,Real &theta,Real &phi,int i,int j,int k) {$/;"	f	namespace:__anon63
GetSpin	coordinates/coordinates.hpp	/^  Real GetSpin() const {return bh_spin_;}$/;"	f	class:Coordinates
GetString	parameter_input.cpp	/^std::string ParameterInput::GetString(std::string block, std::string name) {$/;"	f	class:ParameterInput
GetTotalCells	mesh/mesh.hpp	/^  std::int64_t GetTotalCells() {return static_cast<std::int64_t> (nbtotal)*$/;"	f	class:Mesh
GetWeightForCT	hydro/hydro.cpp	/^Real Hydro::GetWeightForCT(Real dflx, Real rhol, Real rhor, Real dx, Real dt) {$/;"	f	class:Hydro
GetX1lim	utils/interp_table.cpp	/^void InterpTable2D::GetX1lim(Real &x1min, Real &x1max) {$/;"	f	class:InterpTable2D
GetX2lim	utils/interp_table.cpp	/^void InterpTable2D::GetX2lim(Real &x2min, Real &x2max) {$/;"	f	class:InterpTable2D
Get_E_kg	pgen/inject_pebble_3D.cpp	/^void Get_E_kg(AthenaArray<Real> gas_vel_array, Real &E_kg){$/;"	f	namespace:__anon63
Get_T_rhoe	pgen/inject_pebble_3D.cpp	/^Real Get_T_rhoe(Real rhoe, Real rho_g, AthenaArray<Real> rho_d_array, Real fv){$/;"	f	namespace:__anon63
Get_T_rhoe_g	pgen/inject_pebble_3D.cpp	/^Real Get_T_rhoe_g(Real rhoe_g, Real rho_g, Real fv){$/;"	f	namespace:__anon63
Get_Z	pgen/inject_pebble_3D.cpp	/^Real Get_Z(Real rho_g, Real T){$/;"	f	namespace:__anon63
Get_mu	pgen/inject_pebble_3D.cpp	/^Real Get_mu(Real fv){$/;"	f	namespace:__anon63
Get_rhoe	pgen/inject_pebble_3D.cpp	/^Real Get_rhoe(Real rhoE_total, Real rho_g, Real E_kg, AthenaArray<Real> rho_d_array, AthenaArray<Real> E_kd_array){$/;"	f	namespace:__anon63
Get_rhomu_d	pgen/inject_pebble_3D.cpp	/^Real Get_rhomu_d(AthenaArray<Real> rho_d_array){$/;"	f	namespace:__anon63
Get_vel_new_fromMC	pgen/inject_pebble_3D.cpp	/^void Get_vel_new_fromMC(AthenaArray<Real> gas_vel_array,$/;"	f	namespace:__anon63
Globals	globals.cpp	/^namespace Globals {$/;"	n	file:
Globals	globals.hpp	/^namespace Globals {$/;"	n
Gravity	gravity/gravity.cpp	/^Gravity::Gravity(MeshBlock *pmb, ParameterInput *pin) :$/;"	f	class:Gravity
Gravity	gravity/gravity.hpp	/^class Gravity {$/;"	c
Greater	athena.hpp	/^  static bool Greater(const LogicalLocation & left, const LogicalLocation &right) {$/;"	f	struct:LogicalLocation
H5T_NATIVE_REAL	outputs/athena_hdf5.cpp	/^#define H5T_NATIVE_REAL /;"	d	file:
H5T_REAL	inputs/hdf5_reader.cpp	/^#define H5T_REAL /;"	d	file:
H5_DOUBLE_PRECISION_ENABLED	defs.hpp	/^#define H5_DOUBLE_PRECISION_ENABLED /;"	d
HDF5OUTPUT	defs.hpp	/^#define HDF5OUTPUT$/;"	d
HDF5ReadRealArray	inputs/hdf5_reader.cpp	/^void HDF5ReadRealArray(const char *filename, const char *dataset_name, int rank_file,$/;"	f
HDF5TableLoader	inputs/hdf5_reader.cpp	/^void HDF5TableLoader(const char *filename, InterpTable2D* ptable, const int nvar,$/;"	f
HLLCTransforming	hydro/rsolvers/hydro/hllc_rel.cpp	/^void HLLCTransforming(MeshBlock *pmb, const int k, const int j, const int il,$/;"	f	namespace:__anon33
HLLDTransforming	hydro/rsolvers/mhd/hlld_rel.cpp	/^void HLLDTransforming(MeshBlock *pmb, const int k, const int j,$/;"	f	namespace:__anon27
HLLENoCsRiemannSolverDustFluids	dustfluids/dustfluids_hlle_solver.cpp	/^void DustFluids::HLLENoCsRiemannSolverDustFluids(const int k, const int j, const int il, const int iu,$/;"	f	class:DustFluids
HLLENonTransforming	hydro/rsolvers/hydro/hllc_rel.cpp	/^void HLLENonTransforming(MeshBlock *pmb, const int k, const int j,$/;"	f	namespace:__anon33
HLLENonTransforming	hydro/rsolvers/hydro/hlle_rel.cpp	/^void HLLENonTransforming(MeshBlock *pmb, const int k, const int j, const int il,$/;"	f	namespace:__anon35
HLLENonTransforming	hydro/rsolvers/mhd/hlld_rel.cpp	/^void HLLENonTransforming(MeshBlock *pmb, const int k, const int j,$/;"	f	namespace:__anon27
HLLENonTransforming	hydro/rsolvers/mhd/hlle_mhd_rel.cpp	/^void HLLENonTransforming(MeshBlock *pmb, const int k, const int j,$/;"	f	namespace:__anon23
HLLERiemannSolverDustFluids	dustfluids/dustfluids_hlle_solver.cpp	/^void DustFluids::HLLERiemannSolverDustFluids(const int k, const int j, const int il, const int iu,$/;"	f	class:DustFluids
HLLETransforming	hydro/rsolvers/hydro/hlle_rel.cpp	/^void HLLETransforming(MeshBlock *pmb, const int k, const int j, const int il,$/;"	f	namespace:__anon35
HLLETransforming	hydro/rsolvers/mhd/hlle_mhd_rel.cpp	/^void HLLETransforming(MeshBlock *pmb, const int k, const int j,$/;"	f	namespace:__anon23
HUGE_NUMBER	defs.hpp	/^#define HUGE_NUMBER /;"	d
HYDRO_HYDRO_DIFFUSION_HYDRO_DIFFUSION_HPP_	hydro/hydro_diffusion/hydro_diffusion.hpp	/^#define HYDRO_HYDRO_DIFFUSION_HYDRO_DIFFUSION_HPP_$/;"	d
HYDRO_HYDRO_HPP_	hydro/hydro.hpp	/^#define HYDRO_HYDRO_HPP_$/;"	d
HYDRO_SRCTERMS_HYDRO_SRCTERMS_HPP_	hydro/srcterms/hydro_srcterms.hpp	/^#define HYDRO_SRCTERMS_HYDRO_SRCTERMS_HPP_$/;"	d
Hdust	pgen/streaming_stratified.cpp	/^Real Hg, Hdust[NDUSTFLUIDS], Hratio[NDUSTFLUIDS];$/;"	m	namespace:__anon154	file:
Hg	pgen/streaming_stratified.cpp	/^Real Hg, Hdust[NDUSTFLUIDS], Hratio[NDUSTFLUIDS];$/;"	m	namespace:__anon154	file:
Hill_radius	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^gMth[10], t_planet_growth[10], Hill_radius[10], accretion_radius[10],$/;"	m	namespace:__anon68	file:
Hill_radius	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^gMth[10], t_planet_growth[10], Hill_radius[10], accretion_radius[10],$/;"	m	namespace:__anon109	file:
Hill_radius	pgen/disk_planet_dust_cylindrical.cpp	/^x1min, x1max, damping_rate, Hill_radius, accretion_radius, accretion_rate,$/;"	m	namespace:__anon99	file:
Hill_radius	pgen/disk_planet_dust_spherical.cpp	/^x1min, x1max, damping_rate, Hill_radius, accretion_radius, accretion_rate,$/;"	m	namespace:__anon113	file:
HistoryBs	pgen/jgg.cpp	/^Real HistoryBs(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon124
HistoryBxBy	pgen/hb3.cpp	/^Real HistoryBxBy(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon59
HistoryBxBy	pgen/hgb.cpp	/^Real HistoryBxBy(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon116
HistoryBxBy	pgen/strat.cpp	/^Real HistoryBxBy(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon128
HistoryBxc	pgen/jgg.cpp	/^Real HistoryBxc(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon124
HistoryBzc	pgen/jgg.cpp	/^Real HistoryBzc(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon124
HistoryOutput	outputs/outputs.hpp	/^  explicit HistoryOutput(OutputParameters oparams) : OutputType(oparams) {}$/;"	f	class:HistoryOutput
HistoryOutput	outputs/outputs.hpp	/^class HistoryOutput : public OutputType {$/;"	c
HistorySum	pgen/gr_torus.cpp	/^Real HistorySum(MeshBlock *pmb, int iout) {$/;"	f
HistorydBxc	pgen/jgg.cpp	/^Real HistorydBxc(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon124
HistorydByc	pgen/jgg.cpp	/^Real HistorydByc(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon124
HistorydVxVy	pgen/hgb.cpp	/^Real HistorydVxVy(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon116
HistorydVxVy	pgen/strat.cpp	/^Real HistorydVxVy(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon128
Historydvyc	pgen/ssheet.cpp	/^Real Historydvyc(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon96
Historydvys	pgen/ssheet.cpp	/^Real Historydvys(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon96
Historyvxs	pgen/ssheet.cpp	/^Real Historyvxs(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon96
HistoryxidBx	pgen/jgg.cpp	/^Real HistoryxidBx(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon124
HoR0	pgen/disk_3d_mhd_dust.cpp	/^Real rho0, alpha, HoR0, HoRc, theta_trans;$/;"	m	namespace:__anon60	file:
HoRc	pgen/disk_3d_mhd_dust.cpp	/^Real rho0, alpha, HoR0, HoRc, theta_trans;$/;"	m	namespace:__anon60	file:
Hratio	pgen/disk_3d_mhd_dust.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS],$/;"	m	namespace:__anon60	file:
Hratio	pgen/disk_RWI_2D.cpp	/^Real initial_D2G[NDUSTFLUIDS], ring_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS], weight_dust[NDUSTFLUIDS];$/;"	m	namespace:__anon101	file:
Hratio	pgen/disk_VSI.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS],$/;"	m	namespace:__anon133	file:
Hratio	pgen/disk_dust_diffusion.cpp	/^Real initial_D2G[NDUSTFLUIDS], ring_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS],$/;"	m	namespace:__anon70	file:
Hratio	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS],$/;"	m	namespace:__anon68	file:
Hratio	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS],$/;"	m	namespace:__anon109	file:
Hratio	pgen/disk_planet_dust_cylindrical.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS],$/;"	m	namespace:__anon99	file:
Hratio	pgen/disk_planet_dust_spherical.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS],$/;"	m	namespace:__anon113	file:
Hratio	pgen/disk_streaming_cylindrical.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS];$/;"	m	namespace:__anon54	file:
Hratio	pgen/disk_streaming_spherical.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS];$/;"	m	namespace:__anon75	file:
Hratio	pgen/dust_diffusion.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], nu_dust[NDUSTFLUIDS], Hratio[NDUSTFLUIDS];$/;"	m	namespace:__anon117	file:
Hratio	pgen/inject_pebble_3D.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS], boundary_D2G[NDUSTFLUIDS], const_stopping_time[NDUSTFLUIDS];$/;"	m	namespace:__anon62	file:
Hratio	pgen/streaming_stratified.cpp	/^Real Hg, Hdust[NDUSTFLUIDS], Hratio[NDUSTFLUIDS];$/;"	m	namespace:__anon154	file:
Hydro	hydro/hydro.cpp	/^Hydro::Hydro(MeshBlock *pmb, ParameterInput *pin) :$/;"	f	class:Hydro
Hydro	hydro/hydro.hpp	/^class Hydro {$/;"	c
HydroBoundaryQuantity	athena.hpp	/^enum class HydroBoundaryQuantity {cons, prim};$/;"	c
HydroBoundaryVariable	bvals/cc/hydro/bvals_hydro.cpp	/^HydroBoundaryVariable::HydroBoundaryVariable($/;"	f	class:HydroBoundaryVariable
HydroBoundaryVariable	bvals/cc/hydro/bvals_hydro.hpp	/^class HydroBoundaryVariable : public CellCenteredBoundaryVariable {$/;"	c
HydroDiffusion	hydro/hydro_diffusion/hydro_diffusion.cpp	/^HydroDiffusion::HydroDiffusion(Hydro *phyd, ParameterInput *pin) :$/;"	f	class:HydroDiffusion
HydroDiffusion	hydro/hydro_diffusion/hydro_diffusion.hpp	/^class HydroDiffusion {$/;"	c
HydroIntegratorTaskNames	task_list/task_list.hpp	/^namespace HydroIntegratorTaskNames {$/;"	n
HydroSourceTerms	hydro/srcterms/hydro_srcterms.cpp	/^HydroSourceTerms::HydroSourceTerms(Hydro *phyd, ParameterInput *pin) {$/;"	f	class:HydroSourceTerms
HydroSourceTerms	hydro/srcterms/hydro_srcterms.hpp	/^class HydroSourceTerms {$/;"	c
I00	athena.hpp	/^enum MetricIndex {I00=0, I01=1, I02=2, I03=3, I11=4, I12=5, I13=6, I22=7, I23=8, I33=9,$/;"	e	enum:MetricIndex
I01	athena.hpp	/^enum MetricIndex {I00=0, I01=1, I02=2, I03=3, I11=4, I12=5, I13=6, I22=7, I23=8, I33=9,$/;"	e	enum:MetricIndex
I02	athena.hpp	/^enum MetricIndex {I00=0, I01=1, I02=2, I03=3, I11=4, I12=5, I13=6, I22=7, I23=8, I33=9,$/;"	e	enum:MetricIndex
I03	athena.hpp	/^enum MetricIndex {I00=0, I01=1, I02=2, I03=3, I11=4, I12=5, I13=6, I22=7, I23=8, I33=9,$/;"	e	enum:MetricIndex
I11	athena.hpp	/^enum MetricIndex {I00=0, I01=1, I02=2, I03=3, I11=4, I12=5, I13=6, I22=7, I23=8, I33=9,$/;"	e	enum:MetricIndex
I12	athena.hpp	/^enum MetricIndex {I00=0, I01=1, I02=2, I03=3, I11=4, I12=5, I13=6, I22=7, I23=8, I33=9,$/;"	e	enum:MetricIndex
I13	athena.hpp	/^enum MetricIndex {I00=0, I01=1, I02=2, I03=3, I11=4, I12=5, I13=6, I22=7, I23=8, I33=9,$/;"	e	enum:MetricIndex
I22	athena.hpp	/^enum MetricIndex {I00=0, I01=1, I02=2, I03=3, I11=4, I12=5, I13=6, I22=7, I23=8, I33=9,$/;"	e	enum:MetricIndex
I23	athena.hpp	/^enum MetricIndex {I00=0, I01=1, I02=2, I03=3, I11=4, I12=5, I13=6, I22=7, I23=8, I33=9,$/;"	e	enum:MetricIndex
I33	athena.hpp	/^enum MetricIndex {I00=0, I01=1, I02=2, I03=3, I11=4, I12=5, I13=6, I22=7, I23=8, I33=9,$/;"	e	enum:MetricIndex
IA	athena.hpp	/^enum MagneticDiffusionIndex {IO=0, IH=1, IA=2};$/;"	e	enum:MagneticDiffusionIndex
IA1	utils/ran2.cpp	/^#define IA1 /;"	d	file:
IA1	utils/ran2.cpp	/^#undef IA1$/;"	d	file:
IA2	utils/ran2.cpp	/^#define IA2 /;"	d	file:
IA2	utils/ran2.cpp	/^#undef IA2$/;"	d	file:
IALRM	utils/utils.hpp	/^const int ITERM = 0, IINT = 1, IALRM = 2;$/;"	m	namespace:SignalHandler
IB1	athena.hpp	/^enum MagneticIndex {IB1=0, IB2=1, IB3=2};$/;"	e	enum:MagneticIndex
IB2	athena.hpp	/^enum MagneticIndex {IB1=0, IB2=1, IB3=2};$/;"	e	enum:MagneticIndex
IB3	athena.hpp	/^enum MagneticIndex {IB1=0, IB2=1, IB3=2};$/;"	e	enum:MagneticIndex
IBY	athena.hpp	/^enum PrimIndex {IVX=1, IVY=2, IVZ=3, IPR=4, IBY=(NHYDRO), IBZ=((NHYDRO)+1)};$/;"	e	enum:PrimIndex
IBZ	athena.hpp	/^enum PrimIndex {IVX=1, IVY=2, IVZ=3, IPR=4, IBY=(NHYDRO), IBZ=((NHYDRO)+1)};$/;"	e	enum:PrimIndex
IDN	athena.hpp	/^enum ConsIndex {IDN=0, IM1=1, IM2=2, IM3=3, IEN=4};$/;"	e	enum:ConsIndex
IEN	athena.hpp	/^enum ConsIndex {IDN=0, IM1=1, IM2=2, IM3=3, IEN=4};$/;"	e	enum:ConsIndex
IH	athena.hpp	/^enum MagneticDiffusionIndex {IO=0, IH=1, IA=2};$/;"	e	enum:MagneticDiffusionIndex
IINT	utils/utils.hpp	/^const int ITERM = 0, IINT = 1, IALRM = 2;$/;"	m	namespace:SignalHandler
IM1	athena.hpp	/^enum ConsIndex {IDN=0, IM1=1, IM2=2, IM3=3, IEN=4};$/;"	e	enum:ConsIndex
IM2	athena.hpp	/^enum ConsIndex {IDN=0, IM1=1, IM2=2, IM3=3, IEN=4};$/;"	e	enum:ConsIndex
IM3	athena.hpp	/^enum ConsIndex {IDN=0, IM1=1, IM2=2, IM3=3, IEN=4};$/;"	e	enum:ConsIndex
IMM1	utils/ran2.cpp	/^#define IMM1 /;"	d	file:
IMM1	utils/ran2.cpp	/^#undef IMM1$/;"	d	file:
IMR1	utils/ran2.cpp	/^#define IMR1 /;"	d	file:
IMR1	utils/ran2.cpp	/^#undef IMR1$/;"	d	file:
IMR2	utils/ran2.cpp	/^#define IMR2 /;"	d	file:
IMR2	utils/ran2.cpp	/^#undef IMR2$/;"	d	file:
INNER_X1	bvals/bvals_interfaces.hpp	/^      INNER_X1 __attribute__((deprecated)),$/;"	e	enum:__anon1
INNER_X1	bvals/bvals_interfaces.hpp	/^enum {FACE_UNDEF = -1, INNER_X1, OUTER_X1, INNER_X2, OUTER_X2, INNER_X3, OUTER_X3};$/;"	e	enum:__anon3
INNER_X2	bvals/bvals_interfaces.hpp	/^      INNER_X2 __attribute__((deprecated)),$/;"	e	enum:__anon1
INNER_X2	bvals/bvals_interfaces.hpp	/^enum {FACE_UNDEF = -1, INNER_X1, OUTER_X1, INNER_X2, OUTER_X2, INNER_X3, OUTER_X3};$/;"	e	enum:__anon3
INNER_X3	bvals/bvals_interfaces.hpp	/^      INNER_X3 __attribute__((deprecated)),$/;"	e	enum:__anon1
INNER_X3	bvals/bvals_interfaces.hpp	/^enum {FACE_UNDEF = -1, INNER_X1, OUTER_X1, INNER_X2, OUTER_X2, INNER_X3, OUTER_X3};$/;"	e	enum:__anon3
INPUTS_ASCII_TABLE_READER_HPP_	inputs/ascii_table_reader.hpp	/^#define INPUTS_ASCII_TABLE_READER_HPP_$/;"	d
INPUTS_HDF5_READER_HPP_	inputs/hdf5_reader.hpp	/^#define INPUTS_HDF5_READER_HPP_$/;"	d
IO	athena.hpp	/^enum MagneticDiffusionIndex {IO=0, IH=1, IA=2};$/;"	e	enum:MagneticDiffusionIndex
IOWrapper	outputs/io_wrapper.hpp	/^  IOWrapper() : fh_(nullptr), comm_(MPI_COMM_WORLD) {}$/;"	f	class:IOWrapper
IOWrapper	outputs/io_wrapper.hpp	/^class IOWrapper {$/;"	c
IPR	athena.hpp	/^enum PrimIndex {IVX=1, IVY=2, IVZ=3, IPR=4, IBY=(NHYDRO), IBZ=((NHYDRO)+1)};$/;"	e	enum:PrimIndex
IQ1	utils/ran2.cpp	/^#define IQ1 /;"	d	file:
IQ1	utils/ran2.cpp	/^#undef IQ1$/;"	d	file:
IQ2	utils/ran2.cpp	/^#define IQ2 /;"	d	file:
IQ2	utils/ran2.cpp	/^#undef IQ2$/;"	d	file:
IR1	utils/ran2.cpp	/^#define IR1 /;"	d	file:
IR1	utils/ran2.cpp	/^#undef IR1$/;"	d	file:
IR2	utils/ran2.cpp	/^#define IR2 /;"	d	file:
IR2	utils/ran2.cpp	/^#undef IR2$/;"	d	file:
ITERM	utils/utils.hpp	/^const int ITERM = 0, IINT = 1, IALRM = 2;$/;"	m	namespace:SignalHandler
IVX	athena.hpp	/^enum PrimIndex {IVX=1, IVY=2, IVZ=3, IPR=4, IBY=(NHYDRO), IBZ=((NHYDRO)+1)};$/;"	e	enum:PrimIndex
IVY	athena.hpp	/^enum PrimIndex {IVX=1, IVY=2, IVZ=3, IPR=4, IBY=(NHYDRO), IBZ=((NHYDRO)+1)};$/;"	e	enum:PrimIndex
IVZ	athena.hpp	/^enum PrimIndex {IVX=1, IVY=2, IVZ=3, IPR=4, IBY=(NHYDRO), IBZ=((NHYDRO)+1)};$/;"	e	enum:PrimIndex
InflowBoundary	pgen/gr_torus.cpp	/^void InflowBoundary(MeshBlock *pmb, Coordinates *pcoord, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
InitBoundaryData	bvals/bvals_var.cpp	/^void BoundaryVariable::InitBoundaryData(BoundaryData<> &bd, BoundaryQuantity type) {$/;"	f	class:BoundaryVariable
InitBoundaryData	bvals/cc/mg/bvals_mg.cpp	/^void MGBoundaryValues::InitBoundaryData(BoundaryQuantity type) {$/;"	f	class:MGBoundaryValues
InitBoundaryData	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::InitBoundaryData($/;"	f	class:OrbitalBoundaryCommunication
InitEosConstants	eos/general/eos_table.cpp	/^void EquationOfState::InitEosConstants(ParameterInput* pin) {$/;"	f	class:EquationOfState
InitEosConstants	eos/general/hydrogen.cpp	/^void EquationOfState::InitEosConstants(ParameterInput* pin) {$/;"	f	class:EquationOfState
InitEosConstants	eos/general/ideal.cpp	/^void EquationOfState::InitEosConstants(ParameterInput *pin) {$/;"	f	class:EquationOfState
InitEosConstants	eos/general/noop.cpp	/^void EquationOfState::InitEosConstants(ParameterInput *pin) {$/;"	f	class:EquationOfState
InitUserMeshBlockData	pgen/default_pgen.cpp	/^void __attribute__((weak)) MeshBlock::InitUserMeshBlockData(ParameterInput *pin) {$/;"	f	class:MeshBlock
InitUserMeshBlockData	pgen/disk_3d_mhd_dust.cpp	/^void MeshBlock::InitUserMeshBlockData(ParameterInput *pin)$/;"	f	class:MeshBlock
InitUserMeshBlockData	pgen/disk_VSI.cpp	/^void MeshBlock::InitUserMeshBlockData(ParameterInput *pin) {$/;"	f	class:MeshBlock
InitUserMeshBlockData	pgen/dusty_wave.cpp	/^void MeshBlock::InitUserMeshBlockData(ParameterInput *pin) {$/;"	f	class:MeshBlock
InitUserMeshBlockData	pgen/gr_torus.cpp	/^void MeshBlock::InitUserMeshBlockData(ParameterInput *pin) {$/;"	f	class:MeshBlock
InitUserMeshBlockData	pgen/inject_pebble_3D.cpp	/^void MeshBlock::InitUserMeshBlockData(ParameterInput *pin){$/;"	f	class:MeshBlock
InitUserMeshBlockData	pgen/linear_wave.cpp	/^void MeshBlock::InitUserMeshBlockData(ParameterInput *pin) {$/;"	f	class:MeshBlock
InitUserMeshData	pgen/blast.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/cpaw.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/default_pgen.cpp	/^void __attribute__((weak)) Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/disk.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/disk_3d_mhd_dust.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/disk_RWI_2D.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/disk_VSI.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/disk_dust_diffusion.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/disk_dust_drift.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/disk_planet_dust_cylindrical.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/disk_planet_dust_spherical.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/disk_streaming_cylindrical.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/disk_streaming_spherical.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/dmr.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/dmr_dust.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/dust_NSH.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/dust_collision.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/dust_collision_different_Ts.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/dust_diffusion.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/dust_inelastic_collision.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/dust_squaredrag.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/dusty_kh.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/dusty_shock.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/dusty_soundwave.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/dusty_wave.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/dusty_wave_1d.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/field_loop_poles.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/from_array.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/gr_bondi.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/gr_geodesic_infall.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/gr_linear_wave.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/gr_mhd_inflow.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/gr_torus.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/hb3.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/hgb.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/inject_pebble_3D.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/jeans.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/jet.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/jgg.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/kh.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/kh_dust.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/linear_wave.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/magnoh.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/mignone_advection.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/noh.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/poisson.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/resist.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/rt.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/scalar_diff.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/shk_cloud.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/slotted_cylinder.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/ssheet.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/ssheet_RWI_dust.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/ssheet_planet_dust.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/strat.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/streaming_eigen.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/streaming_eigen_2dust.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/streaming_nonlinear.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/streaming_stratified.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/turb.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/visc.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/visc_dustfluids.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitUserMeshData	pgen/visc_scalars.cpp	/^void Mesh::InitUserMeshData(ParameterInput *pin) {$/;"	f	class:Mesh
InitWithShallowSlice	athena_arrays.hpp	/^void AthenaArray<T>::InitWithShallowSlice(AthenaArray<T> &src, const int dim,$/;"	f	class:AthenaArray
InitialCosineProfile	pgen/mignone_advection.cpp	/^Real InitialCosineProfile(Real x2) {$/;"	f	namespace:__anon150
InitialCosineSphericalIntegrand	pgen/mignone_advection.cpp	/^Real InitialCosineSphericalIntegrand(Real x2) {$/;"	f	namespace:__anon150
InitialGaussianCylindricalIntegrand	pgen/mignone_advection.cpp	/^Real InitialGaussianCylindricalIntegrand(Real x1) {$/;"	f	namespace:__anon150
InitialGaussianProfile	pgen/mignone_advection.cpp	/^Real InitialGaussianProfile(Real x1) {$/;"	f	namespace:__anon150
InitialGaussianSphericalIntegrand	pgen/mignone_advection.cpp	/^Real InitialGaussianSphericalIntegrand(Real x1) {$/;"	f	namespace:__anon150
Initialize	mesh/mesh.cpp	/^void Mesh::Initialize(int res_flag, ParameterInput *pin) {$/;"	f	class:Mesh
InitializeFFTBlock	fft/fft_driver.cpp	/^void FFTDriver::InitializeFFTBlock(bool set_norm) {$/;"	f	class:FFTDriver
InitializeMPI	fft/athena_fft.cpp	/^void FFTBlock::InitializeMPI() {$/;"	f	class:FFTBlock
InitializeOrbitalAdvection	orbital_advection/orbital_advection.cpp	/^void OrbitalAdvection::InitializeOrbitalAdvection() {$/;"	f	class:OrbitalAdvection
InnerWaveDamping	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^void InnerWaveDamping(MeshBlock *pmb, const Real time, const Real dt, int il, int iu,$/;"	f
InnerWaveDamping	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^void InnerWaveDamping(MeshBlock *pmb, const Real time, const Real dt, int il, int iu,$/;"	f
InnerWaveDampingDust	pgen/disk_VSI.cpp	/^void InnerWaveDampingDust(MeshBlock *pmb, const Real time, const Real dt, int il, int iu,$/;"	f
InnerWaveDampingDust	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^void InnerWaveDampingDust(MeshBlock *pmb, const Real time, const Real dt, int il, int iu,$/;"	f
InnerWaveDampingDust	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^void InnerWaveDampingDust(MeshBlock *pmb, const Real time, const Real dt, int il, int iu,$/;"	f
InnerWaveDampingGas	pgen/disk_VSI.cpp	/^void InnerWaveDampingGas(MeshBlock *pmb, const Real time, const Real dt, int il, int iu,$/;"	f
InnerWaveDampingGas	pgen/disk_planet_dust_cylindrical.cpp	/^void InnerWaveDampingGas(MeshBlock *pmb, const Real time, const Real dt, int il, int iu,$/;"	f
InnerWaveDampingGas	pgen/disk_planet_dust_spherical.cpp	/^void InnerWaveDampingGas(MeshBlock *pmb, const Real time, const Real dt, int il, int iu,$/;"	f
InnerWavedamping	pgen/disk_dust_diffusion.cpp	/^void InnerWavedamping(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon71
InnerWavedamping	pgen/disk_dust_drift.cpp	/^void InnerWavedamping(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon65
InnerWavedamping	pgen/disk_streaming_cylindrical.cpp	/^void InnerWavedamping(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon55
InnerWavedamping	pgen/disk_streaming_spherical.cpp	/^void InnerWavedamping(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon76
InnerWavedamping	pgen/dust_diffusion.cpp	/^void InnerWavedamping(MeshBlock *pmb, const Real time, const Real dt,$/;"	f	namespace:__anon118
InnerX1_NSH	pgen/disk_dust_drift.cpp	/^void InnerX1_NSH(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
InnerX1_NSH	pgen/disk_streaming_cylindrical.cpp	/^void InnerX1_NSH(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
InnerX1_NSH	pgen/disk_streaming_spherical.cpp	/^void InnerX1_NSH(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
InnerX2_NSH	pgen/disk_streaming_spherical.cpp	/^void InnerX2_NSH(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
Inner_Dust_Damping_Flag	pgen/disk_VSI.cpp	/^Inner_Dust_Damping_Flag, Outer_Dust_Damping_Flag,$/;"	m	namespace:__anon133	file:
Inner_Gas_Damping_Flag	pgen/disk_VSI.cpp	/^bool Inner_Gas_Damping_Flag, Outer_Gas_Damping_Flag, Theta_Gas_Damping_Flag,$/;"	m	namespace:__anon133	file:
InputBlock	parameter_input.hpp	/^class InputBlock {$/;"	c
InputLine	parameter_input.hpp	/^struct InputLine {$/;"	s
IntegrandFinal	pgen/mignone_advection.cpp	/^Real (*IntegrandFinal)(Real x1);$/;"	m	namespace:__anon149	file:
IntegrandInitial	pgen/mignone_advection.cpp	/^Real (*IntegrandInitial)(Real x1);$/;"	m	namespace:__anon149	file:
IntegrateDustFluids	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::IntegrateDustFluids(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
IntegrateField	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::IntegrateField(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
IntegrateField_STS	task_list/sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::IntegrateField_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
IntegrateHydro	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::IntegrateHydro(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
IntegrateHydro_STS	task_list/sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::IntegrateHydro_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
IntegrateScalars	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::IntegrateScalars(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
IntegrateScalars_STS	task_list/sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::IntegrateScalars_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
IntegratedA1	pgen/gr_torus.cpp	/^Real IntegratedA1(Real x1_m, Real x1_p, Real x2, Real x3) {$/;"	f	namespace:__anon49
IntegratedA2	pgen/gr_torus.cpp	/^Real IntegratedA2(Real x1, Real x2_m, Real x2_p, Real x3) {$/;"	f	namespace:__anon50
IntegratedA3	pgen/gr_torus.cpp	/^Real IntegratedA3(Real x1, Real x2, Real x3_m, Real x3_p) {$/;"	f	namespace:__anon51
IntegratorWeight	task_list/task_list.hpp	/^  struct IntegratorWeight {$/;"	s	class:TimeIntegratorTaskList
InterpTable2D	utils/interp_table.cpp	/^InterpTable2D::InterpTable2D(const int nvar, const int nx2, const int nx1) {$/;"	f	class:InterpTable2D
InterpTable2D	utils/interp_table.hpp	/^class InterpTable2D {$/;"	c
Inverse	dustfluids/dustfluids_drags/inversion.cpp	/^void DustGasDrag::Inverse(const AthenaArray<Real> &index_vector, const AthenaArray<Real> &lu_matrix,$/;"	f	class:DustGasDrag
IsAllocated	athena_arrays.hpp	/^  bool IsAllocated() { return (state_ == DataStatus::allocated); }$/;"	f	class:AthenaArray
IsBigEndian	outputs/vtk.cpp	/^int IsBigEndian() {$/;"	f
IsBigEndianOutput	pgen/disk_VSI.cpp	/^int IsBigEndianOutput() {$/;"	f
IsEmpty	athena_arrays.hpp	/^  bool IsEmpty() { return (state_ == DataStatus::empty); }$/;"	f	class:AthenaArray
IsPole	coordinates/coordinates.cpp	/^bool Coordinates::IsPole(int j) {$/;"	f	class:Coordinates
IsShallowSlice	athena_arrays.hpp	/^  bool IsShallowSlice() { return (state_ == DataStatus::shallow_slice); }$/;"	f	class:AthenaArray
IsUnfinished	task_list/task_id.cpp	/^bool TaskID::IsUnfinished(const TaskID& id) const {$/;"	f	class:TaskID
Isothermal_Flag	pgen/disk_RWI_2D.cpp	/^bool Damping_Flag, Isothermal_Flag, Bump_Flag;$/;"	m	namespace:__anon101	file:
Isothermal_Flag	pgen/disk_VSI.cpp	/^Isothermal_Flag, RadiativeConduction_Flag;$/;"	m	namespace:__anon133	file:
Isothermal_Flag	pgen/disk_dust_diffusion.cpp	/^bool Damping_Flag, Isothermal_Flag, Bump_Flag;$/;"	m	namespace:__anon70	file:
Isothermal_Flag	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^bool Damping_Flag, Isothermal_Flag, MassTransfer_Flag,$/;"	m	namespace:__anon68	file:
Isothermal_Flag	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^bool Damping_Flag, Isothermal_Flag, MassTransfer_Flag,$/;"	m	namespace:__anon109	file:
Isothermal_Flag	pgen/disk_planet_dust_cylindrical.cpp	/^bool Damping_Flag, Isothermal_Flag, MassTransfer_Flag,$/;"	m	namespace:__anon99	file:
Isothermal_Flag	pgen/disk_planet_dust_spherical.cpp	/^bool Damping_Flag, Isothermal_Flag, MassTransfer_Flag,$/;"	m	namespace:__anon113	file:
Isothermal_Flag	pgen/dust_diffusion.cpp	/^bool Damping_Flag, Isothermal_Flag;$/;"	m	namespace:__anon117	file:
JetInnerX1	pgen/jet.cpp	/^void JetInnerX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f
K_para	pgen/dusty_shock.cpp	/^Real K_para[NDUSTFLUIDS];$/;"	m	namespace:__anon120	file:
Kai0	pgen/dust_NSH.cpp	/^Real kappap, kappap2, AN(0.0), BN(0.0), Psi(0.0), Kai0;$/;"	m	namespace:__anon103	file:
Kai0	pgen/ssheet_RWI_dust.cpp	/^kappap, kappap2, Kai0, etaVk, AN(0.0), BN(0.0), Psi(0.0), user_dt, time_drag, beta,$/;"	m	namespace:__anon90	file:
Kai0	pgen/ssheet_planet_dust.cpp	/^kappap, kappap2, Kai0, etaVk, AN, BN, Psi, time_drag, user_dt, rs, gmp, gMth, t_planet_growth,$/;"	m	namespace:__anon111	file:
Kai0	pgen/streaming_eigen.cpp	/^Real kappap, kappap2, AN(0.0), BN(0.0), Psi(0.0), Kai0;$/;"	m	namespace:__anon66	file:
Kai0	pgen/streaming_eigen_2dust.cpp	/^Real kappap, kappap2, AN(0.0), BN(0.0), Psi(0.0), Kai0;$/;"	m	namespace:__anon145	file:
Kai0	pgen/streaming_nonlinear.cpp	/^Real kappap, kappap2, AN(0.0), BN(0.0), Psi(0.0), Kai0;$/;"	m	namespace:__anon135	file:
Kai0	pgen/streaming_stratified.cpp	/^Real kappap, kappap2, AN(0.0), BN(0.0), Psi(0.0), Kai0;$/;"	m	namespace:__anon154	file:
Keplerian_interpolate	pgen/disk_dust_drift.cpp	/^void Keplerian_interpolate(const Real r_active, const Real r_ghost,$/;"	f	namespace:__anon65
Keplerian_interpolate	pgen/disk_streaming_cylindrical.cpp	/^void Keplerian_interpolate(const Real r_active, const Real r_ghost,$/;"	f	namespace:__anon55
Keplerian_interpolate	pgen/disk_streaming_spherical.cpp	/^void Keplerian_interpolate(const Real r_active, const Real r_ghost,$/;"	f	namespace:__anon76
Keplerian_velocity	pgen/disk_RWI_2D.cpp	/^Real Keplerian_velocity(const Real rad) {$/;"	f	namespace:__anon102
Keplerian_velocity	pgen/disk_dust_diffusion.cpp	/^Real Keplerian_velocity(const Real rad) {$/;"	f	namespace:__anon71
Keplerian_velocity	pgen/disk_dust_drift.cpp	/^Real Keplerian_velocity(const Real rad) {$/;"	f	namespace:__anon65
Keplerian_velocity	pgen/disk_streaming_cylindrical.cpp	/^Real Keplerian_velocity(const Real rad) {$/;"	f	namespace:__anon55
Keplerian_velocity	pgen/disk_streaming_spherical.cpp	/^Real Keplerian_velocity(const Real rad) {$/;"	f	namespace:__anon76
KerrSchild	coordinates/coordinates.hpp	/^class KerrSchild : public Coordinates {$/;"	c
KerrSchild	coordinates/kerr-schild.cpp	/^KerrSchild::KerrSchild(MeshBlock *pmb, ParameterInput *pin, bool flag)$/;"	f	class:KerrSchild
Kpar	pgen/streaming_eigen.cpp	/^Real Kpar, kx, ky, kz, omg_osi, s_grow;$/;"	m	namespace:__anon66	file:
Kpar	pgen/streaming_eigen_2dust.cpp	/^Real Kpar, kx, ky, kz, omg_osi, s_grow;$/;"	m	namespace:__anon145	file:
LLFNonTransforming	hydro/rsolvers/hydro/llf_rel.cpp	/^void LLFNonTransforming(MeshBlock *pmb, const int k, const int j,$/;"	f	namespace:__anon29
LLFNonTransforming	hydro/rsolvers/mhd/llf_mhd_rel.cpp	/^void LLFNonTransforming(MeshBlock *pmb, const int k, const int j, const int il,$/;"	f	namespace:__anon25
LLFTransforming	hydro/rsolvers/hydro/llf_rel.cpp	/^void LLFTransforming(MeshBlock *pmb, const int k, const int j,$/;"	f	namespace:__anon29
LLFTransforming	hydro/rsolvers/mhd/llf_mhd_rel.cpp	/^void LLFTransforming(MeshBlock *pmb, const int k, const int j,$/;"	f	namespace:__anon25
LUdecompose	dustfluids/dustfluids_drags/inversion.cpp	/^void DustGasDrag::LUdecompose(const AthenaArray<Real> &a_matrix,$/;"	f	class:DustGasDrag
Laplacian	coordinates/coordinates.cpp	/^void Coordinates::Laplacian(const AthenaArray<Real> &s, AthenaArray<Real> &delta_s,$/;"	f	class:Coordinates
LaplacianX1	coordinates/coordinates.cpp	/^void Coordinates::LaplacianX1(const AthenaArray<Real> &s, AthenaArray<Real> &delta_s,$/;"	f	class:Coordinates
LaplacianX1All	coordinates/coordinates.cpp	/^void Coordinates::LaplacianX1All(const AthenaArray<Real> &s, AthenaArray<Real> &delta_s,$/;"	f	class:Coordinates
LaplacianX2	coordinates/coordinates.cpp	/^void Coordinates::LaplacianX2(const AthenaArray<Real> &s, AthenaArray<Real> &delta_s,$/;"	f	class:Coordinates
LaplacianX2All	coordinates/coordinates.cpp	/^void Coordinates::LaplacianX2All(const AthenaArray<Real> &s, AthenaArray<Real> &delta_s,$/;"	f	class:Coordinates
LaplacianX3	coordinates/coordinates.cpp	/^void Coordinates::LaplacianX3(const AthenaArray<Real> &s, AthenaArray<Real> &delta_s,$/;"	f	class:Coordinates
LaplacianX3All	coordinates/coordinates.cpp	/^void Coordinates::LaplacianX3All(const AthenaArray<Real> &s, AthenaArray<Real> &delta_s,$/;"	f	class:Coordinates
LeftEigenmatrixDotVector	reconstruct/characteristic.cpp	/^void Reconstruction::LeftEigenmatrixDotVector($/;"	f	class:Reconstruction
Lesser	athena.hpp	/^  static bool Lesser(const LogicalLocation &left, const LogicalLocation &right) {$/;"	f	struct:LogicalLocation
Linearinterpolate	pgen/dust_diffusion.cpp	/^void Linearinterpolate(const Real x_ac0, const Real x_ac1, const Real y_ac0, const Real y_ac1,$/;"	f	namespace:__anon118
LoadBalancingAndAdaptiveMeshRefinement	mesh/amr_loadbalance.cpp	/^void Mesh::LoadBalancingAndAdaptiveMeshRefinement(ParameterInput *pin) {$/;"	f	class:Mesh
LoadBoundaryBufferSameLevel	bvals/cc/bvals_cc.cpp	/^int CellCenteredBoundaryVariable::LoadBoundaryBufferSameLevel(Real *buf,$/;"	f	class:CellCenteredBoundaryVariable
LoadBoundaryBufferSameLevel	bvals/fc/bvals_fc.cpp	/^int FaceCenteredBoundaryVariable::LoadBoundaryBufferSameLevel(Real *buf,$/;"	f	class:FaceCenteredBoundaryVariable
LoadBoundaryBufferToCoarser	bvals/cc/bvals_cc.cpp	/^int CellCenteredBoundaryVariable::LoadBoundaryBufferToCoarser(Real *buf,$/;"	f	class:CellCenteredBoundaryVariable
LoadBoundaryBufferToCoarser	bvals/fc/bvals_fc.cpp	/^int FaceCenteredBoundaryVariable::LoadBoundaryBufferToCoarser(Real *buf,$/;"	f	class:FaceCenteredBoundaryVariable
LoadBoundaryBufferToFiner	bvals/cc/bvals_cc.cpp	/^int CellCenteredBoundaryVariable::LoadBoundaryBufferToFiner(Real *buf,$/;"	f	class:CellCenteredBoundaryVariable
LoadBoundaryBufferToFiner	bvals/fc/bvals_fc.cpp	/^int FaceCenteredBoundaryVariable::LoadBoundaryBufferToFiner(Real *buf,$/;"	f	class:FaceCenteredBoundaryVariable
LoadDustFluidsBufferSameLevel	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::LoadDustFluidsBufferSameLevel($/;"	f	class:OrbitalBoundaryCommunication
LoadDustFluidsBufferToCoarser	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::LoadDustFluidsBufferToCoarser(Real *buf, int &p, int nb) {$/;"	f	class:OrbitalBoundaryCommunication
LoadDustFluidsBufferToFiner	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::LoadDustFluidsBufferToFiner(Real *buf, int &p, int nb) {$/;"	f	class:OrbitalBoundaryCommunication
LoadEMFShearingBoxBoundarySameLevel	bvals/fc/bvals_shear_emf.cpp	/^void FaceCenteredBoundaryVariable::LoadEMFShearingBoxBoundarySameLevel($/;"	f	class:FaceCenteredBoundaryVariable
LoadFieldBufferSameLevel	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::LoadFieldBufferSameLevel(Real *buf, int &p, int nb) {$/;"	f	class:OrbitalBoundaryCommunication
LoadFieldBufferToCoarser	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::LoadFieldBufferToCoarser(Real *buf, int &p, int nb) {$/;"	f	class:OrbitalBoundaryCommunication
LoadFieldBufferToFiner	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::LoadFieldBufferToFiner(Real *buf, int &p, int nb) {$/;"	f	class:OrbitalBoundaryCommunication
LoadFinestData	multigrid/multigrid.cpp	/^void Multigrid::LoadFinestData(const AthenaArray<Real> &src, int ns, int ngh) {$/;"	f	class:Multigrid
LoadFluxBoundaryBufferSameLevel	bvals/cc/dustdiffusion/flux_correction_dustdiffusion.cpp	/^int DustDiffusionBoundaryVariable::LoadFluxBoundaryBufferSameLevel(Real *buf,$/;"	f	class:DustDiffusionBoundaryVariable
LoadFluxBoundaryBufferSameLevel	bvals/cc/dustfluids/flux_correction_dustfluids.cpp	/^int DustFluidsBoundaryVariable::LoadFluxBoundaryBufferSameLevel(Real *buf,$/;"	f	class:DustFluidsBoundaryVariable
LoadFluxBoundaryBufferSameLevel	bvals/cc/flux_correction_cc.cpp	/^int CellCenteredBoundaryVariable::LoadFluxBoundaryBufferSameLevel(Real *buf,$/;"	f	class:CellCenteredBoundaryVariable
LoadFluxBoundaryBufferSameLevel	bvals/cc/hydro/flux_correction_hydro.cpp	/^int HydroBoundaryVariable::LoadFluxBoundaryBufferSameLevel(Real *buf,$/;"	f	class:HydroBoundaryVariable
LoadFluxBoundaryBufferSameLevel	bvals/fc/flux_correction_fc.cpp	/^int FaceCenteredBoundaryVariable::LoadFluxBoundaryBufferSameLevel($/;"	f	class:FaceCenteredBoundaryVariable
LoadFluxBoundaryBufferToCoarser	bvals/cc/flux_correction_cc.cpp	/^int CellCenteredBoundaryVariable::LoadFluxBoundaryBufferToCoarser(Real *buf,$/;"	f	class:CellCenteredBoundaryVariable
LoadFluxBoundaryBufferToCoarser	bvals/fc/flux_correction_fc.cpp	/^int FaceCenteredBoundaryVariable::LoadFluxBoundaryBufferToCoarser($/;"	f	class:FaceCenteredBoundaryVariable
LoadFluxBoundaryBufferToPolar	bvals/fc/flux_correction_fc.cpp	/^int FaceCenteredBoundaryVariable::LoadFluxBoundaryBufferToPolar($/;"	f	class:FaceCenteredBoundaryVariable
LoadFluxShearingBoxBoundarySameLevel	bvals/cc/bvals_shear_flux.cpp	/^void CellCenteredBoundaryVariable::LoadFluxShearingBoxBoundarySameLevel($/;"	f	class:CellCenteredBoundaryVariable
LoadFromFile	parameter_input.cpp	/^void ParameterInput::LoadFromFile(IOWrapper &input) {$/;"	f	class:ParameterInput
LoadFromStream	parameter_input.cpp	/^void ParameterInput::LoadFromStream(std::istream &is) {$/;"	f	class:ParameterInput
LoadHydroBufferSameLevel	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::LoadHydroBufferSameLevel(Real *buf, int &p, int nb) {$/;"	f	class:OrbitalBoundaryCommunication
LoadHydroBufferToCoarser	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::LoadHydroBufferToCoarser(Real *buf, int &p, int nb) {$/;"	f	class:OrbitalBoundaryCommunication
LoadHydroBufferToFiner	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::LoadHydroBufferToFiner(Real *buf, int &p, int nb) {$/;"	f	class:OrbitalBoundaryCommunication
LoadMultigridBoundaryBufferSameLevel	bvals/cc/mg/bvals_mg.cpp	/^int MGBoundaryValues::LoadMultigridBoundaryBufferSameLevel(Real *buf,$/;"	f	class:MGBoundaryValues
LoadMultigridBoundaryBufferToCoarser	bvals/cc/mg/bvals_mg.cpp	/^int MGBoundaryValues::LoadMultigridBoundaryBufferToCoarser(Real *buf,$/;"	f	class:MGBoundaryValues
LoadMultigridBoundaryBufferToCoarserFluxCons	bvals/cc/mg/bvals_mg.cpp	/^int MGGravityBoundaryValues::LoadMultigridBoundaryBufferToCoarserFluxCons(Real *buf,$/;"	f	class:MGGravityBoundaryValues
LoadMultigridBoundaryBufferToFiner	bvals/cc/mg/bvals_mg.cpp	/^int MGBoundaryValues::LoadMultigridBoundaryBufferToFiner(Real *buf,$/;"	f	class:MGBoundaryValues
LoadMultigridBoundaryBufferToFinerFluxCons	bvals/cc/mg/bvals_mg.cpp	/^int MGGravityBoundaryValues::LoadMultigridBoundaryBufferToFinerFluxCons(Real *buf,$/;"	f	class:MGGravityBoundaryValues
LoadOutputData	outputs/outputs.cpp	/^void OutputType::LoadOutputData(MeshBlock *pmb) {$/;"	f	class:OutputType
LoadScalarBufferSameLevel	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::LoadScalarBufferSameLevel($/;"	f	class:OrbitalBoundaryCommunication
LoadScalarBufferToCoarser	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::LoadScalarBufferToCoarser(Real *buf, int &p, int nb) {$/;"	f	class:OrbitalBoundaryCommunication
LoadScalarBufferToFiner	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::LoadScalarBufferToFiner(Real *buf, int &p, int nb) {$/;"	f	class:OrbitalBoundaryCommunication
LoadShearingBoxBoundarySameLevel	bvals/cc/bvals_shear_cc.cpp	/^void CellCenteredBoundaryVariable::LoadShearingBoxBoundarySameLevel($/;"	f	class:CellCenteredBoundaryVariable
LoadShearingBoxBoundarySameLevel	bvals/fc/bvals_shear_fc.cpp	/^void FaceCenteredBoundaryVariable::LoadShearingBoxBoundarySameLevel($/;"	f	class:FaceCenteredBoundaryVariable
LoadSource	fft/athena_fft.cpp	/^void FFTBlock::LoadSource(const AthenaArray<Real> &src, bool nu, int ngh,$/;"	f	class:FFTBlock
LoadSource	multigrid/multigrid.cpp	/^void Multigrid::LoadSource(const AthenaArray<Real> &src, int ns, int ngh, Real fac) {$/;"	f	class:Multigrid
LocalIsothermalEOS	pgen/disk_RWI_2D.cpp	/^void LocalIsothermalEOS(MeshBlock *pmb, int il, int iu, int jl,$/;"	f
LocalIsothermalEOS	pgen/disk_VSI.cpp	/^void LocalIsothermalEOS(MeshBlock *pmb, int il, int iu, int jl,$/;"	f
LocalIsothermalEOS	pgen/disk_dust_diffusion.cpp	/^void LocalIsothermalEOS(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon71
LocalIsothermalEOS	pgen/disk_dust_drift.cpp	/^void LocalIsothermalEOS(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon65
LocalIsothermalEOS	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^void LocalIsothermalEOS(MeshBlock *pmb, int il, int iu, int jl,$/;"	f
LocalIsothermalEOS	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^void LocalIsothermalEOS(MeshBlock *pmb, int il, int iu, int jl,$/;"	f
LocalIsothermalEOS	pgen/disk_planet_dust_cylindrical.cpp	/^void LocalIsothermalEOS(MeshBlock *pmb, int il, int iu, int jl,$/;"	f
LocalIsothermalEOS	pgen/disk_planet_dust_spherical.cpp	/^void LocalIsothermalEOS(MeshBlock *pmb, int il, int iu, int jl,$/;"	f
LocalIsothermalEOS	pgen/disk_streaming_cylindrical.cpp	/^void LocalIsothermalEOS(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon55
LocalIsothermalEOS	pgen/disk_streaming_spherical.cpp	/^void LocalIsothermalEOS(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon76
LocalIsothermalEOS	pgen/dust_diffusion.cpp	/^void LocalIsothermalEOS(MeshBlock *pmb, const Real time, const Real dt,$/;"	f	namespace:__anon118
Lock	parameter_input.cpp	/^void ParameterInput::Lock() {$/;"	f	class:ParameterInput
LogHAux	pgen/gr_torus.cpp	/^Real LogHAux(Real r, Real sth) {$/;"	f	namespace:__anon46
LogicalLocation	athena.hpp	/^struct LogicalLocation { \/\/ aggregate and POD type$/;"	s
LogicalLocationHash	multigrid/multigrid.hpp	/^struct LogicalLocationHash {$/;"	s
LoopInnerX1	pgen/field_loop_poles.cpp	/^void LoopInnerX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,FaceField &b,$/;"	f
LoopInnerX2	pgen/field_loop_poles.cpp	/^void LoopInnerX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,FaceField &b,$/;"	f
LoopOuterX1	pgen/field_loop_poles.cpp	/^void LoopOuterX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,FaceField &b,$/;"	f
LoopOuterX2	pgen/field_loop_poles.cpp	/^void LoopOuterX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,FaceField &b,$/;"	f
LowerVectorCell	coordinates/coordinates.hpp	/^  virtual void LowerVectorCell(Real a0, Real a1, Real a2, Real a3, int k, int j, int i,$/;"	f	class:Coordinates
LowerVectorCell	coordinates/gr_user.cpp	/^void GRUser::LowerVectorCell(Real a0, Real a1, Real a2, Real a3, int k, int j, int i,$/;"	f	class:GRUser
LowerVectorCell	coordinates/kerr-schild.cpp	/^void KerrSchild::LowerVectorCell(Real a0, Real a1, Real a2, Real a3, int k, int j, int i,$/;"	f	class:KerrSchild
LowerVectorCell	coordinates/minkowski.cpp	/^void Minkowski::LowerVectorCell(Real a0, Real a1, Real a2, Real a3, int k, int j,$/;"	f	class:Minkowski
LowerVectorCell	coordinates/schwarzschild.cpp	/^void Schwarzschild::LowerVectorCell($/;"	f	class:Schwarzschild
LowerWaveDampingGas	pgen/disk_VSI.cpp	/^void LowerWaveDampingGas(MeshBlock *pmb, const Real time, const Real dt, int il, int iu,$/;"	f
LowerZ	pgen/streaming_stratified.cpp	/^void LowerZ(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df, FaceField &b,$/;"	f	namespace:__anon155
Lx	fft/athena_fft.hpp	/^  Real Lx[3];$/;"	m	class:AthenaFFTIndex
Lx	pgen/hgb.cpp	/^Real Lx, Ly, Lz; \/\/ root grid size, global to share with output functions$/;"	m	namespace:__anon115	file:
Lx	pgen/jgg.cpp	/^Real Lx, Ly, Lz; \/\/ root grid size, global to share with output functions$/;"	m	namespace:__anon123	file:
Ly	pgen/hgb.cpp	/^Real Lx, Ly, Lz; \/\/ root grid size, global to share with output functions$/;"	m	namespace:__anon115	file:
Ly	pgen/jgg.cpp	/^Real Lx, Ly, Lz; \/\/ root grid size, global to share with output functions$/;"	m	namespace:__anon123	file:
Lz	pgen/hgb.cpp	/^Real Lx, Ly, Lz; \/\/ root grid size, global to share with output functions$/;"	m	namespace:__anon115	file:
Lz	pgen/jgg.cpp	/^Real Lx, Ly, Lz; \/\/ root grid size, global to share with output functions$/;"	m	namespace:__anon123	file:
MAGNETIC_FIELDS_ENABLED	defs.hpp	/^#define MAGNETIC_FIELDS_ENABLED /;"	d
MAX	fft/plimpton/fft_2d.cpp	/^#define MAX(/;"	d	file:
MAX	fft/plimpton/fft_3d.cpp	/^#define MAX(/;"	d	file:
MAX	fft/plimpton/remap_2d.cpp	/^#define MAX(/;"	d	file:
MAX	fft/plimpton/remap_3d.cpp	/^#define MAX(/;"	d	file:
MAX_NREGISTER	defs.hpp	/^#define MAX_NREGISTER /;"	d
MAX_NSTAGE	defs.hpp	/^#define MAX_NSTAGE /;"	d
MAX_RANK_FILE	inputs/hdf5_reader.hpp	/^#define MAX_RANK_FILE /;"	d
MAX_RANK_MEM	inputs/hdf5_reader.hpp	/^#define MAX_RANK_MEM /;"	d
MESH_MESHBLOCK_TREE_HPP_	mesh/meshblock_tree.hpp	/^#define MESH_MESHBLOCK_TREE_HPP_$/;"	d
MESH_MESH_HPP_	mesh/mesh.hpp	/^#define MESH_MESH_HPP_$/;"	d
MESH_MESH_REFINEMENT_HPP_	mesh/mesh_refinement.hpp	/^#define MESH_MESH_REFINEMENT_HPP_$/;"	d
MGBoundaryFunction_	bvals/cc/mg/bvals_mg.hpp	/^  MGBoundaryFunc MGBoundaryFunction_[6];$/;"	m	class:MGBoundaryValues
MGBoundaryFunction_	multigrid/multigrid.hpp	/^  MGBoundaryFunc MGBoundaryFunction_[6];$/;"	m	class:MultigridDriver
MGBoundaryValues	bvals/cc/mg/bvals_mg.cpp	/^MGBoundaryValues::MGBoundaryValues(Multigrid *pmg, BoundaryFlag *input_bcs)$/;"	f	class:MGBoundaryValues
MGBoundaryValues	bvals/cc/mg/bvals_mg.hpp	/^class MGBoundaryValues : public BoundaryBase {$/;"	c
MGGravity	gravity/mg_gravity.cpp	/^MGGravity::MGGravity(MultigridDriver *pmd, MeshBlock *pmb) : Multigrid(pmd, pmb, 1, 1) {$/;"	f	class:MGGravity
MGGravity	gravity/mg_gravity.hpp	/^class MGGravity : public Multigrid {$/;"	c
MGGravityBoundaryFunction_	mesh/mesh.hpp	/^  MGBoundaryFunc MGGravityBoundaryFunction_[6];$/;"	m	class:Mesh
MGGravityBoundaryValues	bvals/cc/mg/bvals_mg.hpp	/^  MGGravityBoundaryValues(Multigrid *pmg, BoundaryFlag *input_bcs)$/;"	f	class:MGGravityBoundaryValues
MGGravityBoundaryValues	bvals/cc/mg/bvals_mg.hpp	/^class MGGravityBoundaryValues : public MGBoundaryValues {$/;"	c
MGGravityDriver	gravity/mg_gravity.cpp	/^MGGravityDriver::MGGravityDriver(Mesh *pm, ParameterInput *pin)$/;"	f	class:MGGravityDriver
MGGravityDriver	gravity/mg_gravity.hpp	/^class MGGravityDriver : public MultigridDriver {$/;"	c
MGNormType	multigrid/multigrid.hpp	/^enum class MGNormType {max, l1, l2};$/;"	c
MGOctet	multigrid/multigrid.hpp	/^struct MGOctet {$/;"	s
MGPeriodicInnerX1	multigrid/mgbval_periodic.cpp	/^void MGPeriodicInnerX1(AthenaArray<Real> &dst, Real time, int nvar,$/;"	f
MGPeriodicInnerX2	multigrid/mgbval_periodic.cpp	/^void MGPeriodicInnerX2(AthenaArray<Real> &dst, Real time, int nvar,$/;"	f
MGPeriodicInnerX3	multigrid/mgbval_periodic.cpp	/^void MGPeriodicInnerX3(AthenaArray<Real> &dst, Real time, int nvar,$/;"	f
MGPeriodicOuterX1	multigrid/mgbval_periodic.cpp	/^void MGPeriodicOuterX1(AthenaArray<Real> &dst, Real time, int nvar,$/;"	f
MGPeriodicOuterX2	multigrid/mgbval_periodic.cpp	/^void MGPeriodicOuterX2(AthenaArray<Real> &dst, Real time, int nvar,$/;"	f
MGPeriodicOuterX3	multigrid/mgbval_periodic.cpp	/^void MGPeriodicOuterX3(AthenaArray<Real> &dst, Real time, int nvar,$/;"	f
MGTask	task_list/mg_task_list.hpp	/^struct MGTask {$/;"	s
MGVariable	multigrid/multigrid.hpp	/^enum class MGVariable {src, u};$/;"	c
MGZeroFixedInnerX1	multigrid/mgbval_zerofixed.cpp	/^void MGZeroFixedInnerX1(AthenaArray<Real> &dst, Real time, int nvar,$/;"	f
MGZeroFixedInnerX2	multigrid/mgbval_zerofixed.cpp	/^void MGZeroFixedInnerX2(AthenaArray<Real> &dst, Real time, int nvar,$/;"	f
MGZeroFixedInnerX3	multigrid/mgbval_zerofixed.cpp	/^void MGZeroFixedInnerX3(AthenaArray<Real> &dst, Real time, int nvar,$/;"	f
MGZeroFixedOuterX1	multigrid/mgbval_zerofixed.cpp	/^void MGZeroFixedOuterX1(AthenaArray<Real> &dst, Real time, int nvar,$/;"	f
MGZeroFixedOuterX2	multigrid/mgbval_zerofixed.cpp	/^void MGZeroFixedOuterX2(AthenaArray<Real> &dst, Real time, int nvar,$/;"	f
MGZeroFixedOuterX3	multigrid/mgbval_zerofixed.cpp	/^void MGZeroFixedOuterX3(AthenaArray<Real> &dst, Real time, int nvar,$/;"	f
MGZeroGradientInnerX1	multigrid/mgbval_zerograd.cpp	/^void MGZeroGradientInnerX1(AthenaArray<Real> &dst, Real time, int nvar,$/;"	f
MGZeroGradientInnerX2	multigrid/mgbval_zerograd.cpp	/^void MGZeroGradientInnerX2(AthenaArray<Real> &dst, Real time, int nvar,$/;"	f
MGZeroGradientInnerX3	multigrid/mgbval_zerograd.cpp	/^void MGZeroGradientInnerX3(AthenaArray<Real> &dst, Real time, int nvar,$/;"	f
MGZeroGradientOuterX1	multigrid/mgbval_zerograd.cpp	/^void MGZeroGradientOuterX1(AthenaArray<Real> &dst, Real time, int nvar,$/;"	f
MGZeroGradientOuterX2	multigrid/mgbval_zerograd.cpp	/^void MGZeroGradientOuterX2(AthenaArray<Real> &dst, Real time, int nvar,$/;"	f
MGZeroGradientOuterX3	multigrid/mgbval_zerograd.cpp	/^void MGZeroGradientOuterX3(AthenaArray<Real> &dst, Real time, int nvar,$/;"	f
MIN	fft/plimpton/fft_2d.cpp	/^#define MIN(/;"	d	file:
MIN	fft/plimpton/fft_3d.cpp	/^#define MIN(/;"	d	file:
MIN	fft/plimpton/remap_2d.cpp	/^#define MIN(/;"	d	file:
MIN	fft/plimpton/remap_3d.cpp	/^#define MIN(/;"	d	file:
MPI_ATHENA_REAL	athena.hpp	/^#define MPI_ATHENA_REAL /;"	d
MPI_COMM_FFT	fft/athena_fft.hpp	/^  MPI_Comm MPI_COMM_FFT;$/;"	m	class:FFTBlock::FFTDriver
MPI_COMM_MULTIGRID	multigrid/multigrid.hpp	/^  MPI_Comm MPI_COMM_MULTIGRID;$/;"	m	class:MultigridDriver
MPI_PARALLEL	defs.hpp	/^#define MPI_PARALLEL$/;"	d
MULTIGRID_MULTIGRID_HPP_	multigrid/multigrid.hpp	/^#define MULTIGRID_MULTIGRID_HPP_$/;"	d
MagneticDiffusionIndex	athena.hpp	/^enum MagneticDiffusionIndex {IO=0, IH=1, IA=2};$/;"	g
MagneticFieldConfigs	pgen/gr_torus.cpp	/^enum class MagneticFieldConfigs {density, loops};$/;"	c	file:
MagneticIndex	athena.hpp	/^enum MagneticIndex {IB1=0, IB2=1, IB3=2};$/;"	g
MakeOutputs	outputs/outputs.cpp	/^void Outputs::MakeOutputs(Mesh *pm, ParameterInput *pin, bool wtflag) {$/;"	f	class:Outputs
MakeXDMF	outputs/athena_hdf5.cpp	/^void ATHDF5Output::MakeXDMF() {$/;"	f	class:ATHDF5Output
MassTransferWithinHill	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^void MassTransferWithinHill(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon69
MassTransferWithinHill	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^void MassTransferWithinHill(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon110
MassTransferWithinHill	pgen/disk_planet_dust_cylindrical.cpp	/^void MassTransferWithinHill(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon100
MassTransferWithinHill	pgen/disk_planet_dust_spherical.cpp	/^void MassTransferWithinHill(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon114
MassTransfer_Flag	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^bool Damping_Flag, Isothermal_Flag, MassTransfer_Flag,$/;"	m	namespace:__anon68	file:
MassTransfer_Flag	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^bool Damping_Flag, Isothermal_Flag, MassTransfer_Flag,$/;"	m	namespace:__anon109	file:
MassTransfer_Flag	pgen/disk_planet_dust_cylindrical.cpp	/^bool Damping_Flag, Isothermal_Flag, MassTransfer_Flag,$/;"	m	namespace:__anon99	file:
MassTransfer_Flag	pgen/disk_planet_dust_spherical.cpp	/^bool Damping_Flag, Isothermal_Flag, MassTransfer_Flag,$/;"	m	namespace:__anon113	file:
MaxV2	pgen/dusty_wave.cpp	/^Real MaxV2(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon87
MaxV2	pgen/linear_wave.cpp	/^Real MaxV2(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon126
Mesh	mesh/mesh.cpp	/^Mesh::Mesh(ParameterInput *pin, IOWrapper& resfile, int mesh_test) :$/;"	f	class:Mesh
Mesh	mesh/mesh.cpp	/^Mesh::Mesh(ParameterInput *pin, int mesh_test) :$/;"	f	class:Mesh
Mesh	mesh/mesh.hpp	/^class Mesh {$/;"	c
MeshBlock	mesh/mesh.hpp	/^class MeshBlock {$/;"	c
MeshBlock	mesh/meshblock.cpp	/^MeshBlock::MeshBlock(int igid, int ilid, LogicalLocation iloc, RegionSize input_block,$/;"	f	class:MeshBlock
MeshBlock	mesh/meshblock.cpp	/^MeshBlock::MeshBlock(int igid, int ilid, Mesh *pm, ParameterInput *pin,$/;"	f	class:MeshBlock
MeshBlockTree	mesh/meshblock_tree.cpp	/^MeshBlockTree::MeshBlockTree(Mesh* pmesh) : pleaf_(nullptr), gid_(-1) {$/;"	f	class:MeshBlockTree
MeshBlockTree	mesh/meshblock_tree.cpp	/^MeshBlockTree::MeshBlockTree(MeshBlockTree *parent, int ox1, int ox2, int ox3)$/;"	f	class:MeshBlockTree
MeshBlockTree	mesh/meshblock_tree.hpp	/^class MeshBlockTree {$/;"	c
MeshGenerator_	mesh/mesh.hpp	/^  MeshGenFunc MeshGenerator_[3];$/;"	m	class:Mesh
MeshRefinement	mesh/mesh_refinement.cpp	/^MeshRefinement::MeshRefinement(MeshBlock *pmb, ParameterInput *pin) :$/;"	f	class:MeshRefinement
MeshRefinement	mesh/mesh_refinement.hpp	/^class MeshRefinement {$/;"	c
Metric	coordinates/coordinates.cpp	/^void Coordinates::Metric($/;"	f	class:Coordinates
MetricIndex	athena.hpp	/^enum MetricIndex {I00=0, I01=1, I02=2, I03=3, I11=4, I12=5, I13=6, I22=7, I23=8, I33=9,$/;"	g
Minkowski	coordinates/coordinates.hpp	/^class Minkowski : public Coordinates {$/;"	c
Minkowski	coordinates/minkowski.cpp	/^Minkowski::Minkowski(MeshBlock *pmb, ParameterInput *pin, bool flag)$/;"	f	class:Minkowski
ModifyFromCmdline	parameter_input.cpp	/^void ParameterInput::ModifyFromCmdline(int argc, char *argv[]) {$/;"	f	class:ParameterInput
Momentum_Diffusion_Flag	dustfluids/dustfluids_diffusion/dustfluids_diffusion.hpp	/^  bool Momentum_Diffusion_Flag;      \/\/ true or false, the flag of momentum diffusion of dust fluids$/;"	m	class:DustFluidsDiffusion
Multigrid	multigrid/multigrid.cpp	/^Multigrid::Multigrid(MultigridDriver *pmd, MeshBlock *pmb, int invar, int nghost) :$/;"	f	class:Multigrid
Multigrid	multigrid/multigrid.hpp	/^class Multigrid {$/;"	c
MultigridDriver	multigrid/multigrid.hpp	/^class MultigridDriver {$/;"	c
MultigridDriver	multigrid/multigrid_driver.cpp	/^MultigridDriver::MultigridDriver(Mesh *pm, MGBoundaryFunc *MGBoundary, int invar) :$/;"	f	class:MultigridDriver
MultigridTaskList	task_list/mg_task_list.hpp	/^  explicit MultigridTaskList(MultigridDriver *pmd) : ntasks(0), pmy_mgdriver_(pmd),$/;"	f	class:MultigridTaskList
MultigridTaskList	task_list/mg_task_list.hpp	/^class MultigridTaskList {$/;"	c
MultigridTaskNames	task_list/mg_task_list.hpp	/^namespace MultigridTaskNames {$/;"	n
Multiply	dustfluids/dustfluids_drags/multiplication.cpp	/^void DustGasDrag::Multiply(const AthenaArray<Real> &a_matrix,$/;"	f	class:DustGasDrag
Multiply	dustfluids/dustfluids_drags/multiplication.cpp	/^void DustGasDrag::Multiply(const Real a_num, AthenaArray<Real> &b_matrix) {$/;"	f	class:DustGasDrag
Multiply	dustfluids/dustfluids_drags/multiplication.cpp	/^void DustGasDrag::Multiply(const Real a_num, const AthenaArray<Real> &b_matrix,$/;"	f	class:DustGasDrag
MultiplyVector	dustfluids/dustfluids_drags/multiplication.cpp	/^void DustGasDrag::MultiplyVector(const AthenaArray<Real> &a_matrix,$/;"	f	class:DustGasDrag
MyDustDiffusivity	pgen/disk_RWI_2D.cpp	/^void MyDustDiffusivity(DustFluids *pdf, MeshBlock *pmb,$/;"	f	namespace:__anon102
MyDustDiffusivity	pgen/disk_VSI.cpp	/^void MyDustDiffusivity(DustFluids *pdf, MeshBlock *pmb,$/;"	f	namespace:__anon134
MyDustDiffusivity	pgen/disk_dust_diffusion.cpp	/^void MyDustDiffusivity(DustFluids *pdf, MeshBlock *pmb,$/;"	f	namespace:__anon71
MyDustDiffusivity	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^void MyDustDiffusivity(DustFluids *pdf, MeshBlock *pmb,$/;"	f	namespace:__anon69
MyDustDiffusivity	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^void MyDustDiffusivity(DustFluids *pdf, MeshBlock *pmb,$/;"	f	namespace:__anon110
MyDustDiffusivity	pgen/disk_planet_dust_cylindrical.cpp	/^void MyDustDiffusivity(DustFluids *pdf, MeshBlock *pmb,$/;"	f	namespace:__anon100
MyDustDiffusivity	pgen/disk_planet_dust_spherical.cpp	/^void MyDustDiffusivity(DustFluids *pdf, MeshBlock *pmb,$/;"	f	namespace:__anon114
MyDustDiffusivity	pgen/dmr_dust.cpp	/^void MyDustDiffusivity(DustFluids *pdf, MeshBlock *pmb,$/;"	f
MyDustDiffusivity	pgen/dust_diffusion.cpp	/^void MyDustDiffusivity(DustFluids *pdf, MeshBlock *pmb,$/;"	f	namespace:__anon118
MyDustDiffusivity	pgen/inject_pebble_3D.cpp	/^void MyDustDiffusivity(DustFluids *pdf, MeshBlock *pmb,$/;"	f	namespace:__anon63
MyDustDiffusivity	pgen/ssheet_RWI_dust.cpp	/^void MyDustDiffusivity(DustFluids *pdf, MeshBlock *pmb,$/;"	f	namespace:__anon91
MyDustDiffusivity	pgen/ssheet_planet_dust.cpp	/^void MyDustDiffusivity(DustFluids *pdf, MeshBlock *pmb,$/;"	f	namespace:__anon112
MyMeshSpacingX1	pgen/inject_pebble_3D.cpp	/^Real MyMeshSpacingX1(Real x, RegionSize rs){$/;"	f	namespace:__anon63
MySource	pgen/disk_3d_mhd_dust.cpp	/^void MySource(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon61
MySource	pgen/disk_RWI_2D.cpp	/^void MySource(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon102
MySource	pgen/disk_VSI.cpp	/^void MySource(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon134
MySource	pgen/disk_dust_diffusion.cpp	/^void MySource(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon71
MySource	pgen/disk_dust_drift.cpp	/^void MySource(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon65
MySource	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^void MySource(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon69
MySource	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^void MySource(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon110
MySource	pgen/disk_planet_dust_cylindrical.cpp	/^void MySource(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon100
MySource	pgen/disk_planet_dust_spherical.cpp	/^void MySource(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon114
MySource	pgen/disk_streaming_cylindrical.cpp	/^void MySource(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon55
MySource	pgen/disk_streaming_spherical.cpp	/^void MySource(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon76
MySource	pgen/dust_diffusion.cpp	/^void MySource(MeshBlock *pmb, const Real time, const Real dt,$/;"	f	namespace:__anon118
MySource	pgen/inject_pebble_3D.cpp	/^void MySource(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon63
MySource	pgen/ssheet_RWI_dust.cpp	/^void MySource(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon91
MySource	pgen/ssheet_planet_dust.cpp	/^void MySource(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon112
MyStoppingTime	pgen/disk_3d_mhd_dust.cpp	/^void MyStoppingTime(MeshBlock *pmb, const Real time, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon61
MyStoppingTime	pgen/disk_RWI_2D.cpp	/^void MyStoppingTime(MeshBlock *pmb, const Real time, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon102
MyStoppingTime	pgen/disk_VSI.cpp	/^void MyStoppingTime(MeshBlock *pmb, const Real time, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon134
MyStoppingTime	pgen/disk_dust_diffusion.cpp	/^void MyStoppingTime(MeshBlock *pmb, const Real time, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon71
MyStoppingTime	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^void MyStoppingTime(MeshBlock *pmb, const Real time, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon69
MyStoppingTime	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^void MyStoppingTime(MeshBlock *pmb, const Real time, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon110
MyStoppingTime	pgen/disk_planet_dust_cylindrical.cpp	/^void MyStoppingTime(MeshBlock *pmb, const Real time, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon100
MyStoppingTime	pgen/disk_planet_dust_spherical.cpp	/^void MyStoppingTime(MeshBlock *pmb, const Real time, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon114
MyStoppingTime	pgen/disk_streaming_cylindrical.cpp	/^void MyStoppingTime(MeshBlock *pmb, const Real time, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon55
MyStoppingTime	pgen/disk_streaming_spherical.cpp	/^void MyStoppingTime(MeshBlock *pmb, const Real time, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon76
MyStoppingTime	pgen/dust_NSH.cpp	/^void MyStoppingTime(MeshBlock *pmb, const Real time, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon104
MyStoppingTime	pgen/dusty_shock.cpp	/^void MyStoppingTime(MeshBlock *pmb, const Real time, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon121
MyStoppingTime	pgen/inject_pebble_3D.cpp	/^void MyStoppingTime(MeshBlock *pmb, const Real time, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon63
MyStoppingTime	pgen/ssheet_RWI_dust.cpp	/^void MyStoppingTime(MeshBlock *pmb, const Real time, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon91
MyStoppingTime	pgen/ssheet_planet_dust.cpp	/^void MyStoppingTime(MeshBlock *pmb, const Real time, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon112
MyStoppingTime	pgen/streaming_eigen.cpp	/^void MyStoppingTime(MeshBlock *pmb, const Real time, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon67
MyStoppingTime	pgen/streaming_eigen_2dust.cpp	/^void MyStoppingTime(MeshBlock *pmb, const Real time, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon146
MyStoppingTime	pgen/streaming_nonlinear.cpp	/^void MyStoppingTime(MeshBlock *pmb, const Real time, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon136
MyStoppingTime	pgen/streaming_stratified.cpp	/^void MyStoppingTime(MeshBlock *pmb, const Real time, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon155
MyTimeStep	pgen/disk_3d_mhd_dust.cpp	/^Real MyTimeStep(MeshBlock *pmb)$/;"	f	namespace:__anon61
MyTimeStep	pgen/disk_dust_drift.cpp	/^Real MyTimeStep(MeshBlock *pmb)$/;"	f	namespace:__anon65
MyTimeStep	pgen/disk_streaming_cylindrical.cpp	/^Real MyTimeStep(MeshBlock *pmb)$/;"	f	namespace:__anon55
MyTimeStep	pgen/disk_streaming_spherical.cpp	/^Real MyTimeStep(MeshBlock *pmb)$/;"	f	namespace:__anon76
MyTimeStep	pgen/dust_collision.cpp	/^Real MyTimeStep(MeshBlock *pmb)$/;"	f	namespace:__anon153
MyTimeStep	pgen/dust_collision_different_Ts.cpp	/^Real MyTimeStep(MeshBlock *pmb)$/;"	f	namespace:__anon132
MyTimeStep	pgen/dust_diffusion.cpp	/^Real MyTimeStep(MeshBlock *pmb) {$/;"	f	namespace:__anon118
MyTimeStep	pgen/dust_inelastic_collision.cpp	/^Real MyTimeStep(MeshBlock *pmb) {$/;"	f	namespace:__anon144
MyTimeStep	pgen/dust_squaredrag.cpp	/^Real MyTimeStep(MeshBlock *pmb)$/;"	f	namespace:__anon142
MyTimeStep	pgen/dusty_shock.cpp	/^Real MyTimeStep(MeshBlock *pmb)$/;"	f	namespace:__anon121
MyTimeStep	pgen/dusty_soundwave.cpp	/^Real MyTimeStep(MeshBlock *pmb)$/;"	f	namespace:__anon106
NDIV	utils/ran2.cpp	/^#define NDIV /;"	d	file:
NDIV	utils/ran2.cpp	/^#undef NDIV$/;"	d	file:
NDUSTFLUIDS	defs.hpp	/^#define NDUSTFLUIDS /;"	d
NDUSTVARS	defs.hpp	/^#define NDUSTVARS /;"	d
NFIELD	defs.hpp	/^#define NFIELD /;"	d
NGHOST	defs.hpp	/^#define NGHOST /;"	d
NHISTORY_VARS	outputs/history.cpp	/^#define NHISTORY_VARS /;"	d	file:
NHYDRO	defs.hpp	/^#define NHYDRO /;"	d
NMETRIC	athena.hpp	/^                  NMETRIC=10};$/;"	e	enum:MetricIndex
NON_BAROTROPIC_EOS	defs.hpp	/^#define NON_BAROTROPIC_EOS /;"	d
NOT_DEBUG	defs.hpp	/^#define NOT_DEBUG$/;"	d
NO_FFT	defs.hpp	/^#define NO_FFT$/;"	d
NSCALARS	defs.hpp	/^#define NSCALARS /;"	d
NSPECIES	defs.hpp	/^#define NSPECIES /;"	d
NTAB	utils/ran2.cpp	/^#define NTAB /;"	d	file:
NTAB	utils/ran2.cpp	/^#undef NTAB$/;"	d	file:
NTRIANGULAR	athena.hpp	/^                    NTRIANGULAR=10};$/;"	e	enum:TriangleIndex
NWAVE	defs.hpp	/^#define NWAVE /;"	d
N_gl	pgen/mignone_advection.cpp	/^constexpr int N_gl = 12;$/;"	m	namespace:__anon149	file:
N_gl	pgen/slotted_cylinder.cpp	/^constexpr int N_gl = 12;$/;"	m	namespace:__anon82	file:
NeighborBlock	bvals/bvals_interfaces.hpp	/^struct NeighborBlock { \/\/ aggregate and POD type. Inheritance breaks standard-layout-> POD$/;"	s
NeighborConnect	bvals/bvals_interfaces.hpp	/^enum class NeighborConnect {none, face, edge, corner}; \/\/ degenerate\/shared part of block$/;"	c
NeighborIndexes	bvals/bvals_interfaces.hpp	/^struct NeighborIndexes { \/\/ aggregate and POD$/;"	s
NewAdvectionDt	dustfluids/new_blockdt_dustfluids.cpp	/^Real DustFluids::NewAdvectionDt() {$/;"	f	class:DustFluids
NewAthenaArray	athena_arrays.hpp	/^__attribute__((nothrow)) void AthenaArray<T>::NewAthenaArray(int nx1) {$/;"	f	class:AthenaArray
NewAthenaArray	athena_arrays.hpp	/^__attribute__((nothrow)) void AthenaArray<T>::NewAthenaArray(int nx2, int nx1) {$/;"	f	class:AthenaArray
NewAthenaArray	athena_arrays.hpp	/^__attribute__((nothrow)) void AthenaArray<T>::NewAthenaArray(int nx3, int nx2, int nx1) {$/;"	f	class:AthenaArray
NewAthenaArray	athena_arrays.hpp	/^__attribute__((nothrow)) void AthenaArray<T>::NewAthenaArray(int nx4, int nx3, int nx2,$/;"	f	class:AthenaArray
NewAthenaArray	athena_arrays.hpp	/^__attribute__((nothrow)) void AthenaArray<T>::NewAthenaArray(int nx5, int nx4, int nx3,$/;"	f	class:AthenaArray
NewAthenaArray	athena_arrays.hpp	/^__attribute__((nothrow)) void AthenaArray<T>::NewAthenaArray(int nx6, int nx5, int nx4,$/;"	f	class:AthenaArray
NewBlockTimeStep	hydro/new_blockdt.cpp	/^void Hydro::NewBlockTimeStep() {$/;"	f	class:Hydro
NewBlockTimeStep	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::NewBlockTimeStep(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
NewBlockTimeStep_STS	task_list/sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::NewBlockTimeStep_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
NewDiffusionDt	dustfluids/dustfluids_diffusion/dustfluids_diffusion.cpp	/^Real DustFluidsDiffusion::NewDiffusionDt() {$/;"	f	class:DustFluidsDiffusion
NewDiffusionDt	field/field_diffusion/field_diffusion.cpp	/^void FieldDiffusion::NewDiffusionDt(Real &dt_oa, Real &dt_h) {$/;"	f	class:FieldDiffusion
NewDiffusionDt	hydro/hydro_diffusion/hydro_diffusion.cpp	/^void HydroDiffusion::NewDiffusionDt(Real &dt_vis, Real &dt_cnd) {$/;"	f	class:HydroDiffusion
NewDiffusionDt	scalars/scalar_diffusion.cpp	/^Real PassiveScalars::NewDiffusionDt() {$/;"	f	class:PassiveScalars
NewOrbitalAdvectionDt	orbital_advection/orbital_advection.cpp	/^Real OrbitalAdvection::NewOrbitalAdvectionDt() {$/;"	f	class:OrbitalAdvection
NewTimeStep	mesh/mesh.cpp	/^void Mesh::NewTimeStep() {$/;"	f	class:Mesh
Noh3DOuterX1	pgen/noh.cpp	/^void Noh3DOuterX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f
Noh3DOuterX2	pgen/noh.cpp	/^void Noh3DOuterX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f
Noh3DOuterX3	pgen/noh.cpp	/^void Noh3DOuterX3(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, FaceField &b,$/;"	f
Nx	fft/athena_fft.hpp	/^  int Nx[3], nx[3], disp[3];$/;"	m	class:FFTBlock::AthenaFFTDirection
Nx	fft/athena_fft.hpp	/^  int Nx[3];$/;"	m	class:AthenaFFTIndex
ONE_3RD	defs.hpp	/^#define ONE_3RD /;"	d
ONE_OVER_SQRT2	defs.hpp	/^#define ONE_OVER_SQRT2 /;"	d
OPENMP_PARALLEL	defs.hpp	/^#define OPENMP_PARALLEL$/;"	d
ORBITAL_ADVECTION	task_list/task_list.hpp	/^  bool ORBITAL_ADVECTION; \/\/ flag for orbital advection (true w\/ , false w\/o)$/;"	m	class:TimeIntegratorTaskList
ORBITAL_ADVECTION_ORBITAL_ADVECTION_HPP_	orbital_advection/orbital_advection.hpp	/^#define ORBITAL_ADVECTION_ORBITAL_ADVECTION_HPP_$/;"	d
OUProcess	fft/turbulence.cpp	/^void TurbulenceDriver::OUProcess(Real dt) {$/;"	f	class:TurbulenceDriver
OUTER_X1	bvals/bvals_interfaces.hpp	/^      OUTER_X1 __attribute__((deprecated)),$/;"	e	enum:__anon1
OUTER_X1	bvals/bvals_interfaces.hpp	/^enum {FACE_UNDEF = -1, INNER_X1, OUTER_X1, INNER_X2, OUTER_X2, INNER_X3, OUTER_X3};$/;"	e	enum:__anon3
OUTER_X2	bvals/bvals_interfaces.hpp	/^      OUTER_X2 __attribute__((deprecated)),$/;"	e	enum:__anon1
OUTER_X2	bvals/bvals_interfaces.hpp	/^enum {FACE_UNDEF = -1, INNER_X1, OUTER_X1, INNER_X2, OUTER_X2, INNER_X3, OUTER_X3};$/;"	e	enum:__anon3
OUTER_X3	bvals/bvals_interfaces.hpp	/^      OUTER_X3 __attribute__((deprecated))};$/;"	e	enum:__anon1
OUTER_X3	bvals/bvals_interfaces.hpp	/^enum {FACE_UNDEF = -1, INNER_X1, OUTER_X1, INNER_X2, OUTER_X2, INNER_X3, OUTER_X3};$/;"	e	enum:__anon3
OUTFLOW_BNDRY	bvals/bvals_interfaces.hpp	/^      OUTFLOW_BNDRY __attribute__((deprecated)),$/;"	e	enum:__anon2
OUTFLOW_BNDRY	bvals/bvals_interfaces.hpp	/^enum {BLOCK_BNDRY = -1, BNDRY_UNDEF, REFLECTING_BNDRY, OUTFLOW_BNDRY, USER_BNDRY,$/;"	e	enum:__anon4
OUTPUTS_IO_WRAPPER_HPP_	outputs/io_wrapper.hpp	/^#define OUTPUTS_IO_WRAPPER_HPP_$/;"	d
OUTPUTS_OUTPUTS_HPP_	outputs/outputs.hpp	/^#define OUTPUTS_OUTPUTS_HPP_$/;"	d
OhmicEMF	field/field_diffusion/diffusivity.cpp	/^void FieldDiffusion::OhmicEMF(const FaceField &b, const AthenaArray<Real> &bc,$/;"	f	class:FieldDiffusion
Omega0	orbital_advection/orbital_advection.hpp	/^  Real Omega0, qshear, shboxcoord; \/\/ parameters for shearing box in cartesian$/;"	m	class:OrbitalTransform::OrbitalAdvection
Omega0	pgen/disk.cpp	/^Real Omega0;$/;"	m	namespace:__anon36	file:
Omega0	pgen/disk_RWI_2D.cpp	/^dfloor, dffloor, Omega0, user_dt, phi_vortex,$/;"	m	namespace:__anon101	file:
Omega0	pgen/disk_VSI.cpp	/^Real gm0, r0, rho0, pvalue, cs2_0, qvalue, beta, nu_alpha, dfloor, dffloor, rho_floor, Omega0,$/;"	m	namespace:__anon133	file:
Omega0	pgen/disk_dust_diffusion.cpp	/^Real dfloor, dffloor, Omega0, user_dt;$/;"	m	namespace:__anon70	file:
Omega0	pgen/disk_dust_drift.cpp	/^Real Omega0;$/;"	m	namespace:__anon64	file:
Omega0	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^nu_alpha, dfloor, dffloor, Omega0, user_dt, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon68	file:
Omega0	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^nu_alpha, dfloor, dffloor, Omega0, user_dt, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon109	file:
Omega0	pgen/disk_planet_dust_cylindrical.cpp	/^t_planet_growth, dfloor, dffloor, Omega0, user_dt, A_gap,$/;"	m	namespace:__anon99	file:
Omega0	pgen/disk_planet_dust_spherical.cpp	/^t_planet_growth, dfloor, dffloor, Omega0, user_dt, A_gap,$/;"	m	namespace:__anon113	file:
Omega0	pgen/disk_streaming_cylindrical.cpp	/^Real Omega0;$/;"	m	namespace:__anon54	file:
Omega0	pgen/disk_streaming_spherical.cpp	/^Real Omega0;$/;"	m	namespace:__anon75	file:
Omega0	pgen/dust_diffusion.cpp	/^Real Omega0;$/;"	m	namespace:__anon117	file:
Omega0	pgen/jgg.cpp	/^Real qshear, Omega0;$/;"	m	namespace:__anon123	file:
Omega0	pgen/ssheet.cpp	/^Real qshear, Omega0;$/;"	m	namespace:__anon95	file:
Omega0	pgen/ssheet_RWI_dust.cpp	/^Real sound_speed, gamma1, inv_gm1, d0, amp, x1size, x2size, x3size, qshear, Omega0,$/;"	m	namespace:__anon90	file:
Omega0	pgen/ssheet_planet_dust.cpp	/^Real x1size, x2size, x3size, sound_speed, gm1, inv_gm1, d0, qshear, Omega0, beta,$/;"	m	namespace:__anon111	file:
Omega_0	pgen/dust_NSH.cpp	/^Real Omega_0, qshear;$/;"	m	namespace:__anon103	file:
Omega_0	pgen/hb3.cpp	/^Real Omega_0, qshear;$/;"	m	namespace:__anon58	file:
Omega_0	pgen/hgb.cpp	/^Real Omega_0, qshear;$/;"	m	namespace:__anon115	file:
Omega_0	pgen/strat.cpp	/^Real Omega_0, qshear;$/;"	m	namespace:__anon127	file:
Omega_0	pgen/streaming_eigen.cpp	/^Real Omega_0, qshear;$/;"	m	namespace:__anon66	file:
Omega_0	pgen/streaming_eigen_2dust.cpp	/^Real Omega_0, qshear;$/;"	m	namespace:__anon145	file:
Omega_0	pgen/streaming_nonlinear.cpp	/^Real Omega_0, qshear;$/;"	m	namespace:__anon135	file:
Omega_0	pgen/streaming_stratified.cpp	/^Real Omega_0, qshear;$/;"	m	namespace:__anon154	file:
Omega_0_	dustfluids/srcterms/dustfluids_srcterms.hpp	/^  Real Omega_0_, qshear_;           \/\/ Orbital freq and shear rate in shearing box$/;"	m	class:DustFluidsSourceTerms
Omega_0_	hydro/srcterms/hydro_srcterms.hpp	/^  Real Omega_0_, qshear_; \/\/ Orbital freq and shear rate$/;"	m	class:HydroSourceTerms
OneStepToCoarser	multigrid/multigrid_driver.cpp	/^void MultigridDriver::OneStepToCoarser(int nsmooth) {$/;"	f	class:MultigridDriver
OneStepToFiner	multigrid/multigrid_driver.cpp	/^void MultigridDriver::OneStepToFiner(int nsmooth) {$/;"	f	class:MultigridDriver
Open	outputs/io_wrapper.cpp	/^int IOWrapper::Open(const char* fname, FileMode rw) {$/;"	f	class:IOWrapper
OrbitalAdvection	orbital_advection/orbital_advection.cpp	/^OrbitalAdvection::OrbitalAdvection(MeshBlock *pmb, ParameterInput *pin)$/;"	f	class:OrbitalAdvection
OrbitalAdvection	orbital_advection/orbital_advection.hpp	/^class OrbitalAdvection{$/;"	c	class:OrbitalTransform
OrbitalAdvectionSourceTerms	hydro/srcterms/orbital_advection_srcterms.cpp	/^void HydroSourceTerms::OrbitalAdvectionSourceTerms$/;"	f	class:HydroSourceTerms
OrbitalAdvectionSourceTermsDustFluids	dustfluids/srcterms/orbital_advection_srcterms_dustfluids.cpp	/^void DustFluidsSourceTerms::OrbitalAdvectionSourceTermsDustFluids$/;"	f	class:DustFluidsSourceTerms
OrbitalBoundaryCommunication	bvals/orbital/bvals_orbital.cpp	/^OrbitalBoundaryCommunication::OrbitalBoundaryCommunication($/;"	f	class:OrbitalBoundaryCommunication
OrbitalBoundaryCommunication	bvals/orbital/bvals_orbital.hpp	/^class OrbitalBoundaryCommunication {$/;"	c
OrbitalTransform	orbital_advection/orbital_advection.hpp	/^enum class OrbitalTransform {none=0, prim=1, cons=2, all=3};$/;"	c
OrbitalVelocity	orbital_advection/orbital_advection.hpp	/^  OrbitalVelocityFunc OrbitalVelocity, OrbitalVelocityDerivative[2];$/;"	m	class:OrbitalTransform::OrbitalAdvection
OrbitalVelocityDerivative	orbital_advection/orbital_advection.hpp	/^  OrbitalVelocityFunc OrbitalVelocity, OrbitalVelocityDerivative[2];$/;"	m	class:OrbitalTransform::OrbitalAdvection
OrbitalVelocityDerivative_	mesh/mesh.hpp	/^  OrbitalVelocityFunc OrbitalVelocity_, OrbitalVelocityDerivative_[2];$/;"	m	class:Mesh
OrbitalVelocity_	mesh/mesh.hpp	/^  OrbitalVelocityFunc OrbitalVelocity_, OrbitalVelocityDerivative_[2];$/;"	m	class:Mesh
OuterWaveDamping	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^void OuterWaveDamping(MeshBlock *pmb, const Real time, const Real dt, int il, int iu,$/;"	f
OuterWaveDamping	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^void OuterWaveDamping(MeshBlock *pmb, const Real time, const Real dt, int il, int iu,$/;"	f
OuterWaveDampingDust	pgen/disk_VSI.cpp	/^void OuterWaveDampingDust(MeshBlock *pmb, const Real time, const Real dt, int il, int iu,$/;"	f
OuterWaveDampingDust	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^void OuterWaveDampingDust(MeshBlock *pmb, const Real time, const Real dt, int il, int iu,$/;"	f
OuterWaveDampingDust	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^void OuterWaveDampingDust(MeshBlock *pmb, const Real time, const Real dt, int il, int iu,$/;"	f
OuterWaveDampingGas	pgen/disk_VSI.cpp	/^void OuterWaveDampingGas(MeshBlock *pmb, const Real time, const Real dt, int il, int iu,$/;"	f
OuterWaveDampingGas	pgen/disk_planet_dust_cylindrical.cpp	/^void OuterWaveDampingGas(MeshBlock *pmb, const Real time, const Real dt, int il, int iu,$/;"	f
OuterWaveDampingGas	pgen/disk_planet_dust_spherical.cpp	/^void OuterWaveDampingGas(MeshBlock *pmb, const Real time, const Real dt, int il, int iu,$/;"	f
OuterWavedamping	pgen/disk_dust_diffusion.cpp	/^void OuterWavedamping(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon71
OuterWavedamping	pgen/disk_dust_drift.cpp	/^void OuterWavedamping(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon65
OuterWavedamping	pgen/disk_streaming_cylindrical.cpp	/^void OuterWavedamping(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon55
OuterWavedamping	pgen/disk_streaming_spherical.cpp	/^void OuterWavedamping(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon76
OuterWavedamping	pgen/dust_diffusion.cpp	/^void OuterWavedamping(MeshBlock *pmb, const Real time, const Real dt,$/;"	f	namespace:__anon118
OuterX1_NSH	pgen/disk_dust_drift.cpp	/^void OuterX1_NSH(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
OuterX1_NSH	pgen/disk_streaming_cylindrical.cpp	/^void OuterX1_NSH(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
OuterX1_NSH	pgen/disk_streaming_spherical.cpp	/^void OuterX1_NSH(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
OuterX2_NSH	pgen/disk_streaming_spherical.cpp	/^void OuterX2_NSH(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
Outer_Dust_Damping_Flag	pgen/disk_VSI.cpp	/^Inner_Dust_Damping_Flag, Outer_Dust_Damping_Flag,$/;"	m	namespace:__anon133	file:
Outer_Gas_Damping_Flag	pgen/disk_VSI.cpp	/^bool Inner_Gas_Damping_Flag, Outer_Gas_Damping_Flag, Theta_Gas_Damping_Flag,$/;"	m	namespace:__anon133	file:
OutflowBoundary	pgen/gr_torus.cpp	/^void OutflowBoundary(MeshBlock *pmb, Coordinates *pcoord, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
OutflowInnerX1	bvals/cc/outflow_cc.cpp	/^void CellCenteredBoundaryVariable::OutflowInnerX1($/;"	f	class:CellCenteredBoundaryVariable
OutflowInnerX1	bvals/fc/outflow_fc.cpp	/^void FaceCenteredBoundaryVariable::OutflowInnerX1($/;"	f	class:FaceCenteredBoundaryVariable
OutflowInnerX2	bvals/cc/outflow_cc.cpp	/^void CellCenteredBoundaryVariable::OutflowInnerX2($/;"	f	class:CellCenteredBoundaryVariable
OutflowInnerX2	bvals/fc/outflow_fc.cpp	/^void FaceCenteredBoundaryVariable::OutflowInnerX2($/;"	f	class:FaceCenteredBoundaryVariable
OutflowInnerX3	bvals/cc/outflow_cc.cpp	/^void CellCenteredBoundaryVariable::OutflowInnerX3($/;"	f	class:CellCenteredBoundaryVariable
OutflowInnerX3	bvals/fc/outflow_fc.cpp	/^void FaceCenteredBoundaryVariable::OutflowInnerX3($/;"	f	class:FaceCenteredBoundaryVariable
OutflowOuterX1	bvals/cc/outflow_cc.cpp	/^void CellCenteredBoundaryVariable::OutflowOuterX1($/;"	f	class:CellCenteredBoundaryVariable
OutflowOuterX1	bvals/fc/outflow_fc.cpp	/^void FaceCenteredBoundaryVariable::OutflowOuterX1($/;"	f	class:FaceCenteredBoundaryVariable
OutflowOuterX2	bvals/cc/outflow_cc.cpp	/^void CellCenteredBoundaryVariable::OutflowOuterX2($/;"	f	class:CellCenteredBoundaryVariable
OutflowOuterX2	bvals/fc/outflow_fc.cpp	/^void FaceCenteredBoundaryVariable::OutflowOuterX2($/;"	f	class:FaceCenteredBoundaryVariable
OutflowOuterX3	bvals/cc/outflow_cc.cpp	/^void CellCenteredBoundaryVariable::OutflowOuterX3($/;"	f	class:CellCenteredBoundaryVariable
OutflowOuterX3	bvals/fc/outflow_fc.cpp	/^void FaceCenteredBoundaryVariable::OutflowOuterX3($/;"	f	class:FaceCenteredBoundaryVariable
OutputCycleDiagnostics	mesh/mesh.cpp	/^void Mesh::OutputCycleDiagnostics() {$/;"	f	class:Mesh
OutputData	outputs/outputs.hpp	/^  OutputData() : pnext(nullptr),  pprev(nullptr) {}$/;"	f	struct:OutputData
OutputData	outputs/outputs.hpp	/^struct OutputData {$/;"	s
OutputMeshStructure	mesh/mesh.cpp	/^void Mesh::OutputMeshStructure(int ndim) {$/;"	f	class:Mesh
OutputParameters	outputs/outputs.hpp	/^  OutputParameters() : block_number(0), next_time(0.0), dt(0.0), file_number(0),$/;"	f	struct:OutputParameters
OutputParameters	outputs/outputs.hpp	/^struct OutputParameters {$/;"	s
OutputType	outputs/outputs.cpp	/^OutputType::OutputType(OutputParameters oparams) :$/;"	f	class:OutputType
OutputType	outputs/outputs.hpp	/^class OutputType {$/;"	c
Outputs	outputs/outputs.cpp	/^Outputs::Outputs(Mesh *pm, ParameterInput *pin) {$/;"	f	class:Outputs
Outputs	outputs/outputs.hpp	/^class Outputs {$/;"	c
P0	pgen/magnoh.cpp	/^Real alpha, beta, rho0, P0, pcoeff, vr, perturb, mphi;$/;"	m	namespace:__anon92	file:
PACK_ARRAY	fft/plimpton/pack_2d.cpp	/^#define PACK_ARRAY$/;"	d	file:
PACK_ARRAY	fft/plimpton/pack_3d.cpp	/^#define PACK_ARRAY$/;"	d	file:
PARAMETER_INPUT_HPP_	parameter_input.hpp	/^#define PARAMETER_INPUT_HPP_$/;"	d
PERIODIC_BNDRY	bvals/bvals_interfaces.hpp	/^      PERIODIC_BNDRY __attribute__((deprecated)),$/;"	e	enum:__anon2
PERIODIC_BNDRY	bvals/bvals_interfaces.hpp	/^      PERIODIC_BNDRY, POLAR_BNDRY, POLAR_BNDRY_WEDGE, SHEAR_PERIODIC_BNDRY};$/;"	e	enum:__anon4
PI	defs.hpp	/^#define PI /;"	d
PLIMPTON_FFT_2D	fft/plimpton/fft_2d.h	/^#define PLIMPTON_FFT_2D$/;"	d
PLIMPTON_FFT_3D	fft/plimpton/fft_3d.h	/^#define PLIMPTON_FFT_3D$/;"	d
PLIMPTON_PACK_3D	fft/plimpton/pack_2d.h	/^#define PLIMPTON_PACK_3D$/;"	d
PLIMPTON_PACK_3D	fft/plimpton/pack_3d.h	/^#define PLIMPTON_PACK_3D$/;"	d
PLIMPTON_REMAP_2D	fft/plimpton/remap_2d.h	/^#define PLIMPTON_REMAP_2D$/;"	d
PLIMPTON_REMAP_3D	fft/plimpton/remap_3d.h	/^#define PLIMPTON_REMAP_3D$/;"	d
POLAR_BNDRY	bvals/bvals_interfaces.hpp	/^      PERIODIC_BNDRY, POLAR_BNDRY, POLAR_BNDRY_WEDGE, SHEAR_PERIODIC_BNDRY};$/;"	e	enum:__anon4
POLAR_BNDRY	bvals/bvals_interfaces.hpp	/^      POLAR_BNDRY __attribute__((deprecated)),$/;"	e	enum:__anon2
POLAR_BNDRY_WEDGE	bvals/bvals_interfaces.hpp	/^      PERIODIC_BNDRY, POLAR_BNDRY, POLAR_BNDRY_WEDGE, SHEAR_PERIODIC_BNDRY};$/;"	e	enum:__anon4
POLAR_BNDRY_WEDGE	bvals/bvals_interfaces.hpp	/^      POLAR_BNDRY_WEDGE __attribute__((deprecated)),$/;"	e	enum:__anon2
PROBLEM_GENERATOR	defs.hpp	/^#define PROBLEM_GENERATOR /;"	d
P_of_rho_T	eos/general/hydrogen.cpp	/^Real P_of_rho_T(Real rho, Real T) {$/;"	f	namespace:__anon11
PackData	utils/buffer_utils.cpp	/^template <typename T> void PackData(const AthenaArray<T> &src, T *buf,$/;"	f	namespace:BufferUtility
ParameterDump	parameter_input.cpp	/^void ParameterInput::ParameterDump(std::ostream& os) {$/;"	f	class:ParameterInput
ParameterInput	parameter_input.cpp	/^ParameterInput::ParameterInput() :pfirst_block{}, last_filename_{} {$/;"	f	class:ParameterInput
ParameterInput	parameter_input.hpp	/^class ParameterInput {$/;"	c
ParseLine	parameter_input.cpp	/^void ParameterInput::ParseLine(InputBlock *pib, std::string line,$/;"	f	class:ParameterInput
PassiveDyeEntropy	pgen/kh.cpp	/^Real PassiveDyeEntropy(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon98
PassiveDyeEntropy	pgen/kh_dust.cpp	/^Real PassiveDyeEntropy(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon108
PassiveScalarConservedToPrimitive	eos/eos_scalars.cpp	/^void EquationOfState::PassiveScalarConservedToPrimitive($/;"	f	class:EquationOfState
PassiveScalarConservedToPrimitiveCellAverage	eos/eos_scalars.cpp	/^void EquationOfState::PassiveScalarConservedToPrimitiveCellAverage($/;"	f	class:EquationOfState
PassiveScalarPrimitiveToConserved	eos/eos_scalars.cpp	/^void EquationOfState::PassiveScalarPrimitiveToConserved($/;"	f	class:EquationOfState
PassiveScalars	scalars/scalars.cpp	/^PassiveScalars::PassiveScalars(MeshBlock *pmb, ParameterInput *pin)  :$/;"	f	class:PassiveScalars
PassiveScalars	scalars/scalars.hpp	/^class PassiveScalars {$/;"	c
PermuteAxis	fft/athena_fft.cpp	/^void AthenaFFTIndex::PermuteAxis(int npermute) {$/;"	f	class:AthenaFFTIndex
PermuteProc	fft/athena_fft.cpp	/^void AthenaFFTIndex::PermuteProc(int npermute) {$/;"	f	class:AthenaFFTIndex
Permute_	fft/athena_fft.cpp	/^template <typename T> void AthenaFFTIndex::Permute_(T loc[], int npermute) {$/;"	f	class:AthenaFFTIndex
PertEven	pgen/streaming_eigen.cpp	/^Real PertEven(const Real fR, const Real fI, const Real x, const Real z, const Real t) {$/;"	f	namespace:__anon67
PertEven	pgen/streaming_eigen_2dust.cpp	/^Real PertEven(const Real fR, const Real fI, const Real x, const Real z, const Real t) {$/;"	f	namespace:__anon146
PertOdd	pgen/streaming_eigen.cpp	/^Real PertOdd(const Real fR, const Real fI, const Real x, const Real z, const Real t) {$/;"	f	namespace:__anon67
PertOdd	pgen/streaming_eigen_2dust.cpp	/^Real PertOdd(const Real fR, const Real fI, const Real x, const Real z, const Real t) {$/;"	f	namespace:__anon146
Perturb	fft/turbulence.cpp	/^void TurbulenceDriver::Perturb(Real dt) {$/;"	f	class:TurbulenceDriver
PhysicalBoundary	task_list/fft_grav_task_list.cpp	/^TaskStatus FFTGravitySolverTaskList::PhysicalBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:FFTGravitySolverTaskList
PhysicalBoundary	task_list/mg_task_list.cpp	/^TaskStatus MultigridTaskList::PhysicalBoundary(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
PhysicalBoundary	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::PhysicalBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
PhysicalBoundary_STS	task_list/sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::PhysicalBoundary_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
PiecewiseLinearX1	reconstruct/plm.cpp	/^void Reconstruction::PiecewiseLinearX1($/;"	f	class:Reconstruction
PiecewiseLinearX1	reconstruct/plm_simple.cpp	/^void Reconstruction::PiecewiseLinearX1($/;"	f	class:Reconstruction
PiecewiseLinearX1_DustFluids	reconstruct/plm_dustfluids.cpp	/^void Reconstruction::PiecewiseLinearX1_DustFluids($/;"	f	class:Reconstruction
PiecewiseLinearX2	reconstruct/plm.cpp	/^void Reconstruction::PiecewiseLinearX2($/;"	f	class:Reconstruction
PiecewiseLinearX2	reconstruct/plm_simple.cpp	/^void Reconstruction::PiecewiseLinearX2($/;"	f	class:Reconstruction
PiecewiseLinearX2_DustFluids	reconstruct/plm_dustfluids.cpp	/^void Reconstruction::PiecewiseLinearX2_DustFluids($/;"	f	class:Reconstruction
PiecewiseLinearX3	reconstruct/plm.cpp	/^void Reconstruction::PiecewiseLinearX3($/;"	f	class:Reconstruction
PiecewiseLinearX3	reconstruct/plm_simple.cpp	/^void Reconstruction::PiecewiseLinearX3($/;"	f	class:Reconstruction
PiecewiseLinearX3_DustFluids	reconstruct/plm_dustfluids.cpp	/^void Reconstruction::PiecewiseLinearX3_DustFluids($/;"	f	class:Reconstruction
PiecewiseParabolicX1	reconstruct/ppm.cpp	/^void Reconstruction::PiecewiseParabolicX1($/;"	f	class:Reconstruction
PiecewiseParabolicX1	reconstruct/ppm_simple.cpp	/^void Reconstruction::PiecewiseParabolicX1($/;"	f	class:Reconstruction
PiecewiseParabolicX1_DustFluids	reconstruct/ppm_dustfluids.cpp	/^void Reconstruction::PiecewiseParabolicX1_DustFluids($/;"	f	class:Reconstruction
PiecewiseParabolicX2	reconstruct/ppm.cpp	/^void Reconstruction::PiecewiseParabolicX2($/;"	f	class:Reconstruction
PiecewiseParabolicX2	reconstruct/ppm_simple.cpp	/^void Reconstruction::PiecewiseParabolicX2($/;"	f	class:Reconstruction
PiecewiseParabolicX2_DustFluids	reconstruct/ppm_dustfluids.cpp	/^void Reconstruction::PiecewiseParabolicX2_DustFluids($/;"	f	class:Reconstruction
PiecewiseParabolicX3	reconstruct/ppm.cpp	/^void Reconstruction::PiecewiseParabolicX3($/;"	f	class:Reconstruction
PiecewiseParabolicX3	reconstruct/ppm_simple.cpp	/^void Reconstruction::PiecewiseParabolicX3($/;"	f	class:Reconstruction
PiecewiseParabolicX3_DustFluids	reconstruct/ppm_dustfluids.cpp	/^void Reconstruction::PiecewiseParabolicX3_DustFluids($/;"	f	class:Reconstruction
PlanetaryGravity	pgen/disk_dust_diffusion.cpp	/^void PlanetaryGravity(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon71
PlanetaryGravity	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^void PlanetaryGravity(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon69
PlanetaryGravity	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^void PlanetaryGravity(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon110
PlanetaryGravity	pgen/disk_planet_dust_cylindrical.cpp	/^void PlanetaryGravity(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon100
PlanetaryGravity	pgen/disk_planet_dust_spherical.cpp	/^void PlanetaryGravity(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon114
PlanetaryGravity	pgen/inject_pebble_3D.cpp	/^void PlanetaryGravity(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon63
PlanetaryGravity	pgen/ssheet_planet_dust.cpp	/^void PlanetaryGravity(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon112
PlanetaryGravityOrder	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^int PlanetaryGravityOrder[10];$/;"	m	namespace:__anon68	file:
PlanetaryGravityOrder	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^int PlanetaryGravityOrder[10];$/;"	m	namespace:__anon109	file:
PlanetaryGravityOrder	pgen/disk_planet_dust_cylindrical.cpp	/^int PlanetaryGravityOrder;$/;"	m	namespace:__anon99	file:
PlanetaryGravityOrder	pgen/disk_planet_dust_spherical.cpp	/^int PlanetaryGravityOrder;$/;"	m	namespace:__anon113	file:
PlanetaryGravityOrder	pgen/ssheet_planet_dust.cpp	/^int PlanetaryGravityOrder;$/;"	m	namespace:__anon111	file:
PointMass	hydro/srcterms/pointmass.cpp	/^void HydroSourceTerms::PointMass(const Real dt, const AthenaArray<Real> *flux,$/;"	f	class:HydroSourceTerms
PointMassDustFluids	dustfluids/srcterms/pointmass_dustfluids.cpp	/^void DustFluidsSourceTerms::PointMassDustFluids(const Real dt, const AthenaArray<Real> *flux_df,$/;"	f	class:DustFluidsSourceTerms
PolarAveragingDustFluids	dustfluids/srcterms/dustfluids_srcterms.cpp	/^void DustFluidsSourceTerms::PolarAveragingDustFluids(AthenaArray<Real> &cons_df, int j, int nlayer)$/;"	f	class:DustFluidsSourceTerms
PolarAveragingEMF	field/ct.cpp	/^void Field::PolarAveragingEMF(EdgeField &e, int j, int nlayer, bool north)$/;"	f	class:Field
PolarAveragingHydro	hydro/srcterms/hydro_srcterms.cpp	/^void HydroSourceTerms::PolarAveragingHydro(AthenaArray<Real> &cons, int j, int nlayer)$/;"	f	class:HydroSourceTerms
PolarBoundarySingleAzimuthalBlock	bvals/cc/bvals_cc.cpp	/^void CellCenteredBoundaryVariable::PolarBoundarySingleAzimuthalBlock() {$/;"	f	class:CellCenteredBoundaryVariable
PolarBoundarySingleAzimuthalBlock	bvals/fc/bvals_fc.cpp	/^void FaceCenteredBoundaryVariable::PolarBoundarySingleAzimuthalBlock() {$/;"	f	class:FaceCenteredBoundaryVariable
PolarFieldBoundaryAverage	bvals/fc/bvals_fc.cpp	/^void FaceCenteredBoundaryVariable::PolarFieldBoundaryAverage() {$/;"	f	class:FaceCenteredBoundaryVariable
PolarFluxBoundarySingleAzimuthalBlock	bvals/fc/flux_correction_fc.cpp	/^void FaceCenteredBoundaryVariable::PolarFluxBoundarySingleAzimuthalBlock() {$/;"	f	class:FaceCenteredBoundaryVariable
PolarWedgeInnerX2	bvals/cc/dustdiffusion/polarwedge_dustdiffusion.cpp	/^void DustDiffusionBoundaryVariable::PolarWedgeInnerX2($/;"	f	class:DustDiffusionBoundaryVariable
PolarWedgeInnerX2	bvals/cc/dustfluids/polarwedge_dustfluids.cpp	/^void DustFluidsBoundaryVariable::PolarWedgeInnerX2($/;"	f	class:DustFluidsBoundaryVariable
PolarWedgeInnerX2	bvals/cc/polarwedge_cc.cpp	/^void CellCenteredBoundaryVariable::PolarWedgeInnerX2($/;"	f	class:CellCenteredBoundaryVariable
PolarWedgeInnerX2	bvals/fc/polarwedge_fc.cpp	/^void FaceCenteredBoundaryVariable::PolarWedgeInnerX2($/;"	f	class:FaceCenteredBoundaryVariable
PolarWedgeOuterX2	bvals/cc/dustdiffusion/polarwedge_dustdiffusion.cpp	/^void DustDiffusionBoundaryVariable::PolarWedgeOuterX2($/;"	f	class:DustDiffusionBoundaryVariable
PolarWedgeOuterX2	bvals/cc/dustfluids/polarwedge_dustfluids.cpp	/^void DustFluidsBoundaryVariable::PolarWedgeOuterX2($/;"	f	class:DustFluidsBoundaryVariable
PolarWedgeOuterX2	bvals/cc/polarwedge_cc.cpp	/^void CellCenteredBoundaryVariable::PolarWedgeOuterX2($/;"	f	class:CellCenteredBoundaryVariable
PolarWedgeOuterX2	bvals/fc/polarwedge_fc.cpp	/^void FaceCenteredBoundaryVariable::PolarWedgeOuterX2($/;"	f	class:FaceCenteredBoundaryVariable
PoverR	pgen/disk.cpp	/^Real PoverR(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon37
PoverR	pgen/disk_dust_drift.cpp	/^Real PoverR(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon65
PoverRho	pgen/disk_RWI_2D.cpp	/^Real PoverRho(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon102
PoverRho	pgen/disk_VSI.cpp	/^Real PoverRho(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon134
PoverRho	pgen/disk_dust_diffusion.cpp	/^Real PoverRho(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon71
PoverRho	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real PoverRho(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon69
PoverRho	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real PoverRho(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon110
PoverRho	pgen/disk_planet_dust_cylindrical.cpp	/^Real PoverRho(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon100
PoverRho	pgen/disk_planet_dust_spherical.cpp	/^Real PoverRho(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon114
PoverRho	pgen/disk_streaming_cylindrical.cpp	/^Real PoverRho(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon55
PoverRho	pgen/disk_streaming_spherical.cpp	/^Real PoverRho(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon76
PoverRho	pgen/dust_diffusion.cpp	/^Real PoverRho(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon118
PowerSpectrum	fft/turbulence.cpp	/^void TurbulenceDriver::PowerSpectrum(std::complex<Real> *amp) {$/;"	f	class:TurbulenceDriver
PoyntingFlux	field/field_diffusion/diffusivity.cpp	/^void FieldDiffusion::PoyntingFlux(EdgeField &e, const AthenaArray<Real> &bc) {$/;"	f	class:FieldDiffusion
PrepareSendCoarseToFineAMR	mesh/amr_loadbalance.cpp	/^void Mesh::PrepareSendCoarseToFineAMR(MeshBlock* pb, Real *sendbuf,$/;"	f	class:Mesh
PrepareSendFineToCoarseAMR	mesh/amr_loadbalance.cpp	/^void Mesh::PrepareSendFineToCoarseAMR(MeshBlock* pb, Real *sendbuf) {$/;"	f	class:Mesh
PrepareSendSameLevel	mesh/amr_loadbalance.cpp	/^void Mesh::PrepareSendSameLevel(MeshBlock* pb, Real *sendbuf) {$/;"	f	class:Mesh
PresFromRhoEg	eos/general/eos_table.cpp	/^Real EquationOfState::PresFromRhoEg(Real rho, Real egas) {$/;"	f	class:EquationOfState
PresFromRhoEg	eos/general/hydrogen.cpp	/^Real EquationOfState::PresFromRhoEg(Real rho, Real egas) {$/;"	f	class:EquationOfState
PresFromRhoEg	eos/general/ideal.cpp	/^Real EquationOfState::PresFromRhoEg(Real rho, Real egas) {$/;"	f	class:EquationOfState
PresFromRhoEg	eos/general/noop.cpp	/^Real EquationOfState::PresFromRhoEg(Real rho, Real egas) {$/;"	f	class:EquationOfState
PressureGradient	pgen/dust_NSH.cpp	/^void PressureGradient(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon104
PressureGradient	pgen/ssheet_RWI_dust.cpp	/^void PressureGradient(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon91
PressureGradient	pgen/ssheet_planet_dust.cpp	/^void PressureGradient(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon112
PressureGradient	pgen/streaming_eigen.cpp	/^void PressureGradient(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon67
PressureGradient	pgen/streaming_eigen_2dust.cpp	/^void PressureGradient(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon146
PressureGradient	pgen/streaming_nonlinear.cpp	/^void PressureGradient(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon136
PressureGradient	pgen/streaming_stratified.cpp	/^void PressureGradient(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon155
PrimIndex	athena.hpp	/^enum PrimIndex {IVX=1, IVY=2, IVZ=3, IPR=4, IBY=(NHYDRO), IBZ=((NHYDRO)+1)};$/;"	g
PrimToLocal1	coordinates/coordinates.hpp	/^  virtual void PrimToLocal1($/;"	f	class:Coordinates
PrimToLocal1	coordinates/gr_user.cpp	/^void GRUser::PrimToLocal1($/;"	f	class:GRUser
PrimToLocal1	coordinates/kerr-schild.cpp	/^void KerrSchild::PrimToLocal1($/;"	f	class:KerrSchild
PrimToLocal1	coordinates/minkowski.cpp	/^void Minkowski::PrimToLocal1($/;"	f	class:Minkowski
PrimToLocal1	coordinates/schwarzschild.cpp	/^void Schwarzschild::PrimToLocal1($/;"	f	class:Schwarzschild
PrimToLocal2	coordinates/coordinates.hpp	/^  virtual void PrimToLocal2($/;"	f	class:Coordinates
PrimToLocal2	coordinates/gr_user.cpp	/^void GRUser::PrimToLocal2($/;"	f	class:GRUser
PrimToLocal2	coordinates/kerr-schild.cpp	/^void KerrSchild::PrimToLocal2($/;"	f	class:KerrSchild
PrimToLocal2	coordinates/minkowski.cpp	/^void Minkowski::PrimToLocal2($/;"	f	class:Minkowski
PrimToLocal2	coordinates/schwarzschild.cpp	/^void Schwarzschild::PrimToLocal2($/;"	f	class:Schwarzschild
PrimToLocal3	coordinates/coordinates.hpp	/^  virtual void PrimToLocal3($/;"	f	class:Coordinates
PrimToLocal3	coordinates/gr_user.cpp	/^void GRUser::PrimToLocal3($/;"	f	class:GRUser
PrimToLocal3	coordinates/kerr-schild.cpp	/^void KerrSchild::PrimToLocal3($/;"	f	class:KerrSchild
PrimToLocal3	coordinates/minkowski.cpp	/^void Minkowski::PrimToLocal3($/;"	f	class:Minkowski
PrimToLocal3	coordinates/schwarzschild.cpp	/^void Schwarzschild::PrimToLocal3($/;"	f	class:Schwarzschild
PrimitiveToConserved	eos/adiabatic_hydro.cpp	/^void EquationOfState::PrimitiveToConserved($/;"	f	class:EquationOfState
PrimitiveToConserved	eos/adiabatic_hydro_gr.cpp	/^void EquationOfState::PrimitiveToConserved($/;"	f	class:EquationOfState
PrimitiveToConserved	eos/adiabatic_hydro_sr.cpp	/^void EquationOfState::PrimitiveToConserved($/;"	f	class:EquationOfState
PrimitiveToConserved	eos/adiabatic_mhd.cpp	/^void EquationOfState::PrimitiveToConserved($/;"	f	class:EquationOfState
PrimitiveToConserved	eos/adiabatic_mhd_gr.cpp	/^void EquationOfState::PrimitiveToConserved($/;"	f	class:EquationOfState
PrimitiveToConserved	eos/adiabatic_mhd_sr.cpp	/^void EquationOfState::PrimitiveToConserved($/;"	f	class:EquationOfState
PrimitiveToConserved	eos/general/general_hydro.cpp	/^void EquationOfState::PrimitiveToConserved($/;"	f	class:EquationOfState
PrimitiveToConserved	eos/general/general_mhd.cpp	/^void EquationOfState::PrimitiveToConserved($/;"	f	class:EquationOfState
PrimitiveToConserved	eos/isothermal_hydro.cpp	/^void EquationOfState::PrimitiveToConserved($/;"	f	class:EquationOfState
PrimitiveToConserved	eos/isothermal_mhd.cpp	/^void EquationOfState::PrimitiveToConserved($/;"	f	class:EquationOfState
PrimitiveToConservedSingle	eos/adiabatic_hydro_gr.cpp	/^void PrimitiveToConservedSingle($/;"	f	namespace:__anon17
PrimitiveToConservedSingle	eos/adiabatic_mhd_gr.cpp	/^void PrimitiveToConservedSingle($/;"	f	namespace:__anon13
Primitives	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::Primitives(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
Primitives_STS	task_list/sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::Primitives_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
PrintIndex	fft/athena_fft.cpp	/^void AthenaFFTIndex::PrintIndex() {$/;"	f	class:AthenaFFTIndex
PrintNormFactor	fft/athena_fft.hpp	/^  void PrintNormFactor() {std::cout << norm_factor_ << std::endl;}$/;"	f	class:FFTBlock::AthenaFFTDirection
PrintSource	fft/athena_fft.cpp	/^void FFTBlock::PrintSource(int in) {$/;"	f	class:FFTBlock
ProblemGenerator	pgen/blast.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/cpaw.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/default_pgen.cpp	/^void __attribute__((weak)) MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/disk.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/disk_3d_mhd_dust.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin)$/;"	f	class:MeshBlock
ProblemGenerator	pgen/disk_RWI_2D.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/disk_VSI.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/disk_dust_diffusion.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/disk_dust_drift.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/disk_planet_dust_cylindrical.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/disk_planet_dust_spherical.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/disk_streaming_cylindrical.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/disk_streaming_spherical.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/dmr.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/dmr_dust.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/dust_NSH.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/dust_collision.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/dust_collision_different_Ts.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/dust_diffusion.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/dust_inelastic_collision.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/dust_squaredrag.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/dusty_kh.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/dusty_shock.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/dusty_soundwave.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/dusty_wave.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/dusty_wave_1d.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/eos_test.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/fft.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/field_loop.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/field_loop_poles.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/from_array.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/gr_blast.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/gr_bondi.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/gr_geodesic_infall.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/gr_linear_wave.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/gr_mhd_inflow.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/gr_shock_tube.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/gr_torus.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/hb3.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/hgb.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/inject_pebble_3D.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/jeans.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/jet.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/jgg.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/kh.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/kh_dust.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/linear_wave.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/lw_implode.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/magnoh.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/mignone_advection.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/noh.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/orszag_tang.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/poisson.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/quirk.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/resist.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/rotor.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/rt.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/scalar_diff.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/shk_cloud.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/shock_tube.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/shu_osher.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/slotted_cylinder.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/ssheet.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/ssheet_RWI_dust.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/ssheet_planet_dust.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/strat.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/streaming_eigen.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/streaming_eigen_2dust.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/streaming_nonlinear.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/streaming_stratified.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/turb.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/twoibw.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/visc.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/visc_dustfluids.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
ProblemGenerator	pgen/visc_scalars.cpp	/^void MeshBlock::ProblemGenerator(ParameterInput *pin) {$/;"	f	class:MeshBlock
Project	fft/turbulence.cpp	/^void TurbulenceDriver::Project(std::complex<Real> **fv, Real f_shear) {$/;"	f	class:TurbulenceDriver
Project	fft/turbulence.cpp	/^void TurbulenceDriver::Project(std::complex<Real> **fv, std::complex<Real> **fv_sh,$/;"	f	class:TurbulenceDriver
ProjectPressureInnerX2	pgen/rt.cpp	/^void ProjectPressureInnerX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f
ProjectPressureInnerX3	pgen/rt.cpp	/^void ProjectPressureInnerX3(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f
ProjectPressureOuterX2	pgen/rt.cpp	/^void ProjectPressureOuterX2(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f
ProjectPressureOuterX3	pgen/rt.cpp	/^void ProjectPressureOuterX3(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f
Prolongate	task_list/mg_task_list.cpp	/^TaskStatus MultigridTaskList::Prolongate(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
ProlongateAndCorrect	multigrid/multigrid.cpp	/^void Multigrid::ProlongateAndCorrect(AthenaArray<Real> &dst, const AthenaArray<Real> &src,$/;"	f	class:Multigrid
ProlongateAndCorrectBlock	multigrid/multigrid.cpp	/^void Multigrid::ProlongateAndCorrectBlock() {$/;"	f	class:Multigrid
ProlongateAndCorrectOctets	multigrid/multigrid_driver.cpp	/^void MultigridDriver::ProlongateAndCorrectOctets() {$/;"	f	class:MultigridDriver
ProlongateBoundaries	bvals/bvals_refine.cpp	/^void BoundaryValues::ProlongateBoundaries(const Real time, const Real dt,$/;"	f	class:BoundaryValues
ProlongateBoundary	task_list/mg_task_list.cpp	/^TaskStatus MultigridTaskList::ProlongateBoundary(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
ProlongateBoundaryForProlongation	task_list/mg_task_list.cpp	/^TaskStatus MultigridTaskList::ProlongateBoundaryForProlongation(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
ProlongateCellCenteredValues	mesh/mesh_refinement.cpp	/^void MeshRefinement::ProlongateCellCenteredValues($/;"	f	class:MeshRefinement
ProlongateGhostCells	bvals/bvals_refine.cpp	/^void BoundaryValues::ProlongateGhostCells(const NeighborBlock& nb,$/;"	f	class:BoundaryValues
ProlongateInternalField	mesh/mesh_refinement.cpp	/^void MeshRefinement::ProlongateInternalField($/;"	f	class:MeshRefinement
ProlongateMultigridBoundaries	bvals/cc/mg/bvals_mg.cpp	/^void MGBoundaryValues::ProlongateMultigridBoundaries(bool folddata) {$/;"	f	class:MGBoundaryValues
ProlongateMultigridBoundariesFluxCons	bvals/cc/mg/bvals_mg.cpp	/^void MGBoundaryValues::ProlongateMultigridBoundariesFluxCons() {$/;"	f	class:MGBoundaryValues
ProlongateOctetBoundaries	multigrid/multigrid_driver.cpp	/^void MultigridDriver::ProlongateOctetBoundaries(AthenaArray<Real> &u,$/;"	f	class:MultigridDriver
ProlongateOctetBoundariesFluxCons	gravity/mg_gravity.cpp	/^void MGGravityDriver::ProlongateOctetBoundariesFluxCons(AthenaArray<Real> &dst) {$/;"	f	class:MGGravityDriver
ProlongateSharedFieldX1	mesh/mesh_refinement.cpp	/^void MeshRefinement::ProlongateSharedFieldX1($/;"	f	class:MeshRefinement
ProlongateSharedFieldX2	mesh/mesh_refinement.cpp	/^void MeshRefinement::ProlongateSharedFieldX2($/;"	f	class:MeshRefinement
ProlongateSharedFieldX3	mesh/mesh_refinement.cpp	/^void MeshRefinement::ProlongateSharedFieldX3($/;"	f	class:MeshRefinement
Prolongation	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::Prolongation(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
Prolongation_STS	task_list/sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::Prolongation_STS(MeshBlock *pmb,$/;"	f	class:SuperTimeStepTaskList
Psi	pgen/ssheet_planet_dust.cpp	/^kappap, kappap2, Kai0, etaVk, AN, BN, Psi, time_drag, user_dt, rs, gmp, gMth, t_planet_growth,$/;"	m	namespace:__anon111	file:
QuadraticRoot	pgen/gr_linear_wave.cpp	/^Real QuadraticRoot(Real a1, Real a0, bool greater_root) {$/;"	f	namespace:__anon85
Quadrature	utils/gl_quadrature.cpp	/^struct Quadrature {$/;"	s	namespace:GaussLegendre	file:
QuarticRoots	pgen/gr_linear_wave.cpp	/^void QuarticRoots(Real a3, Real a2, Real a1, Real a0, Real *px1, Real *px2,$/;"	f	namespace:__anon85
QuickCreatePlan	fft/athena_fft.cpp	/^AthenaFFTPlan *FFTBlock::QuickCreatePlan(std::complex<Real> *data,$/;"	f	class:FFTBlock
QuickCreatePlan	fft/fft_driver.cpp	/^void FFTDriver::QuickCreatePlan() {$/;"	f	class:FFTDriver
R0	pgen/disk_3d_mhd_dust.cpp	/^Real GM = 1.0, R0 = 1.0;$/;"	m	namespace:__anon60	file:
RADIATION_ENABLED	defs.hpp	/^#define RADIATION_ENABLED /;"	d
RBmin	pgen/disk_3d_mhd_dust.cpp	/^Real beta, mu, Am_in, Am0, Bz0, A30, RBmin, taddBp;$/;"	m	namespace:__anon60	file:
RECONSTRUCT_RECONSTRUCTION_HPP_	reconstruct/reconstruction.hpp	/^#define RECONSTRUCT_RECONSTRUCTION_HPP_$/;"	d
REFLECTING_BNDRY	bvals/bvals_interfaces.hpp	/^      REFLECTING_BNDRY __attribute__((deprecated)),$/;"	e	enum:__anon2
REFLECTING_BNDRY	bvals/bvals_interfaces.hpp	/^enum {BLOCK_BNDRY = -1, BNDRY_UNDEF, REFLECTING_BNDRY, OUTFLOW_BNDRY, USER_BNDRY,$/;"	e	enum:__anon4
RELATIVISTIC_DYNAMICS	defs.hpp	/^#define RELATIVISTIC_DYNAMICS /;"	d
RIEMANN_SOLVER	defs.hpp	/^#define RIEMANN_SOLVER /;"	d
RK2BackwardEulerFeedback	dustfluids/dustfluids_drags/backwardEuler_integrator.cpp	/^void DustGasDrag::RK2BackwardEulerFeedback(const int stage,$/;"	f	class:DustGasDrag
RK2BackwardEulerNoFeedback	dustfluids/dustfluids_drags/backwardEuler_integrator.cpp	/^void DustGasDrag::RK2BackwardEulerNoFeedback(const int stage,$/;"	f	class:DustGasDrag
RK2ExplicitFeedback	dustfluids/dustfluids_drags/explicit_integrator.cpp	/^void DustGasDrag::RK2ExplicitFeedback(const int stage,$/;"	f	class:DustGasDrag
RK2ImplicitFeedback	dustfluids/dustfluids_drags/rk2implicit_integrator.cpp	/^void DustGasDrag::RK2ImplicitFeedback(const int stage,$/;"	f	class:DustGasDrag
RK2ImplicitNoFeedback	dustfluids/dustfluids_drags/rk2implicit_integrator.cpp	/^void DustGasDrag::RK2ImplicitNoFeedback(const int stage,$/;"	f	class:DustGasDrag
RK4_Flag	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^     RadiativeConduction_Flag, TransferFeedback_Flag, RK4_Flag, FeelOthers_Flag[11];$/;"	m	namespace:__anon68	file:
RK4_Flag	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^     RadiativeConduction_Flag, Gap_Flag, TransferFeedback_Flag, RK4_Flag, FeelOthers_Flag[11];$/;"	m	namespace:__anon109	file:
RNMX	utils/ran2.cpp	/^#define RNMX /;"	d	file:
RNMX	utils/ran2.cpp	/^#undef RNMX$/;"	d	file:
RadialD2G	pgen/disk_dust_drift.cpp	/^Real RadialD2G(const Real rad, const Real initial_dust2gas, const Real slope)$/;"	f	namespace:__anon65
RadialD2G	pgen/disk_streaming_cylindrical.cpp	/^Real RadialD2G(const Real rad, const Real initial_dust2gas, const Real slope)$/;"	f	namespace:__anon55
RadialD2G	pgen/disk_streaming_spherical.cpp	/^Real RadialD2G(const Real rad, const Real initial_dust2gas, const Real slope)$/;"	f	namespace:__anon76
RadialD2G	pgen/dust_diffusion.cpp	/^Real RadialD2G(const Real rad, const Real initial_dust2gas, const Real slope) {$/;"	f	namespace:__anon118
RadiativeConduction_Flag	pgen/disk_VSI.cpp	/^Isothermal_Flag, RadiativeConduction_Flag;$/;"	m	namespace:__anon133	file:
RadiativeConduction_Flag	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^     RadiativeConduction_Flag, TransferFeedback_Flag, RK4_Flag, FeelOthers_Flag[11];$/;"	m	namespace:__anon68	file:
RadiativeConduction_Flag	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^     RadiativeConduction_Flag, Gap_Flag, TransferFeedback_Flag, RK4_Flag, FeelOthers_Flag[11];$/;"	m	namespace:__anon109	file:
RadiativeConduction_Flag	pgen/disk_planet_dust_cylindrical.cpp	/^     RadiativeConduction_Flag, TransferFeedback_Flag;$/;"	m	namespace:__anon99	file:
RadiativeConduction_Flag	pgen/disk_planet_dust_spherical.cpp	/^     RadiativeConduction_Flag, TransferFeedback_Flag;$/;"	m	namespace:__anon113	file:
RadiativeCondution	pgen/disk_VSI.cpp	/^void RadiativeCondution(HydroDiffusion *phdif, MeshBlock *pmb,$/;"	f	namespace:__anon134
RadiativeCondution	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^void RadiativeCondution(HydroDiffusion *phdif, MeshBlock *pmb,$/;"	f	namespace:__anon69
RadiativeCondution	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^void RadiativeCondution(HydroDiffusion *phdif, MeshBlock *pmb,$/;"	f	namespace:__anon110
RadiativeCondution	pgen/disk_planet_dust_cylindrical.cpp	/^void RadiativeCondution(HydroDiffusion *phdif, MeshBlock *pmb,$/;"	f	namespace:__anon100
RadiativeCondution	pgen/disk_planet_dust_spherical.cpp	/^void RadiativeCondution(HydroDiffusion *phdif, MeshBlock *pmb,$/;"	f	namespace:__anon114
RaiseVectorCell	coordinates/coordinates.hpp	/^  virtual void RaiseVectorCell(Real a_0, Real a_1, Real a_2, Real a_3, int k, int j,$/;"	f	class:Coordinates
RaiseVectorCell	coordinates/gr_user.cpp	/^void GRUser::RaiseVectorCell(Real a_0, Real a_1, Real a_2, Real a_3, int k, int j, int i,$/;"	f	class:GRUser
RaiseVectorCell	coordinates/kerr-schild.cpp	/^void KerrSchild::RaiseVectorCell(Real a_0, Real a_1, Real a_2, Real a_3, int k, int j,$/;"	f	class:KerrSchild
RaiseVectorCell	coordinates/minkowski.cpp	/^void Minkowski::RaiseVectorCell(Real a_0, Real a_1, Real a_2, Real a_3, int k, int j,$/;"	f	class:Minkowski
RaiseVectorCell	coordinates/schwarzschild.cpp	/^void Schwarzschild::RaiseVectorCell(Real a_0, Real a_1, Real a_2, Real a_3, int k, int j,$/;"	f	class:Schwarzschild
Rbuf	pgen/disk_3d_mhd_dust.cpp	/^Real Rbuf, rho_floor, time_drag;$/;"	m	namespace:__anon60	file:
Read	outputs/io_wrapper.cpp	/^std::size_t IOWrapper::Read(void *buf, IOWrapperSizeT size, IOWrapperSizeT count) {$/;"	f	class:IOWrapper
ReadAsciiTable	utils/eos_table_class.cpp	/^void ReadAsciiTable(std::string fn, EosTable *peos_table, ParameterInput *pin) {$/;"	f
ReadBinaryTable	utils/eos_table_class.cpp	/^void ReadBinaryTable(std::string fn, EosTable *peos_table) {$/;"	f
ReadHDF5Table	utils/eos_table_class.cpp	/^void ReadHDF5Table(std::string fn, EosTable *peos_table, ParameterInput *pin) {$/;"	f
Read_all	outputs/io_wrapper.cpp	/^std::size_t IOWrapper::Read_all(void *buf, IOWrapperSizeT size, IOWrapperSizeT count) {$/;"	f	class:IOWrapper
Read_at	outputs/io_wrapper.cpp	/^std::size_t IOWrapper::Read_at(void *buf, IOWrapperSizeT size,$/;"	f	class:IOWrapper
Read_at_all	outputs/io_wrapper.cpp	/^std::size_t IOWrapper::Read_at_all(void *buf, IOWrapperSizeT size,$/;"	f	class:IOWrapper
ReceiveAndCorrectDustFluidsFlux	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveAndCorrectDustFluidsFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveAndCorrectEMF	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveAndCorrectEMF(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveAndCorrectHydroFlux	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveAndCorrectHydroFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveAndSetBoundariesWithWait	bvals/bvals_var.cpp	/^void BoundaryVariable::ReceiveAndSetBoundariesWithWait() {$/;"	f	class:BoundaryVariable
ReceiveAndSetBoundariesWithWait	bvals/fc/bvals_fc.cpp	/^void FaceCenteredBoundaryVariable::ReceiveAndSetBoundariesWithWait() {$/;"	f	class:FaceCenteredBoundaryVariable
ReceiveBoundary	task_list/mg_task_list.cpp	/^TaskStatus MultigridTaskList::ReceiveBoundary(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
ReceiveBoundaryBuffers	bvals/bvals_var.cpp	/^bool BoundaryVariable::ReceiveBoundaryBuffers() {$/;"	f	class:BoundaryVariable
ReceiveBoundaryBuffersCC	bvals/orbital/bvals_orbital.cpp	/^bool OrbitalBoundaryCommunication::ReceiveBoundaryBuffersCC() {$/;"	f	class:OrbitalBoundaryCommunication
ReceiveBoundaryBuffersFC	bvals/orbital/bvals_orbital.cpp	/^bool OrbitalBoundaryCommunication::ReceiveBoundaryBuffersFC() {$/;"	f	class:OrbitalBoundaryCommunication
ReceiveBoundaryFluxCons	task_list/mg_task_list.cpp	/^TaskStatus MultigridTaskList::ReceiveBoundaryFluxCons(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
ReceiveBoundaryForProlongation	task_list/mg_task_list.cpp	/^TaskStatus MultigridTaskList::ReceiveBoundaryForProlongation(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
ReceiveDustFluids	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveDustFluids(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveDustFluidsFluxShear	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveDustFluidsFluxShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveDustFluidsShear	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveDustFluidsShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveEMFShear	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveEMFShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveEMFShearingBoxBoundaryCorrection	bvals/fc/bvals_shear_emf.cpp	/^bool FaceCenteredBoundaryVariable::ReceiveEMFShearingBoxBoundaryCorrection() {$/;"	f	class:FaceCenteredBoundaryVariable
ReceiveFFTGravityBoundary	task_list/fft_grav_task_list.cpp	/^TaskStatus FFTGravitySolverTaskList::ReceiveFFTGravityBoundary(MeshBlock *pmb,$/;"	f	class:FFTGravitySolverTaskList
ReceiveField	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveField(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveFieldOrbital	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveFieldOrbital(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveFieldShear	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveFieldShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveFluxCorrection	bvals/cc/flux_correction_cc.cpp	/^bool CellCenteredBoundaryVariable::ReceiveFluxCorrection() {$/;"	f	class:CellCenteredBoundaryVariable
ReceiveFluxCorrection	bvals/fc/flux_correction_fc.cpp	/^bool FaceCenteredBoundaryVariable::ReceiveFluxCorrection() {$/;"	f	class:FaceCenteredBoundaryVariable
ReceiveFluxShearingBoxBoundaryBuffers	bvals/cc/bvals_shear_flux.cpp	/^bool CellCenteredBoundaryVariable::ReceiveFluxShearingBoxBoundaryBuffers() {$/;"	f	class:CellCenteredBoundaryVariable
ReceiveHydro	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveHydro(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveHydroFluxShear	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveHydroFluxShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveHydroOrbital	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveHydroOrbital(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveHydroShear	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveHydroShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveMultigridBoundaryBuffers	bvals/cc/mg/bvals_mg.cpp	/^bool MGBoundaryValues::ReceiveMultigridBoundaryBuffers(BoundaryQuantity type,$/;"	f	class:MGBoundaryValues
ReceiveScalarFlux	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveScalarFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveScalars	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveScalars(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveScalarsFluxShear	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveScalarsFluxShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveScalarsShear	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveScalarsShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveShearingBoxBoundaryBuffers	bvals/cc/bvals_shear_cc.cpp	/^bool CellCenteredBoundaryVariable::ReceiveShearingBoxBoundaryBuffers() {$/;"	f	class:CellCenteredBoundaryVariable
ReceiveShearingBoxBoundaryBuffers	bvals/fc/bvals_shear_fc.cpp	/^bool FaceCenteredBoundaryVariable::ReceiveShearingBoxBoundaryBuffers() {$/;"	f	class:FaceCenteredBoundaryVariable
Reconstruction	reconstruct/reconstruction.cpp	/^Reconstruction::Reconstruction(MeshBlock *pmb, ParameterInput *pin) :$/;"	f	class:Reconstruction
Reconstruction	reconstruct/reconstruction.hpp	/^class Reconstruction {$/;"	c
RedistributeAndRefineMeshBlocks	mesh/amr_loadbalance.cpp	/^void Mesh::RedistributeAndRefineMeshBlocks(ParameterInput *pin, int ntot) {$/;"	f	class:Mesh
Refine	mesh/meshblock_tree.cpp	/^void MeshBlockTree::Refine(int &nnew) {$/;"	f	class:MeshBlockTree
RefinementCondition	pgen/blast.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f
RefinementCondition	pgen/disk_RWI_2D.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f	namespace:__anon102
RefinementCondition	pgen/disk_VSI.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f	namespace:__anon134
RefinementCondition	pgen/disk_dust_diffusion.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f	namespace:__anon71
RefinementCondition	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f	namespace:__anon69
RefinementCondition	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f	namespace:__anon110
RefinementCondition	pgen/disk_planet_dust_cylindrical.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f	namespace:__anon100
RefinementCondition	pgen/disk_planet_dust_spherical.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f	namespace:__anon114
RefinementCondition	pgen/dmr.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f
RefinementCondition	pgen/dmr_dust.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f
RefinementCondition	pgen/dusty_kh.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f
RefinementCondition	pgen/dusty_wave.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f
RefinementCondition	pgen/field_loop_poles.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f
RefinementCondition	pgen/kh.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f
RefinementCondition	pgen/kh_dust.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f
RefinementCondition	pgen/linear_wave.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f
RefinementCondition	pgen/resist.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f
RefinementCondition	pgen/rt.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f
RefinementCondition	pgen/scalar_diff.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f
RefinementCondition	pgen/slotted_cylinder.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f
RefinementCondition	pgen/visc.cpp	/^int RefinementCondition(MeshBlock *pmb) {$/;"	f
ReflectInnerX1	bvals/cc/dustdiffusion/reflect_dustdiffusion.cpp	/^void DustDiffusionBoundaryVariable::ReflectInnerX1($/;"	f	class:DustDiffusionBoundaryVariable
ReflectInnerX1	bvals/cc/dustfluids/reflect_dustfluids.cpp	/^void DustFluidsBoundaryVariable::ReflectInnerX1($/;"	f	class:DustFluidsBoundaryVariable
ReflectInnerX1	bvals/cc/hydro/reflect_hydro.cpp	/^void HydroBoundaryVariable::ReflectInnerX1($/;"	f	class:HydroBoundaryVariable
ReflectInnerX1	bvals/cc/reflect_cc.cpp	/^void CellCenteredBoundaryVariable::ReflectInnerX1($/;"	f	class:CellCenteredBoundaryVariable
ReflectInnerX1	bvals/fc/reflect_fc.cpp	/^void FaceCenteredBoundaryVariable::ReflectInnerX1($/;"	f	class:FaceCenteredBoundaryVariable
ReflectInnerX2	bvals/cc/dustdiffusion/reflect_dustdiffusion.cpp	/^void DustDiffusionBoundaryVariable::ReflectInnerX2($/;"	f	class:DustDiffusionBoundaryVariable
ReflectInnerX2	bvals/cc/dustfluids/reflect_dustfluids.cpp	/^void DustFluidsBoundaryVariable::ReflectInnerX2($/;"	f	class:DustFluidsBoundaryVariable
ReflectInnerX2	bvals/cc/hydro/reflect_hydro.cpp	/^void HydroBoundaryVariable::ReflectInnerX2($/;"	f	class:HydroBoundaryVariable
ReflectInnerX2	bvals/cc/reflect_cc.cpp	/^void CellCenteredBoundaryVariable::ReflectInnerX2($/;"	f	class:CellCenteredBoundaryVariable
ReflectInnerX2	bvals/fc/reflect_fc.cpp	/^void FaceCenteredBoundaryVariable::ReflectInnerX2($/;"	f	class:FaceCenteredBoundaryVariable
ReflectInnerX3	bvals/cc/dustdiffusion/reflect_dustdiffusion.cpp	/^void DustDiffusionBoundaryVariable::ReflectInnerX3($/;"	f	class:DustDiffusionBoundaryVariable
ReflectInnerX3	bvals/cc/dustfluids/reflect_dustfluids.cpp	/^void DustFluidsBoundaryVariable::ReflectInnerX3($/;"	f	class:DustFluidsBoundaryVariable
ReflectInnerX3	bvals/cc/hydro/reflect_hydro.cpp	/^void HydroBoundaryVariable::ReflectInnerX3($/;"	f	class:HydroBoundaryVariable
ReflectInnerX3	bvals/cc/reflect_cc.cpp	/^void CellCenteredBoundaryVariable::ReflectInnerX3($/;"	f	class:CellCenteredBoundaryVariable
ReflectInnerX3	bvals/fc/reflect_fc.cpp	/^void FaceCenteredBoundaryVariable::ReflectInnerX3($/;"	f	class:FaceCenteredBoundaryVariable
ReflectOuterX1	bvals/cc/dustdiffusion/reflect_dustdiffusion.cpp	/^void DustDiffusionBoundaryVariable::ReflectOuterX1($/;"	f	class:DustDiffusionBoundaryVariable
ReflectOuterX1	bvals/cc/dustfluids/reflect_dustfluids.cpp	/^void DustFluidsBoundaryVariable::ReflectOuterX1($/;"	f	class:DustFluidsBoundaryVariable
ReflectOuterX1	bvals/cc/hydro/reflect_hydro.cpp	/^void HydroBoundaryVariable::ReflectOuterX1($/;"	f	class:HydroBoundaryVariable
ReflectOuterX1	bvals/cc/reflect_cc.cpp	/^void CellCenteredBoundaryVariable::ReflectOuterX1($/;"	f	class:CellCenteredBoundaryVariable
ReflectOuterX1	bvals/fc/reflect_fc.cpp	/^void FaceCenteredBoundaryVariable::ReflectOuterX1($/;"	f	class:FaceCenteredBoundaryVariable
ReflectOuterX2	bvals/cc/dustdiffusion/reflect_dustdiffusion.cpp	/^void DustDiffusionBoundaryVariable::ReflectOuterX2($/;"	f	class:DustDiffusionBoundaryVariable
ReflectOuterX2	bvals/cc/dustfluids/reflect_dustfluids.cpp	/^void DustFluidsBoundaryVariable::ReflectOuterX2($/;"	f	class:DustFluidsBoundaryVariable
ReflectOuterX2	bvals/cc/hydro/reflect_hydro.cpp	/^void HydroBoundaryVariable::ReflectOuterX2($/;"	f	class:HydroBoundaryVariable
ReflectOuterX2	bvals/cc/reflect_cc.cpp	/^void CellCenteredBoundaryVariable::ReflectOuterX2($/;"	f	class:CellCenteredBoundaryVariable
ReflectOuterX2	bvals/fc/reflect_fc.cpp	/^void FaceCenteredBoundaryVariable::ReflectOuterX2($/;"	f	class:FaceCenteredBoundaryVariable
ReflectOuterX3	bvals/cc/dustdiffusion/reflect_dustdiffusion.cpp	/^void DustDiffusionBoundaryVariable::ReflectOuterX3($/;"	f	class:DustDiffusionBoundaryVariable
ReflectOuterX3	bvals/cc/dustfluids/reflect_dustfluids.cpp	/^void DustFluidsBoundaryVariable::ReflectOuterX3($/;"	f	class:DustFluidsBoundaryVariable
ReflectOuterX3	bvals/cc/hydro/reflect_hydro.cpp	/^void HydroBoundaryVariable::ReflectOuterX3($/;"	f	class:HydroBoundaryVariable
ReflectOuterX3	bvals/cc/reflect_cc.cpp	/^void CellCenteredBoundaryVariable::ReflectOuterX3($/;"	f	class:CellCenteredBoundaryVariable
ReflectOuterX3	bvals/fc/reflect_fc.cpp	/^void FaceCenteredBoundaryVariable::ReflectOuterX3($/;"	f	class:FaceCenteredBoundaryVariable
RegionSize	athena.hpp	/^struct RegionSize {  \/\/ aggregate and POD type; do NOT reorder member declarations:$/;"	s
RegisterMeshBlockData	mesh/meshblock.cpp	/^void MeshBlock::RegisterMeshBlockData(AthenaArray<Real> &pvar_cc) {$/;"	f	class:MeshBlock
RegisterMeshBlockData	mesh/meshblock.cpp	/^void MeshBlock::RegisterMeshBlockData(FaceField &pvar_fc) {$/;"	f	class:MeshBlock
RemapFluxPlm	orbital_advection/orbital_remapping.cpp	/^void OrbitalAdvection::RemapFluxPlm(AthenaArray<Real> &pflux_,$/;"	f	class:OrbitalAdvection
RemapFluxPpm	orbital_advection/orbital_remapping.cpp	/^void OrbitalAdvection::RemapFluxPpm(AthenaArray<Real> &pflux_,$/;"	f	class:OrbitalAdvection
ReplaceOutputDataNode	outputs/outputs.cpp	/^void OutputType::ReplaceOutputDataNode(OutputData *pold, OutputData *pnew) {$/;"	f	class:OutputType
ReserveMeshBlockPhysIDs	mesh/mesh.cpp	/^void Mesh::ReserveMeshBlockPhysIDs() {$/;"	f	class:Mesh
ReserveTagPhysIDs	mesh/mesh.cpp	/^int Mesh::ReserveTagPhysIDs(int num_phys) {$/;"	f	class:Mesh
Reset	task_list/task_list.hpp	/^  void Reset(int ntasks) {$/;"	f	struct:TaskStates
ResetLoadBalanceVariables	mesh/amr_loadbalance.cpp	/^void Mesh::ResetLoadBalanceVariables() {$/;"	f	class:Mesh
ResetOrbitalSystemConversionFlag	orbital_advection/orbital_system_conversion.cpp	/^void OrbitalAdvection::ResetOrbitalSystemConversionFlag() {$/;"	f	class:OrbitalAdvection
ResetTimeMeasurement	mesh/meshblock.cpp	/^void MeshBlock::ResetTimeMeasurement() {$/;"	f	class:MeshBlock
RestartOutput	outputs/outputs.hpp	/^  explicit RestartOutput(OutputParameters oparams) : OutputType(oparams) {}$/;"	f	class:RestartOutput
RestartOutput	outputs/outputs.hpp	/^class RestartOutput : public OutputType {$/;"	c
Restrict	multigrid/multigrid.cpp	/^void Multigrid::Restrict(AthenaArray<Real> &dst, const AthenaArray<Real> &src,$/;"	f	class:Multigrid
Restrict	task_list/mg_task_list.cpp	/^TaskStatus MultigridTaskList::Restrict(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
RestrictBlock	multigrid/multigrid.cpp	/^void Multigrid::RestrictBlock() {$/;"	f	class:Multigrid
RestrictCellCenteredValues	mesh/mesh_refinement.cpp	/^void MeshRefinement::RestrictCellCenteredValues($/;"	f	class:MeshRefinement
RestrictFMGSource	multigrid/multigrid.cpp	/^void Multigrid::RestrictFMGSource() {$/;"	f	class:Multigrid
RestrictFMGSourceOctets	multigrid/multigrid_driver.cpp	/^void MultigridDriver::RestrictFMGSourceOctets() {$/;"	f	class:MultigridDriver
RestrictFieldX1	mesh/mesh_refinement.cpp	/^void MeshRefinement::RestrictFieldX1($/;"	f	class:MeshRefinement
RestrictFieldX2	mesh/mesh_refinement.cpp	/^void MeshRefinement::RestrictFieldX2($/;"	f	class:MeshRefinement
RestrictFieldX3	mesh/mesh_refinement.cpp	/^void MeshRefinement::RestrictFieldX3($/;"	f	class:MeshRefinement
RestrictGhostCellsOnSameLevel	bvals/bvals_refine.cpp	/^void BoundaryValues::RestrictGhostCellsOnSameLevel(const NeighborBlock& nb, int nk,$/;"	f	class:BoundaryValues
RestrictOctets	multigrid/multigrid_driver.cpp	/^void MultigridDriver::RestrictOctets() {$/;"	f	class:MultigridDriver
RestrictOctetsBeforeTransfer	multigrid/multigrid_driver.cpp	/^void MultigridDriver::RestrictOctetsBeforeTransfer() {$/;"	f	class:MultigridDriver
RetrieveDefect	multigrid/multigrid.cpp	/^void Multigrid::RetrieveDefect(AthenaArray<Real> &dst, int ns, int ngh) {$/;"	f	class:Multigrid
RetrieveResult	fft/athena_fft.cpp	/^void FFTBlock::RetrieveResult(AthenaArray<Real> &dst, bool nu, int ngh,$/;"	f	class:FFTBlock
RetrieveResult	multigrid/multigrid.cpp	/^void Multigrid::RetrieveResult(AthenaArray<Real> &dst, int ns, int ngh) {$/;"	f	class:Multigrid
RiemannSolver	hydro/rsolvers/hydro/hllc.cpp	/^void Hydro::RiemannSolver(const int k, const int j, const int il, const int iu,$/;"	f	class:Hydro
RiemannSolver	hydro/rsolvers/hydro/hllc_rel.cpp	/^void Hydro::RiemannSolver(const int k, const int j, const int il, const int iu,$/;"	f	class:Hydro
RiemannSolver	hydro/rsolvers/hydro/hlle.cpp	/^void Hydro::RiemannSolver(const int k, const int j, const int il, const int iu,$/;"	f	class:Hydro
RiemannSolver	hydro/rsolvers/hydro/hlle_rel.cpp	/^void Hydro::RiemannSolver(const int k, const int j, const int il, const int iu,$/;"	f	class:Hydro
RiemannSolver	hydro/rsolvers/hydro/hlle_rel_no_transform.cpp	/^void Hydro::RiemannSolver(const int k, const int j, const int il, const int iu,$/;"	f	class:Hydro
RiemannSolver	hydro/rsolvers/hydro/lhllc.cpp	/^void Hydro::RiemannSolver(const int k, const int j, const int il, const int iu,$/;"	f	class:Hydro
RiemannSolver	hydro/rsolvers/hydro/llf.cpp	/^void Hydro::RiemannSolver(const int k, const int j, const int il, const int iu,$/;"	f	class:Hydro
RiemannSolver	hydro/rsolvers/hydro/llf_rel.cpp	/^void Hydro::RiemannSolver(const int k, const int j, const int il, const int iu,$/;"	f	class:Hydro
RiemannSolver	hydro/rsolvers/hydro/llf_rel_no_transform.cpp	/^void Hydro::RiemannSolver(const int k, const int j, const int il, const int iu,$/;"	f	class:Hydro
RiemannSolver	hydro/rsolvers/hydro/roe.cpp	/^void Hydro::RiemannSolver(const int k, const int j, const int il, const int iu,$/;"	f	class:Hydro
RiemannSolver	hydro/rsolvers/mhd/hlld.cpp	/^void Hydro::RiemannSolver(const int k, const int j, const int il, const int iu,$/;"	f	class:Hydro
RiemannSolver	hydro/rsolvers/mhd/hlld_backup.cpp	/^void Hydro::RiemannSolver(const int k, const int j, const int il, const int iu,$/;"	f	class:Hydro
RiemannSolver	hydro/rsolvers/mhd/hlld_iso.cpp	/^void Hydro::RiemannSolver(const int k, const int j, const int il, const int iu,$/;"	f	class:Hydro
RiemannSolver	hydro/rsolvers/mhd/hlld_rel.cpp	/^void Hydro::RiemannSolver(const int k, const int j, const int il, const int iu,$/;"	f	class:Hydro
RiemannSolver	hydro/rsolvers/mhd/hlle_mhd.cpp	/^void Hydro::RiemannSolver(const int k, const int j, const int il, const int iu,$/;"	f	class:Hydro
RiemannSolver	hydro/rsolvers/mhd/hlle_mhd_rel.cpp	/^void Hydro::RiemannSolver(const int k, const int j, const int il, const int iu,$/;"	f	class:Hydro
RiemannSolver	hydro/rsolvers/mhd/hlle_mhd_rel_no_transform.cpp	/^void Hydro::RiemannSolver(const int k, const int j, const int il, const int iu,$/;"	f	class:Hydro
RiemannSolver	hydro/rsolvers/mhd/lhlld.cpp	/^void Hydro::RiemannSolver(const int k, const int j, const int il, const int iu,$/;"	f	class:Hydro
RiemannSolver	hydro/rsolvers/mhd/llf_mhd.cpp	/^void Hydro::RiemannSolver(const int k, const int j, const int il, const int iu,$/;"	f	class:Hydro
RiemannSolver	hydro/rsolvers/mhd/llf_mhd_rel.cpp	/^void Hydro::RiemannSolver(const int k, const int j, const int il, const int iu,$/;"	f	class:Hydro
RiemannSolver	hydro/rsolvers/mhd/llf_mhd_rel_no_transform.cpp	/^void Hydro::RiemannSolver(const int k, const int j, const int il, const int iu,$/;"	f	class:Hydro
RiemannSolver	hydro/rsolvers/mhd/roe_mhd.cpp	/^void Hydro::RiemannSolver(const int k, const int j, const int il, const int iu,$/;"	f	class:Hydro
RiemannSolverDustFluids_Penetration	dustfluids/dustfluids_Riemann_solver.cpp	/^void DustFluids::RiemannSolverDustFluids_Penetration(const int k, const int j, const int il, const int iu,$/;"	f	class:DustFluids
RiemannSolverDustFluids_noPenetration	dustfluids/dustfluids_Riemann_solver.cpp	/^void DustFluids::RiemannSolverDustFluids_noPenetration(const int k, const int j, const int il, const int iu,$/;"	f	class:DustFluids
RightEigenmatrixDotVector	reconstruct/characteristic.cpp	/^void Reconstruction::RightEigenmatrixDotVector($/;"	f	class:Reconstruction
RoeFlux	hydro/rsolvers/hydro/roe.cpp	/^inline void RoeFlux(const Real wroe[], const Real du[], const Real wli[], Real flx[],$/;"	f	namespace:__anon31
RoeFlux	hydro/rsolvers/mhd/roe_mhd.cpp	/^inline void RoeFlux(const Real wroe[], const Real b1, const Real x, const Real y,$/;"	f	namespace:__anon21
RollbackNextTime	parameter_input.cpp	/^void ParameterInput::RollbackNextTime() {$/;"	f	class:ParameterInput
RotatingSystemSourceTerms	hydro/srcterms/rotating_system_srcterms.cpp	/^void HydroSourceTerms::RotatingSystemSourceTerms$/;"	f	class:HydroSourceTerms
RotatingSystemSourceTermsDustFluids	dustfluids/srcterms/rotating_system_srcterms_dustfluids.cpp	/^void DustFluidsSourceTerms::RotatingSystemSourceTermsDustFluids$/;"	f	class:DustFluidsSourceTerms
RungeKutta	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^void RungeKutta(Real *q0, Real dt, Real *gmasses, Real *q1, int n, bool *feelothers) {$/;"	f
RungeKutta	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^void RungeKutta(Real *q0, Real dt, Real *gmasses, Real *q1, int n, bool *feelothers) {$/;"	f
SCALARS_SCALARS_HPP_	scalars/scalars.hpp	/^#define SCALARS_SCALARS_HPP_$/;"	d
SELF_GRAVITY_ENABLED	defs.hpp	/^#define SELF_GRAVITY_ENABLED /;"	d
SHEAR_PERIODIC	task_list/task_list.hpp	/^  bool SHEAR_PERIODIC; \/\/ flag for shear periodic boundary (true w\/ , false w\/o)$/;"	m	class:SuperTimeStepTaskList
SHEAR_PERIODIC	task_list/task_list.hpp	/^  bool SHEAR_PERIODIC; \/\/ flag for shear periodic boundary (true w\/ , false w\/o)$/;"	m	class:TimeIntegratorTaskList
SHEAR_PERIODIC_BNDRY	bvals/bvals_interfaces.hpp	/^      PERIODIC_BNDRY, POLAR_BNDRY, POLAR_BNDRY_WEDGE, SHEAR_PERIODIC_BNDRY};$/;"	e	enum:__anon4
SHEAR_PERIODIC_BNDRY	bvals/bvals_interfaces.hpp	/^      SHEAR_PERIODIC_BNDRY __attribute__((deprecated))};$/;"	e	enum:__anon2
SIGN	defs.hpp	/^#define SIGN(/;"	d
SIMD_WIDTH	athena.hpp	/^#define SIMD_WIDTH /;"	d
SINGLE_PRECISION_ENABLED	defs.hpp	/^#define SINGLE_PRECISION_ENABLED /;"	d
SMALL_NUMBER	hydro/rsolvers/mhd/hlld_backup.cpp	/^#define SMALL_NUMBER /;"	d	file:
SQR	defs.hpp	/^#define SQR(/;"	d
SQRT2	defs.hpp	/^#define SQRT2 /;"	d
STS_ENABLED	defs.hpp	/^#define STS_ENABLED /;"	d
Schwarzschild	coordinates/coordinates.hpp	/^class Schwarzschild : public Coordinates {$/;"	c
Schwarzschild	coordinates/schwarzschild.cpp	/^Schwarzschild::Schwarzschild(MeshBlock *pmb, ParameterInput *pin, bool flag)$/;"	f	class:Schwarzschild
SearchAndSetNeighbors	bvals/bvals_base.cpp	/^void BoundaryBase::SearchAndSetNeighbors(MeshBlockTree &tree, int *ranklist,$/;"	f	class:BoundaryBase
Seek	outputs/io_wrapper.cpp	/^int IOWrapper::Seek(IOWrapperSizeT offset) {$/;"	f	class:IOWrapper
SelectCoarseBuffer	bvals/cc/dustdiffusion/bvals_dustdiffusion.cpp	/^void DustDiffusionBoundaryVariable::SelectCoarseBuffer(DustDiffusionBoundaryQuantity dustdiffusion_type) {$/;"	f	class:DustDiffusionBoundaryVariable
SelectCoarseBuffer	bvals/cc/dustfluids/bvals_dustfluids.cpp	/^void DustFluidsBoundaryVariable::SelectCoarseBuffer(DustFluidsBoundaryQuantity dustfluids_type) {$/;"	f	class:DustFluidsBoundaryVariable
SelectCoarseBuffer	bvals/cc/hydro/bvals_hydro.cpp	/^void HydroBoundaryVariable::SelectCoarseBuffer(HydroBoundaryQuantity hydro_type) {$/;"	f	class:HydroBoundaryVariable
SelfGravity	hydro/srcterms/self_gravity.cpp	/^void HydroSourceTerms::SelfGravity(const Real dt,const AthenaArray<Real> *flux,$/;"	f	class:HydroSourceTerms
SendBoundary	task_list/mg_task_list.cpp	/^TaskStatus MultigridTaskList::SendBoundary(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
SendBoundaryBuffers	bvals/bvals_var.cpp	/^void BoundaryVariable::SendBoundaryBuffers() {$/;"	f	class:BoundaryVariable
SendBoundaryBuffersCC	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::SendBoundaryBuffersCC() {$/;"	f	class:OrbitalBoundaryCommunication
SendBoundaryBuffersFC	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::SendBoundaryBuffersFC() {$/;"	f	class:OrbitalBoundaryCommunication
SendBoundaryFluxCons	task_list/mg_task_list.cpp	/^TaskStatus MultigridTaskList::SendBoundaryFluxCons(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
SendBoundaryForProlongation	task_list/mg_task_list.cpp	/^TaskStatus MultigridTaskList::SendBoundaryForProlongation(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
SendDustFluids	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendDustFluids(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendDustFluidsFlux	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendDustFluidsFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendDustFluidsFluxShear	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendDustFluidsFluxShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendDustFluidsShear	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendDustFluidsShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendEMF	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendEMF(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendEMFShear	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendEMFShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendEMFShearingBoxBoundaryCorrection	bvals/fc/bvals_shear_emf.cpp	/^void FaceCenteredBoundaryVariable::SendEMFShearingBoxBoundaryCorrection() {$/;"	f	class:FaceCenteredBoundaryVariable
SendFFTGravityBoundary	task_list/fft_grav_task_list.cpp	/^TaskStatus FFTGravitySolverTaskList::SendFFTGravityBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:FFTGravitySolverTaskList
SendField	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendField(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendFieldOrbital	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendFieldOrbital(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendFieldShear	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendFieldShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendFluxCorrection	bvals/cc/flux_correction_cc.cpp	/^void CellCenteredBoundaryVariable::SendFluxCorrection() {$/;"	f	class:CellCenteredBoundaryVariable
SendFluxCorrection	bvals/fc/flux_correction_fc.cpp	/^void FaceCenteredBoundaryVariable::SendFluxCorrection() {$/;"	f	class:FaceCenteredBoundaryVariable
SendFluxShearingBoxBoundaryBuffers	bvals/cc/bvals_shear_flux.cpp	/^void CellCenteredBoundaryVariable::SendFluxShearingBoxBoundaryBuffers() {$/;"	f	class:CellCenteredBoundaryVariable
SendHydro	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendHydro(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendHydroFlux	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendHydroFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendHydroFluxShear	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendHydroFluxShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendHydroOrbital	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendHydroOrbital(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendHydroShear	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendHydroShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendMultigridBoundaryBuffers	bvals/cc/mg/bvals_mg.cpp	/^bool MGBoundaryValues::SendMultigridBoundaryBuffers(BoundaryQuantity type,$/;"	f	class:MGBoundaryValues
SendScalarFlux	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendScalarFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendScalars	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendScalars(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendScalarsFluxShear	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendScalarsFluxShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendScalarsShear	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendScalarsShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendShearingBoxBoundaryBuffers	bvals/cc/bvals_shear_cc.cpp	/^void CellCenteredBoundaryVariable::SendShearingBoxBoundaryBuffers() {$/;"	f	class:CellCenteredBoundaryVariable
SendShearingBoxBoundaryBuffers	bvals/fc/bvals_shear_fc.cpp	/^void FaceCenteredBoundaryVariable::SendShearingBoxBoundaryBuffers() {$/;"	f	class:FaceCenteredBoundaryVariable
SetBlockSizeAndBoundaries	mesh/mesh.cpp	/^void Mesh::SetBlockSizeAndBoundaries(LogicalLocation loc, RegionSize &block_size,$/;"	f	class:Mesh
SetBoolean	parameter_input.cpp	/^bool ParameterInput::SetBoolean(std::string block, std::string name, bool value) {$/;"	f	class:ParameterInput
SetBoundaries	bvals/bvals_var.cpp	/^void BoundaryVariable::SetBoundaries() {$/;"	f	class:BoundaryVariable
SetBoundaries	bvals/fc/bvals_fc.cpp	/^void FaceCenteredBoundaryVariable::SetBoundaries() {$/;"	f	class:FaceCenteredBoundaryVariable
SetBoundariesDustFluids	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SetBoundariesDustFluids(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SetBoundariesField	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SetBoundariesField(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SetBoundariesHydro	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SetBoundariesHydro(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SetBoundariesOctets	multigrid/multigrid_driver.cpp	/^void MultigridDriver::SetBoundariesOctets(bool fprolong, bool folddata) {$/;"	f	class:MultigridDriver
SetBoundariesScalars	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SetBoundariesScalars(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SetBoundaryFromCoarser	bvals/cc/bvals_cc.cpp	/^void CellCenteredBoundaryVariable::SetBoundaryFromCoarser(Real *buf,$/;"	f	class:CellCenteredBoundaryVariable
SetBoundaryFromCoarser	bvals/cc/dustdiffusion/bvals_dustdiffusion.cpp	/^void DustDiffusionBoundaryVariable::SetBoundaryFromCoarser(Real *buf,$/;"	f	class:DustDiffusionBoundaryVariable
SetBoundaryFromCoarser	bvals/cc/dustfluids/bvals_dustfluids.cpp	/^void DustFluidsBoundaryVariable::SetBoundaryFromCoarser(Real *buf,$/;"	f	class:DustFluidsBoundaryVariable
SetBoundaryFromCoarser	bvals/fc/bvals_fc.cpp	/^void FaceCenteredBoundaryVariable::SetBoundaryFromCoarser(Real *buf,$/;"	f	class:FaceCenteredBoundaryVariable
SetBoundaryFromFiner	bvals/cc/bvals_cc.cpp	/^void CellCenteredBoundaryVariable::SetBoundaryFromFiner(Real *buf,$/;"	f	class:CellCenteredBoundaryVariable
SetBoundaryFromFiner	bvals/cc/dustdiffusion/bvals_dustdiffusion.cpp	/^void DustDiffusionBoundaryVariable::SetBoundaryFromFiner(Real *buf,$/;"	f	class:DustDiffusionBoundaryVariable
SetBoundaryFromFiner	bvals/cc/dustfluids/bvals_dustfluids.cpp	/^void DustFluidsBoundaryVariable::SetBoundaryFromFiner(Real *buf,$/;"	f	class:DustFluidsBoundaryVariable
SetBoundaryFromFiner	bvals/fc/bvals_fc.cpp	/^void FaceCenteredBoundaryVariable::SetBoundaryFromFiner(Real *buf,$/;"	f	class:FaceCenteredBoundaryVariable
SetBoundarySameLevel	bvals/cc/bvals_cc.cpp	/^void CellCenteredBoundaryVariable::SetBoundarySameLevel(Real *buf,$/;"	f	class:CellCenteredBoundaryVariable
SetBoundarySameLevel	bvals/cc/dustdiffusion/bvals_dustdiffusion.cpp	/^void DustDiffusionBoundaryVariable::SetBoundarySameLevel(Real *buf,$/;"	f	class:DustDiffusionBoundaryVariable
SetBoundarySameLevel	bvals/cc/dustfluids/bvals_dustfluids.cpp	/^void DustFluidsBoundaryVariable::SetBoundarySameLevel(Real *buf,$/;"	f	class:DustFluidsBoundaryVariable
SetBoundarySameLevel	bvals/cc/hydro/bvals_hydro.cpp	/^void HydroBoundaryVariable::SetBoundarySameLevel(Real *buf,$/;"	f	class:HydroBoundaryVariable
SetBoundarySameLevel	bvals/fc/bvals_fc.cpp	/^void FaceCenteredBoundaryVariable::SetBoundarySameLevel(Real *buf,$/;"	f	class:FaceCenteredBoundaryVariable
SetCommunicator	outputs/io_wrapper.hpp	/^  void SetCommunicator(MPI_Comm scomm) { comm_=scomm;}$/;"	f	class:IOWrapper
SetCompletedFlagSameProcess	bvals/bvals_var.cpp	/^void BoundaryVariable::SetCompletedFlagSameProcess(NeighborBlock& nb) {$/;"	f	class:BoundaryVariable
SetCostForLoadBalancing	mesh/meshblock.cpp	/^void MeshBlock::SetCostForLoadBalancing(double cost) {$/;"	f	class:MeshBlock
SetData	multigrid/multigrid.cpp	/^void Multigrid::SetData(MGVariable type, int n, int k, int j, int i, Real v) {$/;"	f	class:Multigrid
SetDiffusivity	field/field_diffusion/field_diffusion.cpp	/^void FieldDiffusion::SetDiffusivity(const AthenaArray<Real> &w,$/;"	f	class:FieldDiffusion
SetDiffusivity	hydro/hydro_diffusion/hydro_diffusion.cpp	/^void HydroDiffusion::SetDiffusivity(const AthenaArray<Real> &w,$/;"	f	class:HydroDiffusion
SetDustDiffusionRefinement	mesh/mesh_refinement.cpp	/^void MeshRefinement::SetDustDiffusionRefinement(DustDiffusionBoundaryQuantity dustdiffusion_type) {$/;"	f	class:MeshRefinement
SetDustFluidsBufferFromCoarser	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::SetDustFluidsBufferFromCoarser($/;"	f	class:OrbitalBoundaryCommunication
SetDustFluidsBufferFromFiner	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::SetDustFluidsBufferFromFiner($/;"	f	class:OrbitalBoundaryCommunication
SetDustFluidsBufferSameLevel	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::SetDustFluidsBufferSameLevel($/;"	f	class:OrbitalBoundaryCommunication
SetDustFluidsProperties	dustfluids/dustfluids.cpp	/^void DustFluids::SetDustFluidsProperties(const Real time, const AthenaArray<Real> &w,$/;"	f	class:DustFluids
SetDustFluidsRefinement	mesh/mesh_refinement.cpp	/^void MeshRefinement::SetDustFluidsRefinement(DustFluidsBoundaryQuantity dustfluids_type) {$/;"	f	class:MeshRefinement
SetDvKc	orbital_advection/orbital_advection.cpp	/^void OrbitalAdvection::SetDvKc() {$/;"	f	class:OrbitalAdvection
SetEMFShearingBoxBoundaryCorrection	bvals/fc/bvals_shear_emf.cpp	/^void FaceCenteredBoundaryVariable::SetEMFShearingBoxBoundaryCorrection() {$/;"	f	class:FaceCenteredBoundaryVariable
SetEMFShearingBoxBoundarySameLevel	bvals/fc/bvals_shear_emf.cpp	/^void FaceCenteredBoundaryVariable::SetEMFShearingBoxBoundarySameLevel($/;"	f	class:FaceCenteredBoundaryVariable
SetFFTGravityBoundary	task_list/fft_grav_task_list.cpp	/^TaskStatus FFTGravitySolverTaskList::SetFFTGravityBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:FFTGravitySolverTaskList
SetFieldBufferFromCoarser	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::SetFieldBufferFromCoarser($/;"	f	class:OrbitalBoundaryCommunication
SetFieldBufferFromFiner	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::SetFieldBufferFromFiner($/;"	f	class:OrbitalBoundaryCommunication
SetFieldBufferSameLevel	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::SetFieldBufferSameLevel($/;"	f	class:OrbitalBoundaryCommunication
SetFinished	task_list/task_id.cpp	/^void TaskID::SetFinished(const TaskID& id) {$/;"	f	class:TaskID
SetFluxBoundaryFromFiner	bvals/cc/flux_correction_cc.cpp	/^void CellCenteredBoundaryVariable::SetFluxBoundaryFromFiner(Real *buf,$/;"	f	class:CellCenteredBoundaryVariable
SetFluxBoundaryFromFiner	bvals/fc/flux_correction_fc.cpp	/^void FaceCenteredBoundaryVariable::SetFluxBoundaryFromFiner(Real *buf,$/;"	f	class:FaceCenteredBoundaryVariable
SetFluxBoundaryFromPolar	bvals/fc/flux_correction_fc.cpp	/^void FaceCenteredBoundaryVariable::SetFluxBoundaryFromPolar(Real **buf_list, int num_bufs,$/;"	f	class:FaceCenteredBoundaryVariable
SetFluxBoundarySameLevel	bvals/cc/flux_correction_cc.cpp	/^void CellCenteredBoundaryVariable::SetFluxBoundarySameLevel(Real *buf,$/;"	f	class:CellCenteredBoundaryVariable
SetFluxBoundarySameLevel	bvals/fc/flux_correction_fc.cpp	/^void FaceCenteredBoundaryVariable::SetFluxBoundarySameLevel(Real *buf,$/;"	f	class:FaceCenteredBoundaryVariable
SetFluxShearingBoxBoundaryBuffers	bvals/cc/bvals_shear_flux.cpp	/^void CellCenteredBoundaryVariable::SetFluxShearingBoxBoundaryBuffers(int order) {$/;"	f	class:CellCenteredBoundaryVariable
SetFluxShearingBoxBoundarySameLevel	bvals/cc/bvals_shear_flux.cpp	/^void CellCenteredBoundaryVariable::SetFluxShearingBoxBoundarySameLevel($/;"	f	class:CellCenteredBoundaryVariable
SetFourPiG	mesh/mesh.hpp	/^  void SetFourPiG(Real fpg) { four_pi_G_=fpg; }$/;"	f	class:Mesh
SetFromRootGrid	multigrid/multigrid.cpp	/^void Multigrid::SetFromRootGrid(bool folddata) {$/;"	f	class:Multigrid
SetGravitationalConstant	mesh/mesh.hpp	/^  void SetGravitationalConstant(Real g) { four_pi_G_=4.0*PI*g; }$/;"	f	class:Mesh
SetGravityThreshold	mesh/mesh.hpp	/^  void SetGravityThreshold(Real eps) { grav_eps_=eps; }$/;"	f	class:Mesh
SetHydroBufferFromCoarser	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::SetHydroBufferFromCoarser($/;"	f	class:OrbitalBoundaryCommunication
SetHydroBufferFromFiner	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::SetHydroBufferFromFiner($/;"	f	class:OrbitalBoundaryCommunication
SetHydroBufferSameLevel	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::SetHydroBufferSameLevel($/;"	f	class:OrbitalBoundaryCommunication
SetHydroRefinement	mesh/mesh_refinement.cpp	/^void MeshRefinement::SetHydroRefinement(HydroBoundaryQuantity hydro_type) {$/;"	f	class:MeshRefinement
SetInteger	parameter_input.cpp	/^int ParameterInput::SetInteger(std::string block, std::string name, int value) {$/;"	f	class:ParameterInput
SetLocalIndex	fft/athena_fft.cpp	/^void AthenaFFTIndex::SetLocalIndex() {$/;"	f	class:AthenaFFTIndex
SetMGTaskListFMGProlongate	task_list/mg_task_list.cpp	/^void MultigridTaskList::SetMGTaskListFMGProlongate(int flag) {$/;"	f	class:MultigridTaskList
SetMGTaskListToCoarser	task_list/mg_task_list.cpp	/^void MultigridTaskList::SetMGTaskListToCoarser(int nsmooth, int ngh) {$/;"	f	class:MultigridTaskList
SetMGTaskListToFiner	task_list/mg_task_list.cpp	/^void MultigridTaskList::SetMGTaskListToFiner(int nsmooth, int ngh, int flag) {$/;"	f	class:MultigridTaskList
SetMultigridBoundaryFromCoarser	bvals/cc/mg/bvals_mg.cpp	/^void MGBoundaryValues::SetMultigridBoundaryFromCoarser(const Real *buf,$/;"	f	class:MGBoundaryValues
SetMultigridBoundaryFromCoarserFluxCons	bvals/cc/mg/bvals_mg.cpp	/^void MGGravityBoundaryValues::SetMultigridBoundaryFromCoarserFluxCons(const Real *buf,$/;"	f	class:MGGravityBoundaryValues
SetMultigridBoundaryFromFiner	bvals/cc/mg/bvals_mg.cpp	/^void MGBoundaryValues::SetMultigridBoundaryFromFiner(const Real *buf,$/;"	f	class:MGBoundaryValues
SetMultigridBoundaryFromFinerFluxCons	bvals/cc/mg/bvals_mg.cpp	/^void MGGravityBoundaryValues::SetMultigridBoundaryFromFinerFluxCons(const Real *buf,$/;"	f	class:MGGravityBoundaryValues
SetMultigridBoundarySameLevel	bvals/cc/mg/bvals_mg.cpp	/^void MGBoundaryValues::SetMultigridBoundarySameLevel(const Real *buf,$/;"	f	class:MGBoundaryValues
SetNeighbor	bvals/bvals_base.cpp	/^void NeighborBlock::SetNeighbor(int irank, int ilevel, int igid, int ilid,$/;"	f	class:NeighborBlock
SetNormFactor	fft/athena_fft.hpp	/^  void SetNormFactor(Real norm) { norm_factor_=norm;}$/;"	f	class:FFTBlock::AthenaFFTDirection
SetOctetBoundariesBeforeTransfer	multigrid/multigrid_driver.cpp	/^void MultigridDriver::SetOctetBoundariesBeforeTransfer(bool folddata) {$/;"	f	class:MultigridDriver
SetOctetBoundaryFromCoarser	multigrid/multigrid_driver.cpp	/^void MultigridDriver::SetOctetBoundaryFromCoarser(const AthenaArray<Real> &un,$/;"	f	class:MultigridDriver
SetOctetBoundarySameLevel	multigrid/multigrid_driver.cpp	/^void MultigridDriver::SetOctetBoundarySameLevel(AthenaArray<Real> &dst,$/;"	f	class:MultigridDriver
SetOrbitalAdvectionCC	orbital_advection/set_orbital_advection.cpp	/^void OrbitalAdvection::SetOrbitalAdvectionCC(const AthenaArray<Real> &u,$/;"	f	class:OrbitalAdvection
SetOrbitalAdvectionFC	orbital_advection/set_orbital_advection.cpp	/^void OrbitalAdvection::SetOrbitalAdvectionFC(const FaceField &b) {$/;"	f	class:OrbitalAdvection
SetOrbitalEdgeCC	orbital_advection/set_orbital_advection.cpp	/^void OrbitalAdvection::SetOrbitalEdgeCC(const Real dt, int *ssize[2], int *rsize[2]) {$/;"	f	class:OrbitalAdvection
SetOrbitalEdgeFC	orbital_advection/set_orbital_advection.cpp	/^void OrbitalAdvection::SetOrbitalEdgeFC(const Real dt, int *ssize[2], int *rsize[2]) {$/;"	f	class:OrbitalAdvection
SetPropertiesDustFluids	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SetPropertiesDustFluids(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SetReal	parameter_input.cpp	/^Real ParameterInput::SetReal(std::string block, std::string name, Real value) {$/;"	f	class:ParameterInput
SetScalarBufferFromCoarser	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::SetScalarBufferFromCoarser($/;"	f	class:OrbitalBoundaryCommunication
SetScalarBufferFromFiner	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::SetScalarBufferFromFiner($/;"	f	class:OrbitalBoundaryCommunication
SetScalarBufferSameLevel	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::SetScalarBufferSameLevel($/;"	f	class:OrbitalBoundaryCommunication
SetShearingBoxBoundaryBuffers	bvals/cc/bvals_shear_cc.cpp	/^void CellCenteredBoundaryVariable::SetShearingBoxBoundaryBuffers(int order) {$/;"	f	class:CellCenteredBoundaryVariable
SetShearingBoxBoundaryBuffers	bvals/fc/bvals_shear_fc.cpp	/^void FaceCenteredBoundaryVariable::SetShearingBoxBoundaryBuffers() {$/;"	f	class:FaceCenteredBoundaryVariable
SetShearingBoxBoundarySameLevel	bvals/cc/bvals_shear_cc.cpp	/^void CellCenteredBoundaryVariable::SetShearingBoxBoundarySameLevel($/;"	f	class:CellCenteredBoundaryVariable
SetShearingBoxBoundarySameLevel	bvals/fc/bvals_shear_fc.cpp	/^void FaceCenteredBoundaryVariable::SetShearingBoxBoundarySameLevel($/;"	f	class:FaceCenteredBoundaryVariable
SetSignalFlag	utils/signal_handler.cpp	/^void SetSignalFlag(int s) {$/;"	f	namespace:SignalHandler
SetSize	utils/interp_table.cpp	/^void InterpTable2D::SetSize(const int nvar, const int nx2, const int nx1) {$/;"	f	class:InterpTable2D
SetString	parameter_input.cpp	/^std::string ParameterInput::SetString(std::string block, std::string name,$/;"	f	class:ParameterInput
SetUserOutputVariableName	mesh/meshblock.cpp	/^void MeshBlock::SetUserOutputVariableName(int n, const char *name) {$/;"	f	class:MeshBlock
SetUserOutputVariableName_1D	mesh/meshblock.cpp	/^void MeshBlock::SetUserOutputVariableName_1D(int n, const char *name) {$/;"	f	class:MeshBlock
SetUserOutputVariableName_2D	mesh/meshblock.cpp	/^void MeshBlock::SetUserOutputVariableName_2D(int n, const char *name) {$/;"	f	class:MeshBlock
SetVKc	orbital_advection/orbital_advection.cpp	/^void OrbitalAdvection::SetVKc() {$/;"	f	class:OrbitalAdvection
SetVKcCoarse	orbital_advection/orbital_advection.cpp	/^void OrbitalAdvection::SetVKcCoarse() {$/;"	f	class:OrbitalAdvection
SetVKf	orbital_advection/orbital_advection.cpp	/^void OrbitalAdvection::SetVKf() {$/;"	f	class:OrbitalAdvection
SetVKfCoarse	orbital_advection/orbital_advection.cpp	/^void OrbitalAdvection::SetVKfCoarse() {$/;"	f	class:OrbitalAdvection
SetWallTimeAlarm	utils/signal_handler.cpp	/^void SetWallTimeAlarm(int t) {$/;"	f	namespace:SignalHandler
SetX1lim	utils/interp_table.cpp	/^void InterpTable2D::SetX1lim(Real x1min, Real x1max) {$/;"	f	class:InterpTable2D
SetX2lim	utils/interp_table.cpp	/^void InterpTable2D::SetX2lim(Real x2min, Real x2max) {$/;"	f	class:InterpTable2D
SetupMultigrid	multigrid/multigrid_driver.cpp	/^void MultigridDriver::SetupMultigrid() {$/;"	f	class:MultigridDriver
SetupPersistentMPI	bvals/bvals.cpp	/^void BoundaryValues::SetupPersistentMPI() {$/;"	f	class:BoundaryValues
SetupPersistentMPI	bvals/cc/bvals_cc.cpp	/^void CellCenteredBoundaryVariable::SetupPersistentMPI() {$/;"	f	class:CellCenteredBoundaryVariable
SetupPersistentMPI	bvals/fc/bvals_fc.cpp	/^void FaceCenteredBoundaryVariable::SetupPersistentMPI() {$/;"	f	class:FaceCenteredBoundaryVariable
SetupPersistentMPI	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::SetupPersistentMPI() {$/;"	f	class:OrbitalBoundaryCommunication
ShBoxCoord	pgen/dust_NSH.cpp	/^int ShBoxCoord, ipert, ifield; \/\/ initial pattern$/;"	m	namespace:__anon103	file:
ShBoxCoord	pgen/hb3.cpp	/^int ShBoxCoord, ipert,ifield; \/\/ initial pattern$/;"	m	namespace:__anon58	file:
ShBoxCoord	pgen/ssheet_RWI_dust.cpp	/^int ShBoxCoord;$/;"	m	namespace:__anon90	file:
ShBoxCoord	pgen/streaming_eigen.cpp	/^int ShBoxCoord, ipert, ifield; \/\/ initial pattern$/;"	m	namespace:__anon66	file:
ShBoxCoord	pgen/streaming_eigen_2dust.cpp	/^int ShBoxCoord, ipert, ifield; \/\/ initial pattern$/;"	m	namespace:__anon145	file:
ShBoxCoord	pgen/streaming_nonlinear.cpp	/^int ShBoxCoord, ipert, ifield; \/\/ initial pattern$/;"	m	namespace:__anon135	file:
ShBoxCoord	pgen/streaming_stratified.cpp	/^int ShBoxCoord, ipert, ifield; \/\/ initial pattern$/;"	m	namespace:__anon154	file:
ShBoxCoord_	dustfluids/srcterms/dustfluids_srcterms.hpp	/^  int  ShBoxCoord_;                 \/\/ ShearCoordinate type: 1=xy (default), 2=xz$/;"	m	class:DustFluidsSourceTerms
ShBoxCoord_	hydro/srcterms/hydro_srcterms.hpp	/^  int  ShBoxCoord_;       \/\/ ShearCoordinate type: 1=xy (default), 2=xz$/;"	m	class:HydroSourceTerms
ShallowSlice3DToPencil	athena_arrays.hpp	/^void AthenaArray<T>::ShallowSlice3DToPencil(AthenaArray<T> &src, const int k,$/;"	f	class:AthenaArray
ShearNeighborData	bvals/bvals_interfaces.hpp	/^struct ShearNeighborData {$/;"	s
ShearQuantities	bvals/cc/bvals_cc.hpp	/^  virtual void ShearQuantities(AthenaArray<Real> &shear_cc_, bool upper) {}$/;"	f	class:CellCenteredBoundaryVariable
ShearQuantities	bvals/cc/dustdiffusion/bvals_shear_dustdiffusion.cpp	/^void DustDiffusionBoundaryVariable::ShearQuantities(AthenaArray<Real> &shear_cc_, bool upper) {$/;"	f	class:DustDiffusionBoundaryVariable
ShearQuantities	bvals/cc/dustfluids/bvals_shear_dustfluids.cpp	/^void DustFluidsBoundaryVariable::ShearQuantities(AthenaArray<Real> &shear_cc_, bool upper) {$/;"	f	class:DustFluidsBoundaryVariable
ShearQuantities	bvals/cc/hydro/bvals_shear_hydro.cpp	/^void HydroBoundaryVariable::ShearQuantities(AthenaArray<Real> &shear_cc_, bool upper) {$/;"	f	class:HydroBoundaryVariable
ShearingBoxSourceTerms	hydro/srcterms/shearing_box.cpp	/^void HydroSourceTerms::ShearingBoxSourceTerms(const Real dt,$/;"	f	class:HydroSourceTerms
ShearingBoxSourceTermsDustFluids	dustfluids/srcterms/shearing_box_dustfluids.cpp	/^void DustFluidsSourceTerms::ShearingBoxSourceTermsDustFluids(const Real dt,$/;"	f	class:DustFluidsSourceTerms
ShockCloudInnerX1	pgen/shk_cloud.cpp	/^void ShockCloudInnerX1(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f
ShockInnerX1	pgen/dusty_shock.cpp	/^void ShockInnerX1(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
ShockOuterX1	pgen/dusty_shock.cpp	/^void ShockOuterX1(MeshBlock *pmb,Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df,$/;"	f
ShowConfig	utils/show_config.cpp	/^void ShowConfig() {$/;"	f
SignalHandler	utils/signal_handler.cpp	/^namespace SignalHandler {$/;"	n	file:
SignalHandler	utils/utils.hpp	/^namespace SignalHandler {$/;"	n
SignalHandlerInit	utils/signal_handler.cpp	/^void SignalHandlerInit() {$/;"	f	namespace:SignalHandler
SimpleNeighborBlock	bvals/bvals_interfaces.hpp	/^struct SimpleNeighborBlock { \/\/ aggregate and POD$/;"	s
SliceOutputData	outputs/outputs.cpp	/^bool OutputType::SliceOutputData(MeshBlock *pmb, int dim) {$/;"	f	class:OutputType
SlottedCylinderProfile	pgen/slotted_cylinder.cpp	/^Real SlottedCylinderProfile(Real x1, Real x2) {$/;"	f	namespace:__anon83
Smooth	gravity/mg_gravity.cpp	/^void MGGravity::Smooth(AthenaArray<Real> &u, const AthenaArray<Real> &src, int rlev,$/;"	f	class:MGGravity
SmoothBlack	task_list/mg_task_list.cpp	/^TaskStatus MultigridTaskList::SmoothBlack(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
SmoothBlock	multigrid/multigrid.cpp	/^void Multigrid::SmoothBlock(int color) {$/;"	f	class:Multigrid
SmoothOctets	multigrid/multigrid_driver.cpp	/^void MultigridDriver::SmoothOctets(int color) {$/;"	f	class:MultigridDriver
SmoothRed	task_list/mg_task_list.cpp	/^TaskStatus MultigridTaskList::SmoothRed(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
Solve	gravity/fft_gravity.cpp	/^void FFTGravityDriver::Solve(int stage, int mode) {$/;"	f	class:FFTGravityDriver
Solve	gravity/mg_gravity.cpp	/^void MGGravityDriver::Solve(int stage) {$/;"	f	class:MGGravityDriver
SolveCoarsestGrid	multigrid/multigrid_driver.cpp	/^void MultigridDriver::SolveCoarsestGrid() {$/;"	f	class:MultigridDriver
SolveFMGCycle	multigrid/multigrid_driver.cpp	/^void MultigridDriver::SolveFMGCycle() {$/;"	f	class:MultigridDriver
SolveIterative	multigrid/multigrid_driver.cpp	/^void MultigridDriver::SolveIterative(Real inidef) {$/;"	f	class:MultigridDriver
SolveLinearEquation	dustfluids/dustfluids_drags/inversion.cpp	/^void DustGasDrag::SolveLinearEquation(const AthenaArray<Real> &index_vector,$/;"	f	class:DustGasDrag
SolveMultipleLinearEquation	dustfluids/dustfluids_drags/inversion.cpp	/^void DustGasDrag::SolveMultipleLinearEquation(const AthenaArray<Real> &index_vector,$/;"	f	class:DustGasDrag
SolveVCycle	multigrid/multigrid_driver.cpp	/^void MultigridDriver::SolveVCycle(int npresmooth, int npostsmooth) {$/;"	f	class:MultigridDriver
SoundSpeed	eos/adiabatic_hydro.cpp	/^Real EquationOfState::SoundSpeed(const Real prim[NHYDRO]) {$/;"	f	class:EquationOfState
SoundSpeed	eos/adiabatic_mhd.cpp	/^Real EquationOfState::SoundSpeed(const Real prim[NHYDRO]) {$/;"	f	class:EquationOfState
SoundSpeed	eos/eos.hpp	/^  Real SoundSpeed(const Real[]) {return 0.0;}$/;"	f	class:EquationOfState
SoundSpeed	eos/general/general_hydro.cpp	/^Real EquationOfState::SoundSpeed(const Real prim[NHYDRO]) {$/;"	f	class:EquationOfState
SoundSpeed	eos/general/general_mhd.cpp	/^Real EquationOfState::SoundSpeed(const Real prim[NHYDRO]) {$/;"	f	class:EquationOfState
SoundSpeed	eos/isothermal_hydro.cpp	/^Real EquationOfState::SoundSpeed(const Real dummy_arg[NHYDRO]) {$/;"	f	class:EquationOfState
SoundSpeed	eos/isothermal_mhd.cpp	/^Real EquationOfState::SoundSpeed(const Real prim[NHYDRO]) {$/;"	f	class:EquationOfState
SoundSpeed_DustFluids	eos/eos.hpp	/^  Real SoundSpeed_DustFluids(const Real dust_nu, const Real t_eddy) {return 0.0;}$/;"	f	class:EquationOfState
SoundSpeed_Flag	dustfluids/dustfluids.hpp	/^  bool SoundSpeed_Flag; \/\/ true or false, turn on the sound speed of dust fluids$/;"	m	class:DustFluids
SoundSpeedsGR	eos/adiabatic_hydro_gr.cpp	/^void EquationOfState::SoundSpeedsGR(Real rho_h, Real pgas, Real u0, Real u1, Real g00,$/;"	f	class:EquationOfState
SoundSpeedsGR	eos/eos.hpp	/^  void SoundSpeedsGR(Real, Real, Real, Real, Real, Real, Real, Real *, Real *)$/;"	f	class:EquationOfState
SoundSpeedsSR	eos/adiabatic_hydro_gr.cpp	/^void EquationOfState::SoundSpeedsSR(Real rho_h, Real pgas, Real vx, Real gamma_lorentz_sq,$/;"	f	class:EquationOfState
SoundSpeedsSR	eos/adiabatic_hydro_sr.cpp	/^void EquationOfState::SoundSpeedsSR(Real rho_h, Real pgas, Real vx, Real gamma_lorentz_sq,$/;"	f	class:EquationOfState
SoundSpeedsSR	eos/eos.hpp	/^  void SoundSpeedsSR(Real, Real, Real, Real, Real *, Real *) {return;}$/;"	f	class:EquationOfState
Sph2Car	pgen/inject_pebble_3D.cpp	/^void Sph2Car(Real rad, Real theta,Real phi, Real &vx, Real &vy, Real &vz, Real v1, Real v2, Real v3) {$/;"	f	namespace:__anon63
SphOrbitalVelocity	orbital_advection/default_orbital_velocity.cpp	/^Real SphOrbitalVelocity(OrbitalAdvection *porb, Real x_, Real y_, Real z_) {$/;"	f
SphOrbitalVelocity_r	orbital_advection/default_orbital_velocity.cpp	/^Real SphOrbitalVelocity_r(OrbitalAdvection *porb, Real x_, Real y_, Real z_) {$/;"	f
SphOrbitalVelocity_t	orbital_advection/default_orbital_velocity.cpp	/^Real SphOrbitalVelocity_t(OrbitalAdvection *porb, Real x_, Real y_, Real z_) {$/;"	f
SphericalPolar	coordinates/coordinates.hpp	/^class SphericalPolar : public Coordinates {$/;"	c
SphericalPolar	coordinates/spherical_polar.cpp	/^SphericalPolar::SphericalPolar(MeshBlock *pmb, ParameterInput *pin, bool flag)$/;"	f	class:SphericalPolar
SsheetLowerX3	pgen/ssheet_RWI_dust.cpp	/^void SsheetLowerX3(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f
SsheetLowerX3	pgen/ssheet_planet_dust.cpp	/^void SsheetLowerX3(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f
SsheetUpperX3	pgen/ssheet_RWI_dust.cpp	/^void SsheetUpperX3(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f
SsheetUpperX3	pgen/ssheet_planet_dust.cpp	/^void SsheetUpperX3(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim,$/;"	f
Stage_I_delta_mom1	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> Stage_I_delta_mom1, Stage_I_delta_mom2, Stage_I_delta_mom3; \/\/ Arrays of temporary delta momenta in Stage I$/;"	m	class:DustFluids
Stage_I_delta_mom2	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> Stage_I_delta_mom1, Stage_I_delta_mom2, Stage_I_delta_mom3; \/\/ Arrays of temporary delta momenta in Stage I$/;"	m	class:DustFluids
Stage_I_delta_mom3	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> Stage_I_delta_mom1, Stage_I_delta_mom2, Stage_I_delta_mom3; \/\/ Arrays of temporary delta momenta in Stage I$/;"	m	class:DustFluids
Stage_I_vel1	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> Stage_I_vel1, Stage_I_vel2, Stage_I_vel3;                   \/\/ Arrays of temporary velocities$/;"	m	class:DustFluids
Stage_I_vel2	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> Stage_I_vel1, Stage_I_vel2, Stage_I_vel3;                   \/\/ Arrays of temporary velocities$/;"	m	class:DustFluids
Stage_I_vel3	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> Stage_I_vel1, Stage_I_vel2, Stage_I_vel3;                   \/\/ Arrays of temporary velocities$/;"	m	class:DustFluids
StartReceive	task_list/mg_task_list.cpp	/^TaskStatus MultigridTaskList::StartReceive(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
StartReceiveFluxCons	task_list/mg_task_list.cpp	/^TaskStatus MultigridTaskList::StartReceiveFluxCons(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
StartReceiveForProlongation	task_list/mg_task_list.cpp	/^TaskStatus MultigridTaskList::StartReceiveForProlongation(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
StartReceiving	bvals/cc/bvals_cc.cpp	/^void CellCenteredBoundaryVariable::StartReceiving(BoundaryCommSubset phase) {$/;"	f	class:CellCenteredBoundaryVariable
StartReceiving	bvals/fc/bvals_fc.cpp	/^void FaceCenteredBoundaryVariable::StartReceiving(BoundaryCommSubset phase) {$/;"	f	class:FaceCenteredBoundaryVariable
StartReceiving	bvals/orbital/bvals_orbital.cpp	/^void OrbitalBoundaryCommunication::StartReceiving(BoundaryCommSubset phase) {$/;"	f	class:OrbitalBoundaryCommunication
StartReceivingMultigrid	bvals/cc/mg/bvals_mg.cpp	/^void MGBoundaryValues::StartReceivingMultigrid(BoundaryQuantity type, bool folddata) {$/;"	f	class:MGBoundaryValues
StartReceivingShear	bvals/bvals.cpp	/^void BoundaryValues::StartReceivingShear(BoundaryCommSubset phase) {$/;"	f	class:BoundaryValues
StartReceivingShear	bvals/cc/bvals_shear_cc.cpp	/^void CellCenteredBoundaryVariable::StartReceivingShear(BoundaryCommSubset phase) {$/;"	f	class:CellCenteredBoundaryVariable
StartReceivingShear	bvals/fc/bvals_shear_fc.cpp	/^void FaceCenteredBoundaryVariable::StartReceivingShear(BoundaryCommSubset phase) {$/;"	f	class:FaceCenteredBoundaryVariable
StartReceivingSubset	bvals/bvals.cpp	/^void BoundaryValues::StartReceivingSubset(BoundaryCommSubset phase,$/;"	f	class:BoundaryValues
StartTimeMeasurement	mesh/meshblock.cpp	/^void MeshBlock::StartTimeMeasurement() {$/;"	f	class:MeshBlock
StartupTaskList	task_list/fft_grav_task_list.cpp	/^void FFTGravitySolverTaskList::StartupTaskList(MeshBlock *pmb, int stage) {$/;"	f	class:FFTGravitySolverTaskList
StartupTaskList	task_list/sts_task_list.cpp	/^void SuperTimeStepTaskList::StartupTaskList(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
StartupTaskList	task_list/time_integrator.cpp	/^void TimeIntegratorTaskList::StartupTaskList(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
Stokes_number	pgen/disk_3d_mhd_dust.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS],$/;"	m	namespace:__anon60	file:
Stokes_number	pgen/disk_RWI_2D.cpp	/^Real initial_D2G[NDUSTFLUIDS], ring_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS], weight_dust[NDUSTFLUIDS];$/;"	m	namespace:__anon101	file:
Stokes_number	pgen/disk_VSI.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS],$/;"	m	namespace:__anon133	file:
Stokes_number	pgen/disk_dust_diffusion.cpp	/^Real initial_D2G[NDUSTFLUIDS], ring_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS],$/;"	m	namespace:__anon70	file:
Stokes_number	pgen/disk_dust_drift.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS];$/;"	m	namespace:__anon64	file:
Stokes_number	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS],$/;"	m	namespace:__anon68	file:
Stokes_number	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS],$/;"	m	namespace:__anon109	file:
Stokes_number	pgen/disk_planet_dust_cylindrical.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS],$/;"	m	namespace:__anon99	file:
Stokes_number	pgen/disk_planet_dust_spherical.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS],$/;"	m	namespace:__anon113	file:
Stokes_number	pgen/disk_streaming_cylindrical.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS];$/;"	m	namespace:__anon54	file:
Stokes_number	pgen/disk_streaming_spherical.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS];$/;"	m	namespace:__anon75	file:
Stokes_number	pgen/dust_NSH.cpp	/^Real Stokes_number[NDUSTFLUIDS];$/;"	m	namespace:__anon103	file:
Stokes_number	pgen/dust_diffusion.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], nu_dust[NDUSTFLUIDS], Hratio[NDUSTFLUIDS];$/;"	m	namespace:__anon117	file:
Stokes_number	pgen/inject_pebble_3D.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS], boundary_D2G[NDUSTFLUIDS], const_stopping_time[NDUSTFLUIDS];$/;"	m	namespace:__anon62	file:
Stokes_number	pgen/ssheet_RWI_dust.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS];$/;"	m	namespace:__anon90	file:
Stokes_number	pgen/ssheet_planet_dust.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS];$/;"	m	namespace:__anon111	file:
Stokes_number	pgen/streaming_eigen.cpp	/^Real Stokes_number[NDUSTFLUIDS];$/;"	m	namespace:__anon66	file:
Stokes_number	pgen/streaming_eigen_2dust.cpp	/^Real Stokes_number[NDUSTFLUIDS];$/;"	m	namespace:__anon145	file:
Stokes_number	pgen/streaming_nonlinear.cpp	/^Real Stokes_number[NDUSTFLUIDS];$/;"	m	namespace:__anon135	file:
Stokes_number	pgen/streaming_stratified.cpp	/^Real Stokes_number[NDUSTFLUIDS];$/;"	m	namespace:__anon154	file:
StopTimeMeasurement	mesh/meshblock.cpp	/^void MeshBlock::StopTimeMeasurement() {$/;"	f	class:MeshBlock
StoreOldData	multigrid/multigrid.cpp	/^void Multigrid::StoreOldData() {$/;"	f	class:Multigrid
StoreOldDataOctets	multigrid/multigrid_driver.cpp	/^void MultigridDriver::StoreOldDataOctets() {$/;"	f	class:MultigridDriver
StratOutflowInnerX3	pgen/strat.cpp	/^void StratOutflowInnerX3(MeshBlock *pmb, Coordinates *pco,$/;"	f
StratOutflowOuterX3	pgen/strat.cpp	/^void StratOutflowOuterX3(MeshBlock *pmb, Coordinates *pco,$/;"	f
SubtractAverage	multigrid/multigrid.cpp	/^void Multigrid::SubtractAverage(MGVariable type, int n, Real ave) {$/;"	f	class:Multigrid
SubtractAverage	multigrid/multigrid_driver.cpp	/^void MultigridDriver::SubtractAverage(MGVariable type) {$/;"	f	class:MultigridDriver
SumOutputData	outputs/outputs.cpp	/^void OutputType::SumOutputData(MeshBlock* pmb, int dim) {$/;"	f	class:OutputType
SuperTimeStepTaskList	task_list/sts_task_list.cpp	/^SuperTimeStepTaskList::SuperTimeStepTaskList($/;"	f	class:SuperTimeStepTaskList
SuperTimeStepTaskList	task_list/task_list.hpp	/^class SuperTimeStepTaskList : public TaskList {$/;"	c
Swap4Bytes	outputs/vtk.cpp	/^inline void Swap4Bytes(void *vdat) {$/;"	f	namespace:__anon9
Swap4Bytes	pgen/disk_VSI.cpp	/^void Swap4Bytes(void *vdat) {$/;"	f	namespace:__anon134
SwapAthenaArray	athena_arrays.hpp	/^void AthenaArray<T>::SwapAthenaArray(AthenaArray<T>& array2) {$/;"	f	class:AthenaArray
SwapAxis	fft/athena_fft.cpp	/^void AthenaFFTIndex::SwapAxis(int ref_axis) {$/;"	f	class:AthenaFFTIndex
SwapDustDiffusionQuantity	bvals/cc/dustdiffusion/bvals_dustdiffusion.cpp	/^void DustDiffusionBoundaryVariable::SwapDustDiffusionQuantity(AthenaArray<Real> &var_dustdiffusion,$/;"	f	class:DustDiffusionBoundaryVariable
SwapDustFluidsQuantity	bvals/cc/dustfluids/bvals_dustfluids.cpp	/^void DustFluidsBoundaryVariable::SwapDustFluidsQuantity(AthenaArray<Real> &var_dustfluids,$/;"	f	class:DustFluidsBoundaryVariable
SwapHydroQuantity	bvals/cc/hydro/bvals_hydro.cpp	/^void HydroBoundaryVariable::SwapHydroQuantity(AthenaArray<Real> &var_hydro,$/;"	f	class:HydroBoundaryVariable
SwapProc	fft/athena_fft.cpp	/^void AthenaFFTIndex::SwapProc(int ref_axis) {$/;"	f	class:AthenaFFTIndex
Swap_	fft/athena_fft.cpp	/^template <typename T> void AthenaFFTIndex::Swap_(T loc[], int ref_axis) {$/;"	f	class:AthenaFFTIndex
T00	athena.hpp	/^enum TriangleIndex {T00=0, T10=1, T11=2, T20=3, T21=4, T22=5, T30=6, T31=7, T32=8, T33=9,$/;"	e	enum:TriangleIndex
T10	athena.hpp	/^enum TriangleIndex {T00=0, T10=1, T11=2, T20=3, T21=4, T22=5, T30=6, T31=7, T32=8, T33=9,$/;"	e	enum:TriangleIndex
T11	athena.hpp	/^enum TriangleIndex {T00=0, T10=1, T11=2, T20=3, T21=4, T22=5, T30=6, T31=7, T32=8, T33=9,$/;"	e	enum:TriangleIndex
T20	athena.hpp	/^enum TriangleIndex {T00=0, T10=1, T11=2, T20=3, T21=4, T22=5, T30=6, T31=7, T32=8, T33=9,$/;"	e	enum:TriangleIndex
T21	athena.hpp	/^enum TriangleIndex {T00=0, T10=1, T11=2, T20=3, T21=4, T22=5, T30=6, T31=7, T32=8, T33=9,$/;"	e	enum:TriangleIndex
T22	athena.hpp	/^enum TriangleIndex {T00=0, T10=1, T11=2, T20=3, T21=4, T22=5, T30=6, T31=7, T32=8, T33=9,$/;"	e	enum:TriangleIndex
T30	athena.hpp	/^enum TriangleIndex {T00=0, T10=1, T11=2, T20=3, T21=4, T22=5, T30=6, T31=7, T32=8, T33=9,$/;"	e	enum:TriangleIndex
T31	athena.hpp	/^enum TriangleIndex {T00=0, T10=1, T11=2, T20=3, T21=4, T22=5, T30=6, T31=7, T32=8, T33=9,$/;"	e	enum:TriangleIndex
T32	athena.hpp	/^enum TriangleIndex {T00=0, T10=1, T11=2, T20=3, T21=4, T22=5, T30=6, T31=7, T32=8, T33=9,$/;"	e	enum:TriangleIndex
T33	athena.hpp	/^enum TriangleIndex {T00=0, T10=1, T11=2, T20=3, T21=4, T22=5, T30=6, T31=7, T32=8, T33=9,$/;"	e	enum:TriangleIndex
TASK_LIST_FFT_GRAV_TASK_LIST_HPP_	task_list/fft_grav_task_list.hpp	/^#define TASK_LIST_FFT_GRAV_TASK_LIST_HPP_$/;"	d
TASK_LIST_MG_TASK_LIST_HPP_	task_list/mg_task_list.hpp	/^#define TASK_LIST_MG_TASK_LIST_HPP_$/;"	d
TASK_LIST_TASK_LIST_HPP_	task_list/task_list.hpp	/^#define TASK_LIST_TASK_LIST_HPP_$/;"	d
TINY_NUMBER	defs.hpp	/^#define TINY_NUMBER /;"	d
TRBDF2Feedback	dustfluids/dustfluids_drags/trbdf2_integrator.cpp	/^void DustGasDrag::TRBDF2Feedback(const int stage,$/;"	f	class:DustGasDrag
TRBDF2NoFeedback	dustfluids/dustfluids_drags/trbdf2_integrator.cpp	/^void DustGasDrag::TRBDF2NoFeedback(const int stage,$/;"	f	class:DustGasDrag
TWO_3RD	defs.hpp	/^#define TWO_3RD /;"	d
TWO_PI	defs.hpp	/^#define TWO_PI /;"	d
Task	task_list/task_list.hpp	/^struct Task { \/\/ aggregate and POD$/;"	s
TaskFunc	task_list/mg_task_list.hpp	/^  TaskStatus (MultigridTaskList::*TaskFunc)(Multigrid*);  \/\/!> ptr to a task$/;"	m	struct:MGTask
TaskFunc	task_list/task_list.hpp	/^  TaskStatus (TaskList::*TaskFunc)(MeshBlock*, int);  \/\/!> ptr to member function$/;"	m	struct:Task
TaskID	task_list/task_id.cpp	/^TaskID::TaskID(unsigned int id) {$/;"	f	class:TaskID
TaskID	task_list/task_list.hpp	/^class TaskID {  \/\/ POD but not aggregate (there is a user-provided ctor)$/;"	c
TaskList	task_list/task_list.hpp	/^  TaskList() : ntasks(0), nstages(0), task_list_{} {} \/\/ 2x direct + zero initialization$/;"	f	class:TaskList
TaskList	task_list/task_list.hpp	/^class TaskList {$/;"	c
TaskListStatus	task_list/task_list.hpp	/^enum class TaskListStatus {running, stuck, complete, nothing_to_do};$/;"	c
TaskStates	task_list/task_list.hpp	/^struct TaskStates { \/\/ aggregate and POD$/;"	s
TaskStatus	task_list/task_list.hpp	/^enum class TaskStatus {fail, success, next};$/;"	c
TaskType	athena.hpp	/^enum class TaskType {op_split_before, main_int, op_split_after};$/;"	c
TemperatureBisect	pgen/gr_bondi.cpp	/^Real TemperatureBisect(Real r, Real t_min, Real t_max) {$/;"	f	namespace:__anon81
TemperatureMin	pgen/gr_bondi.cpp	/^Real TemperatureMin(Real r, Real t_min, Real t_max) {$/;"	f	namespace:__anon81
TemperatureResidual	pgen/gr_bondi.cpp	/^Real TemperatureResidual(Real t, Real r) {$/;"	f	namespace:__anon81
ThermalFluxAniso	hydro/hydro_diffusion/conduction.cpp	/^void HydroDiffusion::ThermalFluxAniso($/;"	f	class:HydroDiffusion
ThermalFluxIso	hydro/hydro_diffusion/conduction.cpp	/^void HydroDiffusion::ThermalFluxIso($/;"	f	class:HydroDiffusion
ThermalRelaxation	pgen/disk_RWI_2D.cpp	/^void ThermalRelaxation(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon102
ThermalRelaxation	pgen/disk_VSI.cpp	/^void ThermalRelaxation(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon134
ThermalRelaxation	pgen/disk_dust_diffusion.cpp	/^void ThermalRelaxation(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon71
ThermalRelaxation	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^void ThermalRelaxation(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon69
ThermalRelaxation	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^void ThermalRelaxation(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon110
ThermalRelaxation	pgen/disk_planet_dust_cylindrical.cpp	/^void ThermalRelaxation(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon100
ThermalRelaxation	pgen/disk_planet_dust_spherical.cpp	/^void ThermalRelaxation(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon114
ThermalRelaxation	pgen/ssheet_RWI_dust.cpp	/^void ThermalRelaxation(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon91
ThermalRelaxation	pgen/ssheet_planet_dust.cpp	/^void ThermalRelaxation(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon112
ThetaGrid	pgen/gr_torus.cpp	/^Real ThetaGrid(Real x2, RegionSize rs) {$/;"	f
Theta_Gas_Damping_Flag	pgen/disk_VSI.cpp	/^bool Inner_Gas_Damping_Flag, Outer_Gas_Damping_Flag, Theta_Gas_Damping_Flag,$/;"	m	namespace:__anon133	file:
TimeIntegratorTaskList	task_list/task_list.hpp	/^class TimeIntegratorTaskList : public TaskList {$/;"	c
TimeIntegratorTaskList	task_list/time_integrator.cpp	/^TimeIntegratorTaskList::TimeIntegratorTaskList(ParameterInput *pin, Mesh *pm) {$/;"	f	class:TimeIntegratorTaskList
TotalMomentum1	pgen/dust_diffusion.cpp	/^Real TotalMomentum1(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon118
TotalMomentum2	pgen/dust_diffusion.cpp	/^Real TotalMomentum2(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon118
TotalMomentum3	pgen/dust_diffusion.cpp	/^Real TotalMomentum3(MeshBlock *pmb, int iout) {$/;"	f	namespace:__anon118
TransferFeedback_Flag	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^     RadiativeConduction_Flag, TransferFeedback_Flag, RK4_Flag, FeelOthers_Flag[11];$/;"	m	namespace:__anon68	file:
TransferFeedback_Flag	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^     RadiativeConduction_Flag, Gap_Flag, TransferFeedback_Flag, RK4_Flag, FeelOthers_Flag[11];$/;"	m	namespace:__anon109	file:
TransferFeedback_Flag	pgen/disk_planet_dust_cylindrical.cpp	/^     RadiativeConduction_Flag, TransferFeedback_Flag;$/;"	m	namespace:__anon99	file:
TransferFeedback_Flag	pgen/disk_planet_dust_spherical.cpp	/^     RadiativeConduction_Flag, TransferFeedback_Flag;$/;"	m	namespace:__anon113	file:
TransferFromBlocksToRoot	multigrid/multigrid_driver.cpp	/^void MultigridDriver::TransferFromBlocksToRoot(bool initflag) {$/;"	f	class:MultigridDriver
TransferFromRootToBlocks	multigrid/multigrid_driver.cpp	/^void MultigridDriver::TransferFromRootToBlocks(bool folddata) {$/;"	f	class:MultigridDriver
TransformContravariantFromBoyerLindquist	pgen/gr_torus.cpp	/^void TransformContravariantFromBoyerLindquist(Real at_bl, Real ar_bl, Real ath_bl,$/;"	f	namespace:__anon42
TransformCovariantFromKerrSchild	pgen/gr_torus.cpp	/^void TransformCovariantFromKerrSchild(Real a_r, Real a_th, Real a_ph, Real x1, Real x2,$/;"	f	namespace:__anon43
TransformOutputData	outputs/outputs.cpp	/^bool OutputType::TransformOutputData(MeshBlock *pmb) {$/;"	f	class:OutputType
TransformVector	pgen/gr_blast.cpp	/^void TransformVector(Real at, Real ax, Real ay, Real az, Real x, Real y, Real z,$/;"	f	namespace:__anon79
TransformVector	pgen/gr_bondi.cpp	/^void TransformVector(Real a0_bl, Real a1_bl, Real a2_bl, Real a3_bl, Real r,$/;"	f	namespace:__anon81
TransformVector	pgen/gr_linear_wave.cpp	/^void TransformVector(Real at, Real ax, Real ay, Real az, Real x, Real y, Real z,$/;"	f	namespace:__anon85
TransformVector	pgen/gr_mhd_inflow.cpp	/^void TransformVector(Real a0_bl, Real a1_bl, Real a2_bl, Real a3_bl, Real r,$/;"	f	namespace:__anon73
TransformVector	pgen/gr_shock_tube.cpp	/^void TransformVector(Real at, Real ax, Real ay, Real az, Real x, Real y, Real z,$/;"	f	namespace:__anon94
TranslatePlanetRK4	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^void TranslatePlanetRK4(Real *qold, Real c1, Real c2, Real c3, Real *qnew, int n) {$/;"	f
TranslatePlanetRK4	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^void TranslatePlanetRK4(Real *qold, Real c1, Real c2, Real c3, Real *qnew, int n) {$/;"	f
TrapezoidFeedback	dustfluids/dustfluids_drags/trapezoid_integrator.cpp	/^void DustGasDrag::TrapezoidFeedback(const int stage,$/;"	f	class:DustGasDrag
TrapezoidNoFeedback	dustfluids/dustfluids_drags/trapezoid_integrator.cpp	/^void DustGasDrag::TrapezoidNoFeedback(const int stage,$/;"	f	class:DustGasDrag
TriangleIndex	athena.hpp	/^enum TriangleIndex {T00=0, T10=1, T11=2, T20=3, T21=4, T22=5, T30=6, T31=7, T32=8, T33=9,$/;"	g
TurbulenceDriver	fft/turbulence.cpp	/^TurbulenceDriver::TurbulenceDriver(Mesh *pm, ParameterInput *pin) :$/;"	f	class:TurbulenceDriver
TurbulenceDriver	fft/turbulence.hpp	/^class TurbulenceDriver : public FFTDriver{$/;"	c
USER_BNDRY	bvals/bvals_interfaces.hpp	/^      USER_BNDRY __attribute__((deprecated)),$/;"	e	enum:__anon2
USER_BNDRY	bvals/bvals_interfaces.hpp	/^enum {BLOCK_BNDRY = -1, BNDRY_UNDEF, REFLECTING_BNDRY, OUTFLOW_BNDRY, USER_BNDRY,$/;"	e	enum:__anon4
UTILS_BUFFER_UTILS_HPP_	utils/buffer_utils.hpp	/^#define UTILS_BUFFER_UTILS_HPP_$/;"	d
UTILS_GL_QUADRATURE_HPP_	utils/gl_quadrature.hpp	/^#define UTILS_GL_QUADRATURE_HPP_$/;"	d
UTILS_INTERP_TABLE_HPP_	utils/interp_table.hpp	/^#define UTILS_INTERP_TABLE_HPP_$/;"	d
UTILS_UTILS_HPP_	utils/utils.hpp	/^#define UTILS_UTILS_HPP_$/;"	d
UniformMeshGeneratorX1	mesh/mesh.hpp	/^inline Real UniformMeshGeneratorX1(Real x, RegionSize rs) {$/;"	f
UniformMeshGeneratorX2	mesh/mesh.hpp	/^inline Real UniformMeshGeneratorX2(Real x, RegionSize rs) {$/;"	f
UniformMeshGeneratorX3	mesh/mesh.hpp	/^inline Real UniformMeshGeneratorX3(Real x, RegionSize rs) {$/;"	f
Unlock	parameter_input.cpp	/^void ParameterInput::Unlock() {$/;"	f	class:ParameterInput
UnpackData	utils/buffer_utils.cpp	/^template <typename T> void UnpackData(const T *buf, AthenaArray<T> &dst,$/;"	f	namespace:BufferUtility
UpdateCostList	mesh/amr_loadbalance.cpp	/^void Mesh::UpdateCostList() {$/;"	f	class:Mesh
UpdateMeshBlockTree	mesh/amr_loadbalance.cpp	/^void Mesh::UpdateMeshBlockTree(int &nnew, int &ndel) {$/;"	f	class:Mesh
UpperWaveDampingGas	pgen/disk_VSI.cpp	/^void UpperWaveDampingGas(MeshBlock *pmb, const Real time, const Real dt, int il, int iu,$/;"	f
UpperZ	pgen/streaming_stratified.cpp	/^void UpperZ(MeshBlock *pmb, Coordinates *pco, AthenaArray<Real> &prim, AthenaArray<Real> &prim_df, FaceField &b,$/;"	f	namespace:__anon155
UserDefinedDustDiffusivity	dustfluids/dustfluids.hpp	/^  DustDiffusionCoeffFunc UserDefinedDustDiffusivity;$/;"	m	class:DustFluids
UserDefinedStoppingTime	dustfluids/dustfluids.hpp	/^  DustStoppingTimeFunc UserDefinedStoppingTime;$/;"	m	class:DustFluids
UserHistoryOperation	athena.hpp	/^enum class UserHistoryOperation {sum, max, min};$/;"	c
UserMetric_	mesh/mesh.hpp	/^  MetricFunc UserMetric_;$/;"	m	class:Mesh
UserOrbitalVelocity	pgen/disk_dust_diffusion.cpp	/^Real UserOrbitalVelocity(OrbitalAdvection *porb, Real x1, Real x2, Real x3) {$/;"	f	namespace:__anon71
UserOrbitalVelocity	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real UserOrbitalVelocity(OrbitalAdvection *porb, Real x1, Real x2, Real x3) {$/;"	f	namespace:__anon69
UserOrbitalVelocity	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real UserOrbitalVelocity(OrbitalAdvection *porb, Real x1, Real x2, Real x3) {$/;"	f	namespace:__anon110
UserOrbitalVelocity	pgen/disk_planet_dust_cylindrical.cpp	/^Real UserOrbitalVelocity(OrbitalAdvection *porb, Real x1, Real x2, Real x3) {$/;"	f	namespace:__anon100
UserOrbitalVelocity_r	pgen/disk_dust_diffusion.cpp	/^Real UserOrbitalVelocity_r(OrbitalAdvection *porb, Real x1, Real x2, Real x3) {$/;"	f	namespace:__anon71
UserOrbitalVelocity_r	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real UserOrbitalVelocity_r(OrbitalAdvection *porb, Real x1, Real x2, Real x3) {$/;"	f	namespace:__anon69
UserOrbitalVelocity_r	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real UserOrbitalVelocity_r(OrbitalAdvection *porb, Real x1, Real x2, Real x3) {$/;"	f	namespace:__anon110
UserOrbitalVelocity_r	pgen/disk_planet_dust_cylindrical.cpp	/^Real UserOrbitalVelocity_r(OrbitalAdvection *porb, Real x1, Real x2, Real x3) {$/;"	f	namespace:__anon100
UserOrbitalVelocity_z	pgen/disk_dust_diffusion.cpp	/^Real UserOrbitalVelocity_z(OrbitalAdvection *porb, Real x1, Real x2, Real x3) {$/;"	f	namespace:__anon71
UserOrbitalVelocity_z	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real UserOrbitalVelocity_z(OrbitalAdvection *porb, Real x1, Real x2, Real x3) {$/;"	f	namespace:__anon69
UserOrbitalVelocity_z	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real UserOrbitalVelocity_z(OrbitalAdvection *porb, Real x1, Real x2, Real x3) {$/;"	f	namespace:__anon110
UserOrbitalVelocity_z	pgen/disk_planet_dust_cylindrical.cpp	/^Real UserOrbitalVelocity_z(OrbitalAdvection *porb, Real x1, Real x2, Real x3) {$/;"	f	namespace:__anon100
UserSourceTerm	dustfluids/srcterms/dustfluids_srcterms.hpp	/^  SrcTermFunc UserSourceTerm;$/;"	m	class:DustFluidsSourceTerms
UserSourceTerm	hydro/srcterms/hydro_srcterms.hpp	/^  SrcTermFunc UserSourceTerm;$/;"	m	class:HydroSourceTerms
UserSourceTerm_	mesh/mesh.hpp	/^  SrcTermFunc UserSourceTerm_;$/;"	m	class:Mesh
UserStoppingTime_	mesh/mesh.hpp	/^  DustStoppingTimeFunc UserStoppingTime_;$/;"	m	class:Mesh
UserTimeStep	pgen/dust_NSH.cpp	/^Real UserTimeStep(MeshBlock *pmb) {$/;"	f	namespace:__anon104
UserTimeStep	pgen/ssheet_RWI_dust.cpp	/^Real UserTimeStep(MeshBlock *pmb) {$/;"	f	namespace:__anon91
UserTimeStep	pgen/ssheet_planet_dust.cpp	/^Real UserTimeStep(MeshBlock *pmb) {$/;"	f	namespace:__anon112
UserTimeStep	pgen/streaming_eigen.cpp	/^Real UserTimeStep(MeshBlock *pmb) {$/;"	f	namespace:__anon67
UserTimeStep	pgen/streaming_eigen_2dust.cpp	/^Real UserTimeStep(MeshBlock *pmb) {$/;"	f	namespace:__anon146
UserTimeStep	pgen/streaming_nonlinear.cpp	/^Real UserTimeStep(MeshBlock *pmb) {$/;"	f	namespace:__anon136
UserTimeStep	pgen/streaming_stratified.cpp	/^Real UserTimeStep(MeshBlock *pmb) {$/;"	f	namespace:__anon155
UserTimeStep_	hydro/hydro.hpp	/^  TimeStepFunc UserTimeStep_;$/;"	m	class:Hydro
UserTimeStep_	mesh/mesh.hpp	/^  TimeStepFunc UserTimeStep_;$/;"	m	class:Mesh
UserWork	task_list/time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::UserWork(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
UserWorkAfterLoop	pgen/blast.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	pgen/cpaw.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	pgen/default_pgen.cpp	/^void __attribute__((weak)) Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	pgen/dusty_wave.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	pgen/eos_test.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	pgen/fft.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	pgen/gr_linear_wave.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	pgen/gr_torus.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	pgen/jeans.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	pgen/jgg.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	pgen/linear_wave.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	pgen/mignone_advection.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	pgen/poisson.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	pgen/quirk.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	pgen/shock_tube.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	pgen/slotted_cylinder.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	pgen/strat.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkAfterLoop	pgen/turb.cpp	/^void Mesh::UserWorkAfterLoop(ParameterInput *pin) {$/;"	f	class:Mesh
UserWorkBeforeOutput	pgen/default_pgen.cpp	/^void __attribute__((weak)) MeshBlock::UserWorkBeforeOutput(ParameterInput *pin) {$/;"	f	class:MeshBlock
UserWorkBeforeOutput	pgen/dusty_wave.cpp	/^void MeshBlock::UserWorkBeforeOutput(ParameterInput *pin) {$/;"	f	class:MeshBlock
UserWorkBeforeOutput	pgen/gr_torus.cpp	/^void MeshBlock::UserWorkBeforeOutput(ParameterInput *pin) {$/;"	f	class:MeshBlock
UserWorkBeforeOutput	pgen/inject_pebble_3D.cpp	/^void MeshBlock::UserWorkBeforeOutput(ParameterInput *pin){$/;"	f	class:MeshBlock
UserWorkBeforeOutput	pgen/linear_wave.cpp	/^void MeshBlock::UserWorkBeforeOutput(ParameterInput *pin) {$/;"	f	class:MeshBlock
UserWorkBeforeOutput	pgen/strat.cpp	/^void MeshBlock::UserWorkBeforeOutput(ParameterInput *pin) {$/;"	f	class:MeshBlock
UserWorkInLoop	pgen/default_pgen.cpp	/^void __attribute__((weak)) Mesh::UserWorkInLoop() {$/;"	f	class:Mesh
UserWorkInLoop	pgen/default_pgen.cpp	/^void __attribute__((weak)) MeshBlock::UserWorkInLoop() {$/;"	f	class:MeshBlock
UserWorkInLoop	pgen/disk_3d_mhd_dust.cpp	/^void MeshBlock::UserWorkInLoop()$/;"	f	class:MeshBlock
UserWorkInLoop	pgen/disk_RWI_2D.cpp	/^void MeshBlock::UserWorkInLoop() {$/;"	f	class:MeshBlock
UserWorkInLoop	pgen/disk_VSI.cpp	/^void MeshBlock::UserWorkInLoop() {$/;"	f	class:MeshBlock
UserWorkInLoop	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^void MeshBlock::UserWorkInLoop() {$/;"	f	class:MeshBlock
UserWorkInLoop	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^void MeshBlock::UserWorkInLoop() {$/;"	f	class:MeshBlock
UserWorkInLoop	pgen/disk_planet_dust_cylindrical.cpp	/^void MeshBlock::UserWorkInLoop() {$/;"	f	class:MeshBlock
UserWorkInLoop	pgen/disk_planet_dust_spherical.cpp	/^void MeshBlock::UserWorkInLoop() {$/;"	f	class:MeshBlock
UserWorkInLoop	pgen/dusty_wave_1d.cpp	/^void MeshBlock::UserWorkInLoop() {$/;"	f	class:MeshBlock
UserWorkInLoop	pgen/gr_torus.cpp	/^void MeshBlock::UserWorkInLoop() {$/;"	f	class:MeshBlock
UserWorkInLoop	pgen/hb3.cpp	/^void MeshBlock::UserWorkInLoop() {$/;"	f	class:MeshBlock
UserWorkInLoop	pgen/jgg.cpp	/^void Mesh::UserWorkInLoop() {$/;"	f	class:Mesh
UserWorkInLoop	pgen/poisson.cpp	/^void MeshBlock::UserWorkInLoop() {$/;"	f	class:MeshBlock
UserWorkInLoop	pgen/ssheet.cpp	/^void Mesh::UserWorkInLoop() {$/;"	f	class:Mesh
UserWorkInLoop	pgen/ssheet_RWI_dust.cpp	/^void MeshBlock::UserWorkInLoop() {$/;"	f	class:MeshBlock
UserWorkInLoop	pgen/ssheet_planet_dust.cpp	/^void MeshBlock::UserWorkInLoop() {$/;"	f	class:MeshBlock
UserWorkInLoop	pgen/strat.cpp	/^void MeshBlock::UserWorkInLoop() {$/;"	f	class:MeshBlock
UserWork_STS	task_list/sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::UserWork_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
VL2BackwardEulerFeedback	dustfluids/dustfluids_drags/backwardEuler_integrator.cpp	/^void DustGasDrag::VL2BackwardEulerFeedback(const int stage,$/;"	f	class:DustGasDrag
VL2BackwardEulerNoFeedback	dustfluids/dustfluids_drags/backwardEuler_integrator.cpp	/^void DustGasDrag::VL2BackwardEulerNoFeedback(const int stage,$/;"	f	class:DustGasDrag
VL2ImplicitFeedback	dustfluids/dustfluids_drags/vl2implicit_integrator.cpp	/^void DustGasDrag::VL2ImplicitFeedback(const int stage,$/;"	f	class:DustGasDrag
VL2ImplicitNoFeedback	dustfluids/dustfluids_drags/vl2implicit_integrator.cpp	/^void DustGasDrag::VL2ImplicitNoFeedback(const int stage,$/;"	f	class:DustGasDrag
VTKOutput	outputs/outputs.hpp	/^  explicit VTKOutput(OutputParameters oparams) : OutputType(oparams) {}$/;"	f	class:VTKOutput
VTKOutput	outputs/outputs.hpp	/^class VTKOutput : public OutputType {$/;"	c
VanLeerLimiter	dustfluids/dustfluids_diffusion/momentum_diffusion.cpp	/^Real DustFluidsDiffusion::VanLeerLimiter(const Real a, const Real b) {$/;"	f	class:DustFluidsDiffusion
VectorPotential	pgen/gr_torus.cpp	/^void VectorPotential(Real x1, Real x2, Real x3, Real *p_a_1, Real *p_a_2, Real *p_a_3) {$/;"	f	namespace:__anon52
VelProfileCyl	pgen/disk.cpp	/^Real VelProfileCyl(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon37
VelProfileCyl	pgen/field_loop_poles.cpp	/^void VelProfileCyl(const Real x1, const Real x2, const Real x3,$/;"	f	namespace:__anon57
VelProfileCyl_Dust	pgen/disk_streaming_cylindrical.cpp	/^Real VelProfileCyl_Dust(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon55
VelProfileCyl_Dust	pgen/disk_streaming_spherical.cpp	/^Real VelProfileCyl_Dust(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon76
VelProfileCyl_Gas	pgen/disk_streaming_cylindrical.cpp	/^Real VelProfileCyl_Gas(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon55
VelProfileCyl_Gas	pgen/disk_streaming_spherical.cpp	/^Real VelProfileCyl_Gas(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon76
VelProfileCyl_bump	pgen/disk_RWI_2D.cpp	/^Real VelProfileCyl_bump(const Real rad, const Real phi, const Real z, const Real diff) {$/;"	f	namespace:__anon102
VelProfileCyl_bump	pgen/disk_dust_diffusion.cpp	/^Real VelProfileCyl_bump(const Real rad, const Real phi, const Real z, const Real diff) {$/;"	f	namespace:__anon71
VelProfileCyl_dust	pgen/disk_RWI_2D.cpp	/^Real VelProfileCyl_dust(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon102
VelProfileCyl_dust	pgen/disk_VSI.cpp	/^Real VelProfileCyl_dust(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon134
VelProfileCyl_dust	pgen/disk_dust_diffusion.cpp	/^Real VelProfileCyl_dust(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon71
VelProfileCyl_dust	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real VelProfileCyl_dust(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon69
VelProfileCyl_dust	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real VelProfileCyl_dust(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon110
VelProfileCyl_dust	pgen/disk_planet_dust_cylindrical.cpp	/^Real VelProfileCyl_dust(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon100
VelProfileCyl_dust	pgen/disk_planet_dust_spherical.cpp	/^Real VelProfileCyl_dust(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon114
VelProfileCyl_dust	pgen/dust_diffusion.cpp	/^Real VelProfileCyl_dust(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon118
VelProfileCyl_gap	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real VelProfileCyl_gap(const Real rad, const Real phi, const Real z, const Real diff) {$/;"	f	namespace:__anon69
VelProfileCyl_gap	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real VelProfileCyl_gap(const Real rad, const Real phi, const Real z, const Real diff) {$/;"	f	namespace:__anon110
VelProfileCyl_gas	pgen/disk_RWI_2D.cpp	/^Real VelProfileCyl_gas(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon102
VelProfileCyl_gas	pgen/disk_VSI.cpp	/^Real VelProfileCyl_gas(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon134
VelProfileCyl_gas	pgen/disk_dust_diffusion.cpp	/^Real VelProfileCyl_gas(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon71
VelProfileCyl_gas	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real VelProfileCyl_gas(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon69
VelProfileCyl_gas	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real VelProfileCyl_gas(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon110
VelProfileCyl_gas	pgen/disk_planet_dust_cylindrical.cpp	/^Real VelProfileCyl_gas(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon100
VelProfileCyl_gas	pgen/disk_planet_dust_spherical.cpp	/^Real VelProfileCyl_gas(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon114
VelProfileCyl_gas	pgen/dust_diffusion.cpp	/^Real VelProfileCyl_gas(const Real rad, const Real phi, const Real z) {$/;"	f	namespace:__anon118
VertGrav	pgen/strat.cpp	/^void VertGrav(MeshBlock *pmb, const Real time, const Real dt,$/;"	f
VerticalGravity	pgen/ssheet_RWI_dust.cpp	/^void VerticalGravity(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon91
VerticalGravity	pgen/ssheet_planet_dust.cpp	/^void VerticalGravity(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon112
VerticalGravity	pgen/streaming_stratified.cpp	/^void VerticalGravity(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon155
ViscosityCoeff_	mesh/mesh.hpp	/^  ViscosityCoeffFunc ViscosityCoeff_;$/;"	m	class:Mesh
ViscousFluxAlpha	hydro/hydro_diffusion/viscosity.cpp	/^void HydroDiffusion::ViscousFluxAlpha(const AthenaArray<Real> &p,$/;"	f	class:HydroDiffusion
ViscousFluxAniso	hydro/hydro_diffusion/viscosity.cpp	/^void HydroDiffusion::ViscousFluxAniso(const AthenaArray<Real> &prim,$/;"	f	class:HydroDiffusion
ViscousFluxIso	hydro/hydro_diffusion/viscosity.cpp	/^void HydroDiffusion::ViscousFluxIso(const AthenaArray<Real> &p,$/;"	f	class:HydroDiffusion
VolCenter1Length	coordinates/coordinates.cpp	/^void Coordinates::VolCenter1Length(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates
VolCenter2Length	coordinates/coordinates.cpp	/^void Coordinates::VolCenter2Length(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates
VolCenter2Length	coordinates/cylindrical.cpp	/^void Cylindrical::VolCenter2Length(const int k, const int j, const int il, const int iu,$/;"	f	class:Cylindrical
VolCenter2Length	coordinates/spherical_polar.cpp	/^void SphericalPolar::VolCenter2Length(const int k, const int j, const int il,$/;"	f	class:SphericalPolar
VolCenter3Length	coordinates/coordinates.cpp	/^void Coordinates::VolCenter3Length(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates
VolCenter3Length	coordinates/spherical_polar.cpp	/^void SphericalPolar::VolCenter3Length(const int k, const int j, const int il,$/;"	f	class:SphericalPolar
VolCenterFace1Area	coordinates/coordinates.cpp	/^void Coordinates::VolCenterFace1Area(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates
VolCenterFace1Area	coordinates/cylindrical.cpp	/^void Cylindrical::VolCenterFace1Area(const int k, const int j, const int il, const int iu,$/;"	f	class:Cylindrical
VolCenterFace1Area	coordinates/spherical_polar.cpp	/^void SphericalPolar::VolCenterFace1Area(const int k, const int j, const int il,$/;"	f	class:SphericalPolar
VolCenterFace2Area	coordinates/coordinates.cpp	/^void Coordinates::VolCenterFace2Area(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates
VolCenterFace2Area	coordinates/spherical_polar.cpp	/^void SphericalPolar::VolCenterFace2Area(const int k, const int j, const int il,$/;"	f	class:SphericalPolar
VolCenterFace3Area	coordinates/coordinates.cpp	/^void Coordinates::VolCenterFace3Area(const int k, const int j, const int il, const int iu,$/;"	f	class:Coordinates
VolCenterFace3Area	coordinates/cylindrical.cpp	/^void Cylindrical::VolCenterFace3Area(const int k, const int j, const int il, const int iu,$/;"	f	class:Cylindrical
VolCenterFace3Area	coordinates/spherical_polar.cpp	/^void SphericalPolar::VolCenterFace3Area(const int k, const int j, const int il,$/;"	f	class:SphericalPolar
Vr_Mdot	pgen/disk_VSI.cpp	/^void Vr_Mdot(const Real r_active, const Real r_ghost, const Real rho_active,$/;"	f	namespace:__anon134
Vr_constMdot	pgen/dust_diffusion.cpp	/^void Vr_constMdot(const Real r_active, const Real r_ghost, const Real sigma_active,$/;"	f	namespace:__anon118
Vr_interpolate_inner_nomatter	pgen/disk_dust_drift.cpp	/^void Vr_interpolate_inner_nomatter(const Real r_active, const Real r_ghost, const Real sigma_active,$/;"	f	namespace:__anon65
Vr_interpolate_inner_nomatter	pgen/disk_streaming_cylindrical.cpp	/^void Vr_interpolate_inner_nomatter(const Real r_active, const Real r_ghost, const Real sigma_active,$/;"	f	namespace:__anon55
Vr_interpolate_inner_nomatter	pgen/disk_streaming_spherical.cpp	/^void Vr_interpolate_inner_nomatter(const Real r_active, const Real r_ghost, const Real sigma_active,$/;"	f	namespace:__anon76
Vr_interpolate_nomatter	pgen/disk_RWI_2D.cpp	/^void Vr_interpolate_nomatter(const Real r_active, const Real r_ghost, const Real sigma_active,$/;"	f	namespace:__anon102
Vr_interpolate_nomatter	pgen/disk_dust_diffusion.cpp	/^void Vr_interpolate_nomatter(const Real r_active, const Real r_ghost, const Real sigma_active,$/;"	f	namespace:__anon71
Vr_interpolate_outer_nomatter	pgen/disk_dust_drift.cpp	/^void Vr_interpolate_outer_nomatter(const Real r_active, const Real r_ghost, const Real sigma_active,$/;"	f	namespace:__anon65
Vr_interpolate_outer_nomatter	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^void Vr_interpolate_outer_nomatter(const Real r_active, const Real r_ghost, const Real sigma_active,$/;"	f	namespace:__anon69
Vr_interpolate_outer_nomatter	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^void Vr_interpolate_outer_nomatter(const Real r_active, const Real r_ghost, const Real sigma_active,$/;"	f	namespace:__anon110
Vr_interpolate_outer_nomatter	pgen/disk_planet_dust_cylindrical.cpp	/^void Vr_interpolate_outer_nomatter(const Real r_active, const Real r_ghost, const Real sigma_active,$/;"	f	namespace:__anon100
Vr_interpolate_outer_nomatter	pgen/disk_planet_dust_spherical.cpp	/^void Vr_interpolate_outer_nomatter(const Real r_active, const Real r_ghost, const Real rho_active,$/;"	f	namespace:__anon114
Vr_interpolate_outer_nomatter	pgen/disk_streaming_cylindrical.cpp	/^void Vr_interpolate_outer_nomatter(const Real r_active, const Real r_ghost, const Real sigma_active,$/;"	f	namespace:__anon55
Vr_interpolate_outer_nomatter	pgen/disk_streaming_spherical.cpp	/^void Vr_interpolate_outer_nomatter(const Real r_active, const Real r_ghost, const Real sigma_active,$/;"	f	namespace:__anon76
Vr_outflow	pgen/disk_VSI.cpp	/^void Vr_outflow(const Real r_active, const Real r_ghost, const Real rho_active,$/;"	f	namespace:__anon134
WaveDamping	pgen/ssheet_RWI_dust.cpp	/^void WaveDamping(MeshBlock *pmb, const Real time, const Real dt, int il, int iu,$/;"	f
WaveDamping	pgen/ssheet_planet_dust.cpp	/^void WaveDamping(MeshBlock *pmb, const Real time, const Real dt, int il, int iu,$/;"	f
WaveDampingDust	pgen/disk_RWI_2D.cpp	/^void WaveDampingDust(MeshBlock *pmb, const Real time, const Real dt, int il, int iu,$/;"	f
WaveDampingGas	pgen/disk_RWI_2D.cpp	/^void WaveDampingGas(MeshBlock *pmb, const Real time, const Real dt, int il, int iu,$/;"	f
WeightedAve	mesh/weighted_ave.cpp	/^void MeshBlock::WeightedAve(AthenaArray<Real> &u_out, AthenaArray<Real> &u_in1,$/;"	f	class:MeshBlock
WeightedAve	mesh/weighted_ave.cpp	/^void MeshBlock::WeightedAve(FaceField &b_out, FaceField &b_in1,$/;"	f	class:MeshBlock
Write	outputs/io_wrapper.cpp	/^std::size_t IOWrapper::Write(const void *buf, IOWrapperSizeT size, IOWrapperSizeT count) {$/;"	f	class:IOWrapper
WriteOutputFile	outputs/athena_hdf5.cpp	/^void ATHDF5Output::WriteOutputFile(Mesh *pm, ParameterInput *pin, bool flag) {$/;"	f	class:ATHDF5Output
WriteOutputFile	outputs/formatted_table.cpp	/^void FormattedTableOutput::WriteOutputFile(Mesh *pm, ParameterInput *pin, bool flag) {$/;"	f	class:FormattedTableOutput
WriteOutputFile	outputs/history.cpp	/^void HistoryOutput::WriteOutputFile(Mesh *pm, ParameterInput *pin, bool flag) {$/;"	f	class:HistoryOutput
WriteOutputFile	outputs/restart.cpp	/^void RestartOutput::WriteOutputFile(Mesh *pm, ParameterInput *pin, bool force_write) {$/;"	f	class:RestartOutput
WriteOutputFile	outputs/vtk.cpp	/^void VTKOutput::WriteOutputFile(Mesh *pm, ParameterInput *pin, bool flag) {$/;"	f	class:VTKOutput
Write_at	outputs/io_wrapper.cpp	/^std::size_t IOWrapper::Write_at(const void *buf, IOWrapperSizeT size,$/;"	f	class:IOWrapper
Write_at_all	outputs/io_wrapper.cpp	/^std::size_t IOWrapper::Write_at_all(const void *buf, IOWrapperSizeT size,$/;"	f	class:IOWrapper
X1DIR	athena.hpp	/^enum CoordinateDirection {X1DIR=0, X2DIR=1, X3DIR=2};$/;"	e	enum:CoordinateDirection
X1E2	athena.hpp	/^enum ElectricIndex {X1E2=0, X1E3=1, X2E3=0, X2E1=1, X3E1=0, X3E2=1};$/;"	e	enum:ElectricIndex
X1E3	athena.hpp	/^enum ElectricIndex {X1E2=0, X1E3=1, X2E3=0, X2E1=1, X3E1=0, X3E2=1};$/;"	e	enum:ElectricIndex
X2DIR	athena.hpp	/^enum CoordinateDirection {X1DIR=0, X2DIR=1, X3DIR=2};$/;"	e	enum:CoordinateDirection
X2E1	athena.hpp	/^enum ElectricIndex {X1E2=0, X1E3=1, X2E3=0, X2E1=1, X3E1=0, X3E2=1};$/;"	e	enum:ElectricIndex
X2E3	athena.hpp	/^enum ElectricIndex {X1E2=0, X1E3=1, X2E3=0, X2E1=1, X3E1=0, X3E2=1};$/;"	e	enum:ElectricIndex
X3DIR	athena.hpp	/^enum CoordinateDirection {X1DIR=0, X2DIR=1, X3DIR=2};$/;"	e	enum:CoordinateDirection
X3E1	athena.hpp	/^enum ElectricIndex {X1E2=0, X1E3=1, X2E3=0, X2E1=1, X3E1=0, X3E2=1};$/;"	e	enum:ElectricIndex
X3E2	athena.hpp	/^enum ElectricIndex {X1E2=0, X1E3=1, X2E3=0, X2E1=1, X3E1=0, X3E2=1};$/;"	e	enum:ElectricIndex
ZeroClear	athena_arrays.hpp	/^void AthenaArray<T>::ZeroClear() {$/;"	f	class:AthenaArray
ZeroClearData	multigrid/multigrid.cpp	/^void Multigrid::ZeroClearData() {$/;"	f	class:Multigrid
ZeroClearOctets	multigrid/multigrid_driver.cpp	/^void MultigridDriver::ZeroClearOctets() {$/;"	f	class:MultigridDriver
ZeroDustDiffusivity	dustfluids/dustfluids_diffusion/diffusivity_dustfluids.cpp	/^void DustFluidsDiffusion::ZeroDustDiffusivity(AthenaArray<Real> &dust_diffusivity,$/;"	f	class:DustFluidsDiffusion
ZeroOrbitalVelocity	orbital_advection/default_orbital_velocity.cpp	/^Real ZeroOrbitalVelocity(OrbitalAdvection *porb, Real x_, Real y_, Real z_) {$/;"	f
a	pgen/gr_bondi.cpp	/^Real m, a;          \/\/ black hole mass and spin$/;"	m	namespace:__anon80	file:
a	pgen/gr_mhd_inflow.cpp	/^Real a;                           \/\/ spin of black hole (0 <= a < M)$/;"	m	namespace:__anon72	file:
a	pgen/gr_torus.cpp	/^Real m, a;                                    \/\/ black hole parameters$/;"	m	namespace:__anon39	file:
a_orbit	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^omega_planet[10], inv_omega_planet[10], cs_planet[10], a_orbit[10], e_orbit[10],$/;"	m	namespace:__anon68	file:
a_width	pgen/mignone_advection.cpp	/^Real a_width, b_center, alpha;$/;"	m	namespace:__anon149	file:
abscissa	utils/gl_quadrature.cpp	/^  const Real *abscissa;$/;"	m	struct:GaussLegendre::Quadrature	file:
abscissa_n0	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n0[] = {-100.};$/;"	m	namespace:GaussLegendre	file:
abscissa_n1	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n1[] = {-100.};$/;"	m	namespace:GaussLegendre	file:
abscissa_n10	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n10[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n11	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n11[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n12	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n12[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n13	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n13[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n14	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n14[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n15	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n15[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n16	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n16[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n17	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n17[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n18	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n18[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n19	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n19[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n2	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n2[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n20	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n20[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n21	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n21[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n22	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n22[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n23	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n23[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n24	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n24[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n25	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n25[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n26	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n26[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n27	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n27[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n28	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n28[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n29	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n29[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n3	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n3[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n30	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n30[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n31	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n31[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n32	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n32[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n33	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n33[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n34	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n34[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n35	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n35[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n36	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n36[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n37	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n37[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n38	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n38[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n39	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n39[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n4	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n4[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n40	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n40[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n41	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n41[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n42	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n42[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n43	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n43[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n44	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n44[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n45	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n45[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n46	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n46[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n47	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n47[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n48	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n48[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n49	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n49[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n5	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n5[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n50	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n50[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n51	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n51[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n52	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n52[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n53	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n53[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n54	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n54[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n55	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n55[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n56	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n56[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n57	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n57[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n58	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n58[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n59	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n59[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n6	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n6[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n60	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n60[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n61	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n61[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n62	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n62[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n63	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n63[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n64	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n64[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n7	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n7[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n8	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n8[] = {$/;"	m	namespace:GaussLegendre	file:
abscissa_n9	utils/gl_quadrature.cpp	/^static constexpr Real abscissa_n9[] = {$/;"	m	namespace:GaussLegendre	file:
accretion_radius	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^gMth[10], t_planet_growth[10], Hill_radius[10], accretion_radius[10],$/;"	m	namespace:__anon68	file:
accretion_radius	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^gMth[10], t_planet_growth[10], Hill_radius[10], accretion_radius[10],$/;"	m	namespace:__anon109	file:
accretion_radius	pgen/disk_planet_dust_cylindrical.cpp	/^x1min, x1max, damping_rate, Hill_radius, accretion_radius, accretion_rate,$/;"	m	namespace:__anon99	file:
accretion_radius	pgen/disk_planet_dust_spherical.cpp	/^x1min, x1max, damping_rate, Hill_radius, accretion_radius, accretion_rate,$/;"	m	namespace:__anon113	file:
accretion_rate	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^accretion_rate[10], x_planet[10], y_planet[10], vx_planet[10],$/;"	m	namespace:__anon68	file:
accretion_rate	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^accretion_rate[10], x_planet[10], y_planet[10], vx_planet[10],$/;"	m	namespace:__anon109	file:
accretion_rate	pgen/disk_planet_dust_cylindrical.cpp	/^x1min, x1max, damping_rate, Hill_radius, accretion_radius, accretion_rate,$/;"	m	namespace:__anon99	file:
accretion_rate	pgen/disk_planet_dust_spherical.cpp	/^x1min, x1max, damping_rate, Hill_radius, accretion_radius, accretion_rate,$/;"	m	namespace:__anon113	file:
ad_hyp	pgen/disk_3d_mhd_dust.cpp	/^bool ad_hyp, ad_lin, ad_log;$/;"	m	namespace:__anon60	file:
ad_lin	pgen/disk_3d_mhd_dust.cpp	/^bool ad_hyp, ad_lin, ad_log;$/;"	m	namespace:__anon60	file:
ad_log	pgen/disk_3d_mhd_dust.cpp	/^bool ad_hyp, ad_lin, ad_log;$/;"	m	namespace:__anon60	file:
adaptive	mesh/mesh.hpp	/^  const bool adaptive, multilevel;$/;"	m	class:Mesh
all	athena.hpp	/^enum class BoundaryCommSubset {mesh_init, gr_amr, all, orbital};$/;"	m	class:BoundaryCommSubset
all	orbital_advection/orbital_advection.hpp	/^enum class OrbitalTransform {none=0, prim=1, cons=2, all=3};$/;"	m	class:OrbitalTransform
alpha	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> alpha, alpha_n;$/;"	m	class:DustGasDrag
alpha	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  enum DiffProcess {iso=0, aniso=1, alpha=2};$/;"	e	enum:HydroDiffusion::DiffProcess
alpha	pgen/disk_3d_mhd_dust.cpp	/^Real rho0, alpha, HoR0, HoRc, theta_trans;$/;"	m	namespace:__anon60	file:
alpha	pgen/magnoh.cpp	/^Real alpha, beta, rho0, P0, pcoeff, vr, perturb, mphi;$/;"	m	namespace:__anon92	file:
alpha	pgen/mignone_advection.cpp	/^Real a_width, b_center, alpha;$/;"	m	namespace:__anon149	file:
alpha_disk_model	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  bool alpha_disk_model;           \/\/ true or false$/;"	m	class:HydroDiffusion
alpha_n	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> alpha, alpha_n;$/;"	m	class:DustGasDrag
ambipolar	field/field_diffusion/field_diffusion.hpp	/^  enum DiffProcess {ohmic=0, hall=1, ambipolar=2};$/;"	e	enum:FieldDiffusion::DiffProcess
amp	pgen/disk_RWI_2D.cpp	/^vel_vortex, r0_vortex, x0_vortex, y0_vortex, amp, time_drag, x1min, x1max,$/;"	m	namespace:__anon101	file:
amp	pgen/disk_VSI.cpp	/^amp, time_drag, time_refine, refine_theta_upper, refine_theta_lower, refine_r_min, refine_r_max,$/;"	m	namespace:__anon133	file:
amp	pgen/disk_streaming_cylindrical.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, amp;$/;"	m	namespace:__anon54	file:
amp	pgen/disk_streaming_spherical.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, amp;$/;"	m	namespace:__anon75	file:
amp	pgen/dust_NSH.cpp	/^Real amp, nwx, nwy, nwz, rhog0; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon103	file:
amp	pgen/dust_diffusion.cpp	/^Real nuiso, iso_cs, amp;$/;"	m	namespace:__anon117	file:
amp	pgen/dusty_soundwave.cpp	/^Real amp, lambda, k_par;              \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	m	namespace:__anon105	file:
amp	pgen/dusty_wave.cpp	/^Real amp, lambda, k_par; \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	m	namespace:__anon86	file:
amp	pgen/dusty_wave_1d.cpp	/^Real amp, lambda, k_par; \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	m	namespace:__anon137	file:
amp	pgen/gr_linear_wave.cpp	/^Real amp;                     \/\/ amplitude of wave$/;"	m	namespace:__anon84	file:
amp	pgen/hb3.cpp	/^Real amp, nwx, nwy; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon58	file:
amp	pgen/hgb.cpp	/^Real amp, beta;$/;"	m	namespace:__anon115	file:
amp	pgen/jeans.cpp	/^Real amp, njeans, lambda, kwave; \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	m	namespace:__anon119	file:
amp	pgen/jgg.cpp	/^Real amp, beta;$/;"	m	namespace:__anon123	file:
amp	pgen/linear_wave.cpp	/^Real amp, lambda, k_par; \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	m	namespace:__anon125	file:
amp	pgen/ssheet.cpp	/^Real amp; \/\/ amplitude$/;"	m	namespace:__anon95	file:
amp	pgen/ssheet_RWI_dust.cpp	/^Real sound_speed, gamma1, inv_gm1, d0, amp, x1size, x2size, x3size, qshear, Omega0,$/;"	m	namespace:__anon90	file:
amp	pgen/streaming_eigen.cpp	/^Real amp, nwx, nwy, nwz, rhog0; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon66	file:
amp	pgen/streaming_eigen_2dust.cpp	/^Real amp, nwx, nwy, nwz, rhog0; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon145	file:
amp	pgen/streaming_nonlinear.cpp	/^Real amp, nwx, nwy, nwz, rhog0; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon135	file:
amp	pgen/streaming_stratified.cpp	/^Real amp, nwx, nwy, nwz, sigma_g0; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon154	file:
amr_updated	mesh/mesh.hpp	/^  bool amr_updated;$/;"	m	class:Mesh
ang_2	pgen/cpaw.cpp	/^Real ang_2, ang_3; \/\/ Rotation angles about the y and z' axis$/;"	m	namespace:__anon88	file:
ang_2	pgen/dusty_wave.cpp	/^Real ang_2, ang_3; \/\/ Rotation angles about the y and z' axis$/;"	m	namespace:__anon86	file:
ang_2	pgen/jeans.cpp	/^Real ang_2, ang_3; \/\/ Rotation angles about the y and z' axis$/;"	m	namespace:__anon119	file:
ang_2	pgen/linear_wave.cpp	/^Real ang_2, ang_3; \/\/ Rotation angles about the y and z' axis$/;"	m	namespace:__anon125	file:
ang_2_vert	pgen/dusty_wave.cpp	/^bool ang_2_vert, ang_3_vert; \/\/ Switches to set ang_2 and\/or ang_3 to pi\/2$/;"	m	namespace:__anon86	file:
ang_2_vert	pgen/linear_wave.cpp	/^bool ang_2_vert, ang_3_vert; \/\/ Switches to set ang_2 and\/or ang_3 to pi\/2$/;"	m	namespace:__anon125	file:
ang_3	pgen/cpaw.cpp	/^Real ang_2, ang_3; \/\/ Rotation angles about the y and z' axis$/;"	m	namespace:__anon88	file:
ang_3	pgen/dusty_wave.cpp	/^Real ang_2, ang_3; \/\/ Rotation angles about the y and z' axis$/;"	m	namespace:__anon86	file:
ang_3	pgen/jeans.cpp	/^Real ang_2, ang_3; \/\/ Rotation angles about the y and z' axis$/;"	m	namespace:__anon119	file:
ang_3	pgen/linear_wave.cpp	/^Real ang_2, ang_3; \/\/ Rotation angles about the y and z' axis$/;"	m	namespace:__anon125	file:
ang_3_vert	pgen/dusty_wave.cpp	/^bool ang_2_vert, ang_3_vert; \/\/ Switches to set ang_2 and\/or ang_3 to pi\/2$/;"	m	namespace:__anon86	file:
ang_3_vert	pgen/linear_wave.cpp	/^bool ang_2_vert, ang_3_vert; \/\/ Switches to set ang_2 and\/or ang_3 to pi\/2$/;"	m	namespace:__anon125	file:
aniso	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  enum DiffProcess {iso=0, aniso=1, alpha=2};$/;"	e	enum:HydroDiffusion::DiffProcess
arrived	bvals/bvals_interfaces.hpp	/^enum class BoundaryStatus {waiting, arrived, completed};$/;"	m	class:BoundaryStatus
asq_	eos/general/hydrogen.cpp	/^Real asq_(Real rho, Real T) {$/;"	f	namespace:__anon11
azimuthal_shift_	bvals/bvals.hpp	/^  AthenaArray<Real> azimuthal_shift_;$/;"	m	class:BoundaryValues
b	field/field.hpp	/^  FaceField b;       \/\/!> time-integrator memory register #1$/;"	m	class:Field
b	pgen/gr_linear_wave.cpp	/^Real u[4], b[4];              \/\/ contravariant quantities$/;"	m	namespace:__anon84	file:
b0	field/field.hpp	/^  FaceField b0, ct_update; \/\/ rkl2 STS memory registers$/;"	m	class:Field
b0	pgen/field_loop_poles.cpp	/^Real xc, yc, zc, beta, b0;$/;"	m	namespace:__anon56	file:
b0	pgen/jeans.cpp	/^Real d0, p0, v0, u0, w0, va, b0;$/;"	m	namespace:__anon119	file:
b1	field/field.hpp	/^  FaceField b1;      \/\/!> time-integrator memory register #2$/;"	m	class:Field
b1_coarse_send	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> b1_coarse_send, b2_coarse_send;$/;"	m	class:OrbitalTransform::OrbitalAdvection
b2	field/field.hpp	/^  FaceField b2;      \/\/!> time-integrator memory register #3$/;"	m	class:Field
b2_coarse_send	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> b1_coarse_send, b2_coarse_send;$/;"	m	class:OrbitalTransform::OrbitalAdvection
b_center	pgen/mignone_advection.cpp	/^Real a_width, b_center, alpha;$/;"	m	namespace:__anon149	file:
b_coarse_recv	orbital_advection/orbital_advection.hpp	/^  FaceField b_temp, b_coarse_recv;$/;"	m	class:OrbitalTransform::OrbitalAdvection
b_in_	fft/athena_fft.hpp	/^  AthenaFFTIndex *f_in_, *f_out_, *b_in_, *b_out_;$/;"	m	class:FFTBlock::AthenaFFTDirection
b_out_	fft/athena_fft.hpp	/^  AthenaFFTIndex *f_in_, *f_out_, *b_in_, *b_out_;$/;"	m	class:FFTBlock::AthenaFFTDirection
b_par	pgen/cpaw.cpp	/^Real den, pres, gm1, b_par, b_perp, v_perp, v_par;$/;"	m	namespace:__anon88	file:
b_perp	pgen/cpaw.cpp	/^Real den, pres, gm1, b_par, b_perp, v_perp, v_par;$/;"	m	namespace:__anon88	file:
b_temp	orbital_advection/orbital_advection.hpp	/^  FaceField b_temp, b_coarse_recv;$/;"	m	class:OrbitalTransform::OrbitalAdvection
background	athena.hpp	/^enum class FluidFormulation {evolve, background, disabled}; \/\/ rename background -> fixed?$/;"	m	class:FluidFormulation
backward	fft/athena_fft.hpp	/^  enum class AthenaFFTDirection {forward=-1, backward=1};$/;"	m	class:FFTBlock::AthenaFFTDirection
basename	pgen/disk_VSI.cpp	/^std::string basename;$/;"	m	namespace:__anon133	file:
bb_normal_	hydro/hydro.hpp	/^  AthenaArray<Real> bb_normal_;    \/\/ normal magnetic field, for (SR\/GR)MHD$/;"	m	class:Hydro
bcc	field/field.hpp	/^  AthenaArray<Real> bcc;  \/\/!> time-integrator memory register #1$/;"	m	class:Field
bcc	pgen/gr_linear_wave.cpp	/^AthenaArray<Real> bcc;        \/\/ cell-centered initial magnetic fields$/;"	v
bd_var_	bvals/bvals_interfaces.hpp	/^  BoundaryData<> bd_var_, bd_var_flcor_;$/;"	m	class:BoundaryVariable
bd_var_flcor_	bvals/bvals_interfaces.hpp	/^  BoundaryData<> bd_var_, bd_var_flcor_;$/;"	m	class:BoundaryVariable
bdata_	bvals/cc/mg/bvals_mg.hpp	/^  BoundaryData<> bdata_;$/;"	m	class:MGBoundaryValues
bddisp	mesh/mesh.hpp	/^  int *brdisp, *bddisp;$/;"	m	class:Mesh
beta	pgen/disk_3d_mhd_dust.cpp	/^Real beta, mu, Am_in, Am0, Bz0, A30, RBmin, taddBp;$/;"	m	namespace:__anon60	file:
beta	pgen/disk_RWI_2D.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, beta, nu_alpha,$/;"	m	namespace:__anon101	file:
beta	pgen/disk_VSI.cpp	/^Real gm0, r0, rho0, pvalue, cs2_0, qvalue, beta, nu_alpha, dfloor, dffloor, rho_floor, Omega0,$/;"	m	namespace:__anon133	file:
beta	pgen/disk_dust_diffusion.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, beta, nu_alpha;$/;"	m	namespace:__anon70	file:
beta	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real x1min, x1max, damping_rate, gm0, r0, rho0, dslope, p0_over_r0, pslope, beta,$/;"	m	namespace:__anon68	file:
beta	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real x1min, x1max, damping_rate, gm0, r0, rho0, dslope, p0_over_r0, pslope, beta,$/;"	m	namespace:__anon109	file:
beta	pgen/disk_planet_dust_cylindrical.cpp	/^gm0, r0, rho0, dslope, p0_over_r0, pslope, beta, gMth, nu_alpha,$/;"	m	namespace:__anon99	file:
beta	pgen/disk_planet_dust_spherical.cpp	/^gm0, r0, rho0, dslope, p0_over_r0, pslope, beta, gMth, nu_alpha,$/;"	m	namespace:__anon113	file:
beta	pgen/field_loop_poles.cpp	/^Real xc, yc, zc, beta, b0;$/;"	m	namespace:__anon56	file:
beta	pgen/hb3.cpp	/^Real beta, B0;$/;"	m	namespace:__anon58	file:
beta	pgen/hgb.cpp	/^Real amp, beta;$/;"	m	namespace:__anon115	file:
beta	pgen/jgg.cpp	/^Real amp, beta;$/;"	m	namespace:__anon123	file:
beta	pgen/magnoh.cpp	/^Real alpha, beta, rho0, P0, pcoeff, vr, perturb, mphi;$/;"	m	namespace:__anon92	file:
beta	pgen/ssheet_RWI_dust.cpp	/^kappap, kappap2, Kai0, etaVk, AN(0.0), BN(0.0), Psi(0.0), user_dt, time_drag, beta,$/;"	m	namespace:__anon90	file:
beta	pgen/ssheet_planet_dust.cpp	/^Real x1size, x2size, x3size, sound_speed, gm1, inv_gm1, d0, qshear, Omega0, beta,$/;"	m	namespace:__anon111	file:
beta	task_list/task_list.hpp	/^    Real beta; \/\/ coeff. from bidiagonal Shu-Osher form Beta matrix, -1 diagonal terms$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
beta_gas	pgen/disk_RWI_2D.cpp	/^A_bump, sigma_bump, r0_bump, width_vortex, eta_gas, beta_gas, ks_gas,$/;"	m	namespace:__anon101	file:
beta_gas	pgen/disk_dust_diffusion.cpp	/^Real eta_gas, beta_gas, ks_gas;$/;"	m	namespace:__anon70	file:
beta_gas	pgen/disk_dust_drift.cpp	/^Real eta_gas, beta_gas, ks_gas;$/;"	m	namespace:__anon64	file:
beta_gas	pgen/disk_streaming_cylindrical.cpp	/^Real eta_gas, beta_gas, ks_gas;$/;"	m	namespace:__anon54	file:
beta_gas	pgen/disk_streaming_spherical.cpp	/^Real eta_gas, beta_gas, ks_gas;$/;"	m	namespace:__anon75	file:
beta_min_	eos/eos.hpp	/^  Real sigma_max_, beta_min_;            \/\/ limits on ratios of gas quantities to pmag$/;"	m	class:EquationOfState
bh_mass_	coordinates/coordinates.hpp	/^  Real bh_mass_;$/;"	m	class:Coordinates
bh_spin_	coordinates/coordinates.hpp	/^  Real bh_spin_;$/;"	m	class:Coordinates
bifactor	fft/plimpton/factor.cpp	/^void bifactor(int n, int *factor1, int *factor2)$/;"	f
biggest_arr	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> biggest_arr, temp_arr;$/;"	m	class:DustGasDrag
bitfld_	task_list/task_list.hpp	/^  std::uint64_t bitfld_[kNField_];$/;"	m	class:TaskID
block	bvals/bvals_interfaces.hpp	/^enum class BoundaryFlag {block=-1, undef, reflect, outflow, user, periodic,$/;"	m	class:BoundaryFlag
block_bcs	bvals/bvals.hpp	/^  BoundaryFlag block_bcs[6];$/;"	m	class:BoundaryBase
block_name	outputs/outputs.hpp	/^  std::string block_name;$/;"	m	struct:OutputParameters
block_name	parameter_input.hpp	/^  std::string block_name;$/;"	m	class:InputBlock
block_number	outputs/outputs.hpp	/^  int block_number;$/;"	m	struct:OutputParameters
block_size	mesh/mesh.hpp	/^  RegionSize block_size;$/;"	m	class:MeshBlock
block_size_	bvals/bvals.hpp	/^  RegionSize block_size_;$/;"	m	class:BoundaryBase
bmag_	field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> bmag_; \/\/ B field strength$/;"	m	class:FieldDiffusion
bnderef	mesh/mesh.hpp	/^  int *bnref, *bnderef;$/;"	m	class:Mesh
bnref	mesh/mesh.hpp	/^  int *bnref, *bnderef;$/;"	m	class:Mesh
boundary_D2G	pgen/inject_pebble_3D.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS], boundary_D2G[NDUSTFLUIDS], const_stopping_time[NDUSTFLUIDS];$/;"	m	namespace:__anon62	file:
bphi0	pgen/magnoh.cpp	/^Real bphi0, bz;$/;"	m	namespace:__anon92	file:
bplan_	fft/athena_fft.hpp	/^  AthenaFFTPlan *fplan_, *bplan_;$/;"	m	class:FFTBlock::AthenaFFTDirection
brdisp	mesh/mesh.hpp	/^  int *brdisp, *bddisp;$/;"	m	class:Mesh
bsize_	fft/athena_fft.hpp	/^  RegionSize msize_, bsize_;$/;"	m	class:FFTBlock::AthenaFFTDirection
bsq_over_rho	pgen/gr_bondi.cpp	/^Real bsq_over_rho;  \/\/ b^2\/rho at inner radius$/;"	m	namespace:__anon80	file:
btype	multigrid/multigrid.hpp	/^  BoundaryQuantity btype, btypef;$/;"	m	class:Multigrid
btypef	multigrid/multigrid.hpp	/^  BoundaryQuantity btype, btypef;$/;"	m	class:Multigrid
bufid	bvals/bvals.hpp	/^  static int bufid[56];$/;"	m	class:BoundaryBase
bufid	bvals/bvals_base.cpp	/^int BoundaryBase::bufid[56];$/;"	m	class:BoundaryBase	file:
bufid	bvals/bvals_interfaces.hpp	/^  int bufid, eid, targetid;$/;"	m	struct:NeighborBlock
bvar_index	bvals/bvals_interfaces.hpp	/^  std::vector<BoundaryVariable *>::size_type bvar_index;$/;"	m	class:BoundaryVariable
bvars	bvals/bvals.hpp	/^  std::vector<BoundaryVariable *> bvars;$/;"	m	class:BoundaryValues
bvars_main_int	bvals/bvals.hpp	/^  std::vector<BoundaryVariable *> bvars_main_int;$/;"	m	class:BoundaryValues
bvars_next_phys_id_	bvals/bvals.hpp	/^  int bvars_next_phys_id_;$/;"	m	class:BoundaryValues
bvars_sts	bvals/bvals.hpp	/^  std::vector<BoundaryVariable *> bvars_sts;$/;"	m	class:BoundaryValues
bx	pgen/gr_linear_wave.cpp	/^Real bx;                      \/\/ longitudinal magnetic field$/;"	m	namespace:__anon84	file:
bx0	pgen/dusty_soundwave.cpp	/^Real rho_g0, p0, u0, v0, w0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon105	file:
bx0	pgen/dusty_wave.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon86	file:
bx0	pgen/dusty_wave_1d.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon137	file:
bx0	pgen/linear_wave.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon125	file:
bx_amb	pgen/jet.cpp	/^Real d_amb, p_amb, vx_amb, vy_amb, vz_amb, bx_amb, by_amb, bz_amb;$/;"	m	namespace:__anon77	file:
bx_jet	pgen/jet.cpp	/^Real r_jet, d_jet, p_jet, vx_jet, vy_jet, vz_jet, bx_jet, by_jet, bz_jet;$/;"	m	namespace:__anon77	file:
bxl	pgen/shk_cloud.cpp	/^Real bxl, byl, bzl;$/;"	m	namespace:__anon74	file:
by	hydro/rsolvers/mhd/hlld.cpp	/^  Real d, mx, my, mz, e, by, bz;$/;"	m	struct:Cons1D	file:
by	hydro/rsolvers/mhd/hlld_backup.cpp	/^  Real d, mx, my, mz, e, by, bz;$/;"	m	struct:Cons1D	file:
by	hydro/rsolvers/mhd/hlld_iso.cpp	/^  Real d, mx, my, mz, by, bz;$/;"	m	struct:Cons1D	file:
by	hydro/rsolvers/mhd/lhlld.cpp	/^  Real d, mx, my, mz, e, by, bz;$/;"	m	struct:Cons1D	file:
by0	pgen/dusty_soundwave.cpp	/^Real rho_g0, p0, u0, v0, w0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon105	file:
by0	pgen/dusty_wave.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon86	file:
by0	pgen/dusty_wave_1d.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon137	file:
by0	pgen/linear_wave.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon125	file:
by_amb	pgen/jet.cpp	/^Real d_amb, p_amb, vx_amb, vy_amb, vz_amb, bx_amb, by_amb, bz_amb;$/;"	m	namespace:__anon77	file:
by_jet	pgen/jet.cpp	/^Real r_jet, d_jet, p_jet, vx_jet, vy_jet, vz_jet, bx_jet, by_jet, bz_jet;$/;"	m	namespace:__anon77	file:
byl	pgen/shk_cloud.cpp	/^Real bxl, byl, bzl;$/;"	m	namespace:__anon74	file:
bz	hydro/rsolvers/mhd/hlld.cpp	/^  Real d, mx, my, mz, e, by, bz;$/;"	m	struct:Cons1D	file:
bz	hydro/rsolvers/mhd/hlld_backup.cpp	/^  Real d, mx, my, mz, e, by, bz;$/;"	m	struct:Cons1D	file:
bz	hydro/rsolvers/mhd/hlld_iso.cpp	/^  Real d, mx, my, mz, by, bz;$/;"	m	struct:Cons1D	file:
bz	hydro/rsolvers/mhd/lhlld.cpp	/^  Real d, mx, my, mz, e, by, bz;$/;"	m	struct:Cons1D	file:
bz	pgen/magnoh.cpp	/^Real bphi0, bz;$/;"	m	namespace:__anon92	file:
bz0	pgen/dusty_soundwave.cpp	/^Real rho_g0, p0, u0, v0, w0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon105	file:
bz0	pgen/dusty_wave.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon86	file:
bz0	pgen/dusty_wave_1d.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon137	file:
bz0	pgen/linear_wave.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon125	file:
bz_amb	pgen/jet.cpp	/^Real d_amb, p_amb, vx_amb, vy_amb, vz_amb, bx_amb, by_amb, bz_amb;$/;"	m	namespace:__anon77	file:
bz_jet	pgen/jet.cpp	/^Real r_jet, d_jet, p_jet, vx_jet, vy_jet, vz_jet, bx_jet, by_jet, bz_jet;$/;"	m	namespace:__anon77	file:
bzl	pgen/shk_cloud.cpp	/^Real bxl, byl, bzl;$/;"	m	namespace:__anon74	file:
c1	pgen/gr_bondi.cpp	/^Real c1, c2;        \/\/ useful constants$/;"	m	namespace:__anon80	file:
c1i	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1i, c2i, c3i, c4i, c5i, c6i;  \/\/ coefficients for PPM in x1$/;"	m	class:Reconstruction
c1j	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1j, c2j, c3j, c4j, c5j, c6j;  \/\/ coefficients for PPM in x2$/;"	m	class:Reconstruction
c1k	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1k, c2k, c3k, c4k, c5k, c6k;  \/\/ coefficients for PPM in x3$/;"	m	class:Reconstruction
c2	pgen/gr_bondi.cpp	/^Real c1, c2;        \/\/ useful constants$/;"	m	namespace:__anon80	file:
c2i	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1i, c2i, c3i, c4i, c5i, c6i;  \/\/ coefficients for PPM in x1$/;"	m	class:Reconstruction
c2j	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1j, c2j, c3j, c4j, c5j, c6j;  \/\/ coefficients for PPM in x2$/;"	m	class:Reconstruction
c2k	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1k, c2k, c3k, c4k, c5k, c6k;  \/\/ coefficients for PPM in x3$/;"	m	class:Reconstruction
c3i	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1i, c2i, c3i, c4i, c5i, c6i;  \/\/ coefficients for PPM in x1$/;"	m	class:Reconstruction
c3j	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1j, c2j, c3j, c4j, c5j, c6j;  \/\/ coefficients for PPM in x2$/;"	m	class:Reconstruction
c3k	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1k, c2k, c3k, c4k, c5k, c6k;  \/\/ coefficients for PPM in x3$/;"	m	class:Reconstruction
c4i	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1i, c2i, c3i, c4i, c5i, c6i;  \/\/ coefficients for PPM in x1$/;"	m	class:Reconstruction
c4j	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1j, c2j, c3j, c4j, c5j, c6j;  \/\/ coefficients for PPM in x2$/;"	m	class:Reconstruction
c4k	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1k, c2k, c3k, c4k, c5k, c6k;  \/\/ coefficients for PPM in x3$/;"	m	class:Reconstruction
c5i	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1i, c2i, c3i, c4i, c5i, c6i;  \/\/ coefficients for PPM in x1$/;"	m	class:Reconstruction
c5j	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1j, c2j, c3j, c4j, c5j, c6j;  \/\/ coefficients for PPM in x2$/;"	m	class:Reconstruction
c5k	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1k, c2k, c3k, c4k, c5k, c6k;  \/\/ coefficients for PPM in x3$/;"	m	class:Reconstruction
c6i	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1i, c2i, c3i, c4i, c5i, c6i;  \/\/ coefficients for PPM in x1$/;"	m	class:Reconstruction
c6j	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1j, c2j, c3j, c4j, c5j, c6j;  \/\/ coefficients for PPM in x2$/;"	m	class:Reconstruction
c6k	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> c1k, c2k, c3k, c4k, c5k, c6k;  \/\/ coefficients for PPM in x3$/;"	m	class:Reconstruction
called_	bvals/bvals.hpp	/^  static bool called_;$/;"	m	class:BoundaryBase
called_	bvals/bvals_base.cpp	/^bool BoundaryBase::called_;$/;"	m	class:BoundaryBase	file:
cartesian_vector	outputs/outputs.hpp	/^  bool include_ghost_zones, cartesian_vector;$/;"	m	struct:OutputParameters
cbuf_	bvals/cc/mg/bvals_mg.hpp	/^  AthenaArray<Real> cbuf_, cbufold_;$/;"	m	class:MGBoundaryValues
cbuf_	multigrid/multigrid.hpp	/^  AthenaArray<Real> cbuf_, cbufold_;$/;"	m	class:MultigridDriver
cbufold_	bvals/cc/mg/bvals_mg.hpp	/^  AthenaArray<Real> cbuf_, cbufold_;$/;"	m	class:MGBoundaryValues
cbufold_	multigrid/multigrid.hpp	/^  AthenaArray<Real> cbuf_, cbufold_;$/;"	m	class:MultigridDriver
cc	athena.hpp	/^enum class BoundaryQuantity {cc, fc, cc_flcor, fc_flcor, mggrav,$/;"	m	class:BoundaryQuantity
cc_e_	field/field.hpp	/^  AthenaArray<Real> cc_e_;$/;"	m	class:Field
cc_flcor	athena.hpp	/^enum class BoundaryQuantity {cc, fc, cc_flcor, fc_flcor, mggrav,$/;"	m	class:BoundaryQuantity
cc_flx_phys_id_	bvals/cc/bvals_cc.hpp	/^  int cc_phys_id_, cc_flx_phys_id_;$/;"	m	class:CellCenteredBoundaryVariable
cc_phys_id_	bvals/cc/bvals_cc.hpp	/^  int cc_phys_id_, cc_flx_phys_id_;$/;"	m	class:CellCenteredBoundaryVariable
cell_volume_	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> cell_volume_;                             \/\/ the volume of the cells$/;"	m	class:DustFluids
cell_volume_	field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real>  cell_volume_;$/;"	m	class:FieldDiffusion
cell_volume_	hydro/hydro.hpp	/^  AthenaArray<Real> cell_volume_;$/;"	m	class:Hydro
cell_volume_	scalars/scalars.hpp	/^  AthenaArray<Real> cell_volume_;$/;"	m	class:PassiveScalars
cen1	pgen/dust_diffusion.cpp	/^Real A0, sig_x1, sig_x2, cen1, cen2, offset;$/;"	m	namespace:__anon117	file:
cen1	pgen/visc_dustfluids.cpp	/^Real A0, sig_x1, sig_x2, cen1, cen2;$/;"	m	namespace:__anon151	file:
cen2	pgen/dust_diffusion.cpp	/^Real A0, sig_x1, sig_x2, cen1, cen2, offset;$/;"	m	namespace:__anon117	file:
cen2	pgen/visc_dustfluids.cpp	/^Real A0, sig_x1, sig_x2, cen1, cen2;$/;"	m	namespace:__anon151	file:
center_x1	pgen/slotted_cylinder.cpp	/^Real s_width, s_height, center_x1, center_x2;$/;"	m	namespace:__anon82	file:
center_x2	pgen/slotted_cylinder.cpp	/^Real s_width, s_height, center_x1, center_x2;$/;"	m	namespace:__anon82	file:
cfl_limit	task_list/task_list.hpp	/^  Real cfl_limit; \/\/ dt stability limit for the particular time integrator + spatial order$/;"	m	class:TimeIntegratorTaskList
cfl_number	mesh/mesh.hpp	/^  Real start_time, time, tlim, dt, dt_hyperbolic, dt_parabolic, dt_user, cfl_number;$/;"	m	class:Mesh
characteristic_projection	reconstruct/reconstruction.hpp	/^  bool characteristic_projection; \/\/ reconstruct on characteristic or primitive hydro vars$/;"	m	class:Reconstruction
cie	mesh/mesh.hpp	/^  int cis, cie, cjs, cje, cks, cke, cnghost;$/;"	m	class:MeshBlock
cis	mesh/mesh.hpp	/^  int cis, cie, cjs, cje, cks, cke, cnghost;$/;"	m	class:MeshBlock
cje	mesh/mesh.hpp	/^  int cis, cie, cjs, cje, cks, cke, cnghost;$/;"	m	class:MeshBlock
cjs	mesh/mesh.hpp	/^  int cis, cie, cjs, cje, cks, cke, cnghost;$/;"	m	class:MeshBlock
cke	mesh/mesh.hpp	/^  int cis, cie, cjs, cje, cks, cke, cnghost;$/;"	m	class:MeshBlock
cks	mesh/mesh.hpp	/^  int cis, cie, cjs, cje, cks, cke, cnghost;$/;"	m	class:MeshBlock
cndflx	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> cndflx[3]; \/\/ thermal stress tensor$/;"	m	class:HydroDiffusion
cnghost	mesh/mesh.hpp	/^  int cis, cie, cjs, cje, cks, cke, cnghost;$/;"	m	class:MeshBlock
cnt_	fft/athena_fft.hpp	/^  std::int64_t cnt_, gcnt_;$/;"	m	class:FFTBlock::AthenaFFTDirection
coarse_b_	field/field.hpp	/^  FaceField coarse_b_;$/;"	m	class:Field
coarse_bcc_	field/field.hpp	/^  AthenaArray<Real> coarse_bcc_;$/;"	m	class:Field
coarse_buf	bvals/cc/bvals_cc.hpp	/^  AthenaArray<Real> *coarse_buf;  \/\/!< may pass nullptr if mesh refinement is unsupported$/;"	m	class:CellCenteredBoundaryVariable
coarse_buf	bvals/fc/bvals_fc.hpp	/^  FaceField &coarse_buf;$/;"	m	class:FaceCenteredBoundaryVariable
coarse_cons_	hydro/hydro.hpp	/^  AthenaArray<Real> coarse_cons_, coarse_prim_;$/;"	m	class:Hydro
coarse_df_cons_	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> coarse_df_cons_, coarse_df_prim_; \/\/ coarse df_cons and coarse df_prim, used in mesh refinement$/;"	m	class:DustFluids
coarse_df_prim_	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> coarse_df_cons_, coarse_df_prim_; \/\/ coarse df_cons and coarse df_prim, used in mesh refinement$/;"	m	class:DustFluids
coarse_diff_mom_cc_	dustfluids/dustfluids_diffusion_cc/cell_center_diffusions.hpp	/^  AthenaArray<Real> coarse_diff_mom_cc_; \/\/ used in mesh refinement$/;"	m	class:DustFluidsCellCenterDiffusion
coarse_flag	coordinates/coordinates.hpp	/^  bool coarse_flag;  \/\/ true if this coordinate object is parent (coarse) mesh in AMR$/;"	m	class:Coordinates
coarse_prim_	hydro/hydro.hpp	/^  AthenaArray<Real> coarse_cons_, coarse_prim_;$/;"	m	class:Hydro
coarse_r_	scalars/scalars.hpp	/^  AthenaArray<Real> coarse_s_, coarse_r_;$/;"	m	class:PassiveScalars
coarse_s_	scalars/scalars.hpp	/^  AthenaArray<Real> coarse_s_, coarse_r_;$/;"	m	class:PassiveScalars
code_time	outputs/outputs.hpp	/^  float code_time;                            \/\/ time in code unit for XDMF$/;"	m	class:ATHDF5Output
comm	fft/plimpton/remap_2d.h	/^  MPI_Comm comm;                    \/* group of procs performing remap *\/$/;"	m	struct:remap_plan_2d
comm	fft/plimpton/remap_3d.h	/^  MPI_Comm comm;                    \/* group of procs performing remap *\/$/;"	m	struct:remap_plan_3d
comm_	outputs/io_wrapper.hpp	/^  MPI_Comm comm_;$/;"	m	class:IOWrapper
complete	task_list/task_list.hpp	/^enum class TaskListStatus {running, stuck, complete, nothing_to_do};$/;"	m	class:TaskListStatus
compute_error	pgen/gr_linear_wave.cpp	/^bool compute_error;           \/\/ flag indicating L1 errors should be computed and saved$/;"	m	namespace:__anon84	file:
cons	athena.hpp	/^enum class HydroBoundaryQuantity {cons, prim};$/;"	m	class:HydroBoundaryQuantity
cons	orbital_advection/orbital_advection.hpp	/^enum class OrbitalTransform {none=0, prim=1, cons=2, all=3};$/;"	m	class:OrbitalTransform
cons_	hydro/hydro.hpp	/^  AthenaArray<Real> cons_;         \/\/ conserved state, for some GR Riemann solvers$/;"	m	class:Hydro
cons_df	athena.hpp	/^enum class DustFluidsBoundaryQuantity {cons_df, prim_df};$/;"	m	class:DustFluidsBoundaryQuantity
const_nu_dust	dustfluids/dustfluids.hpp	/^  Real const_nu_dust[NDUSTFLUIDS];       \/\/ Constant concentration diffusivity of dust$/;"	m	class:DustFluids
const_nu_dust	pgen/inject_pebble_3D.cpp	/^Real const_nu_dust[NDUSTFLUIDS];$/;"	m	namespace:__anon62	file:
const_stopping_time	dustfluids/dustfluids.hpp	/^  Real const_stopping_time[NDUSTFLUIDS]; \/\/ Constant stopping time of dust$/;"	m	class:DustFluids
const_stopping_time	pgen/inject_pebble_3D.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS], boundary_D2G[NDUSTFLUIDS], const_stopping_time[NDUSTFLUIDS];$/;"	m	namespace:__anon62	file:
coord_area1_i1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area1_i_, coord_area1_i1_;$/;"	m	class:Coordinates
coord_area1_i_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area1_i_, coord_area1_i1_;$/;"	m	class:Coordinates
coord_area1_j1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area1_j_, coord_area1_j1_, coord_area1_j2_;$/;"	m	class:Coordinates
coord_area1_j2_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area1_j_, coord_area1_j1_, coord_area1_j2_;$/;"	m	class:Coordinates
coord_area1_j_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area1_j_, coord_area1_j1_, coord_area1_j2_;$/;"	m	class:Coordinates
coord_area1_k1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area1_k1_;$/;"	m	class:Coordinates
coord_area1_kji_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area1_kji_;$/;"	m	class:Coordinates
coord_area1vc_i_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area1vc_i_,coord_area1vc_j_; \/\/nonidealmhd additions$/;"	m	class:Coordinates
coord_area1vc_j_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area1vc_i_,coord_area1vc_j_; \/\/nonidealmhd additions$/;"	m	class:Coordinates
coord_area2_i1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area2_i_, coord_area2_i1_, coord_area2_i2_;$/;"	m	class:Coordinates
coord_area2_i2_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area2_i_, coord_area2_i1_, coord_area2_i2_;$/;"	m	class:Coordinates
coord_area2_i_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area2_i_, coord_area2_i1_, coord_area2_i2_;$/;"	m	class:Coordinates
coord_area2_j1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area2_j_, coord_area2_j1_, coord_area2_j2_;$/;"	m	class:Coordinates
coord_area2_j2_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area2_j_, coord_area2_j1_, coord_area2_j2_;$/;"	m	class:Coordinates
coord_area2_j_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area2_j_, coord_area2_j1_, coord_area2_j2_;$/;"	m	class:Coordinates
coord_area2_k1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area2_k1_;$/;"	m	class:Coordinates
coord_area2_kji_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area2_kji_;$/;"	m	class:Coordinates
coord_area2vc_i_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area2vc_i_,coord_area2vc_j_; \/\/nonidealmhd additions$/;"	m	class:Coordinates
coord_area2vc_j_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area2vc_i_,coord_area2vc_j_; \/\/nonidealmhd additions$/;"	m	class:Coordinates
coord_area3_i1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area3_i_, coord_area3_i1_, coord_area3_i2_;$/;"	m	class:Coordinates
coord_area3_i2_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area3_i_, coord_area3_i1_, coord_area3_i2_;$/;"	m	class:Coordinates
coord_area3_i_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area3_i_, coord_area3_i1_, coord_area3_i2_;$/;"	m	class:Coordinates
coord_area3_j1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area3_j1_, coord_area3_j2_;$/;"	m	class:Coordinates
coord_area3_j2_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area3_j1_, coord_area3_j2_;$/;"	m	class:Coordinates
coord_area3_kji_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area3_kji_;$/;"	m	class:Coordinates
coord_area3vc_i_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_area3vc_i_; \/\/nonidealmhd addition$/;"	m	class:Coordinates
coord_len1_i1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len1_i1_, coord_len1_i2_;$/;"	m	class:Coordinates
coord_len1_i2_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len1_i1_, coord_len1_i2_;$/;"	m	class:Coordinates
coord_len1_j1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len1_j1_, coord_len1_j2_;$/;"	m	class:Coordinates
coord_len1_j2_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len1_j1_, coord_len1_j2_;$/;"	m	class:Coordinates
coord_len1_kji_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len1_kji_;$/;"	m	class:Coordinates
coord_len2_i1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len2_i1_;$/;"	m	class:Coordinates
coord_len2_j1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len2_j1_, coord_len2_j2_;$/;"	m	class:Coordinates
coord_len2_j2_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len2_j1_, coord_len2_j2_;$/;"	m	class:Coordinates
coord_len2_kji_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len2_kji_;$/;"	m	class:Coordinates
coord_len3_i1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len3_i1_;$/;"	m	class:Coordinates
coord_len3_j1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len3_j1_, coord_len3_j2_;$/;"	m	class:Coordinates
coord_len3_j2_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len3_j1_, coord_len3_j2_;$/;"	m	class:Coordinates
coord_len3_k1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len3_k1_;$/;"	m	class:Coordinates
coord_len3_kji_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_len3_kji_;$/;"	m	class:Coordinates
coord_src1_i_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_src1_i_;$/;"	m	class:Coordinates
coord_src1_j_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_src1_j_;$/;"	m	class:Coordinates
coord_src2_i_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_src2_i_;$/;"	m	class:Coordinates
coord_src2_j_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_src2_j_;$/;"	m	class:Coordinates
coord_src3_j_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_src3_j_;$/;"	m	class:Coordinates
coord_src_j1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_src_j1_, coord_src_j2_;$/;"	m	class:Coordinates
coord_src_j2_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_src_j1_, coord_src_j2_;$/;"	m	class:Coordinates
coord_src_kji_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_src_kji_;$/;"	m	class:Coordinates
coord_vol_i1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_vol_i_, coord_vol_i1_, coord_vol_i2_;$/;"	m	class:Coordinates
coord_vol_i2_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_vol_i_, coord_vol_i1_, coord_vol_i2_;$/;"	m	class:Coordinates
coord_vol_i_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_vol_i_, coord_vol_i1_, coord_vol_i2_;$/;"	m	class:Coordinates
coord_vol_j1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_vol_j_, coord_vol_j1_, coord_vol_j2_;$/;"	m	class:Coordinates
coord_vol_j2_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_vol_j_, coord_vol_j1_, coord_vol_j2_;$/;"	m	class:Coordinates
coord_vol_j_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_vol_j_, coord_vol_j1_, coord_vol_j2_;$/;"	m	class:Coordinates
coord_vol_k1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_vol_k1_;$/;"	m	class:Coordinates
coord_vol_kji_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_vol_kji_;$/;"	m	class:Coordinates
coord_width1_i1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_width1_i1_;$/;"	m	class:Coordinates
coord_width1_kji_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_width1_kji_;$/;"	m	class:Coordinates
coord_width2_i1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_width2_i1_;$/;"	m	class:Coordinates
coord_width2_j1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_width2_j1_;$/;"	m	class:Coordinates
coord_width2_kji_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_width2_kji_;$/;"	m	class:Coordinates
coord_width3_j1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_width3_j1_, coord_width3_j2_, coord_width3_j3_;$/;"	m	class:Coordinates
coord_width3_j2_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_width3_j1_, coord_width3_j2_, coord_width3_j3_;$/;"	m	class:Coordinates
coord_width3_j3_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_width3_j1_, coord_width3_j2_, coord_width3_j3_;$/;"	m	class:Coordinates
coord_width3_ji1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_width3_ji1_;$/;"	m	class:Coordinates
coord_width3_k1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_width3_k1_;$/;"	m	class:Coordinates
coord_width3_kji_	coordinates/coordinates.hpp	/^  AthenaArray<Real> coord_width3_kji_;$/;"	m	class:Coordinates
copy	fft/plimpton/fft_2d.h	/^  FFT_DATA *copy;                   \/* memory for remap results (if needed) *\/$/;"	m	struct:fft_plan_2d
copy	fft/plimpton/fft_3d.h	/^  FFT_DATA *copy;                   \/* memory for remap results (if needed) *\/$/;"	m	struct:fft_plan_3d
copy_other	outputs/outputs.hpp	/^  OutputType& operator=(const OutputType& copy_other) = default;$/;"	m	class:OutputType
copy_other	outputs/outputs.hpp	/^  OutputType(const OutputType& copy_other) = default;$/;"	m	class:OutputType
copy_velocity	pgen/inject_pebble_3D.cpp	/^void copy_velocity(MeshBlock *pmb, const Real time, const Real dt, const AthenaArray<Real> &prim,$/;"	f	namespace:__anon63
correct_err	reconstruct/reconstruction.hpp	/^  const bool correct_ic, correct_err; \/\/ used in Mesh::Initialize() and ProblemGenerator()$/;"	m	class:Reconstruction
correct_ic	reconstruct/reconstruction.hpp	/^  const bool correct_ic, correct_err; \/\/ used in Mesh::Initialize() and ProblemGenerator()$/;"	m	class:Reconstruction
cos_a2	pgen/cpaw.cpp	/^Real fac, sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon88	file:
cos_a2	pgen/dusty_wave.cpp	/^Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon86	file:
cos_a2	pgen/jeans.cpp	/^Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon119	file:
cos_a2	pgen/linear_wave.cpp	/^Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon125	file:
cos_a3	pgen/cpaw.cpp	/^Real fac, sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon88	file:
cos_a3	pgen/dusty_wave.cpp	/^Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon86	file:
cos_a3	pgen/jeans.cpp	/^Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon119	file:
cos_a3	pgen/linear_wave.cpp	/^Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon125	file:
cos_tilt	pgen/gr_torus.cpp	/^Real sin_tilt, cos_tilt;                      \/\/ calculated tilt parameters$/;"	m	namespace:__anon39	file:
cost_	mesh/mesh.hpp	/^  double cost_, lb_time_;$/;"	m	class:MeshBlock
cost_	mesh/meshblock.cpp	/^    nreal_user_meshblock_data_(), nint_user_meshblock_data_(), cost_(icost) {$/;"	f
costlist	mesh/mesh.hpp	/^  double *costlist;$/;"	m	class:Mesh
cs2	pgen/jeans.cpp	/^Real cs2, gam, gm1, omega, omega2, gconst;$/;"	m	namespace:__anon119	file:
cs2_0	pgen/disk_VSI.cpp	/^Real gm0, r0, rho0, pvalue, cs2_0, qvalue, beta, nu_alpha, dfloor, dffloor, rho_floor, Omega0,$/;"	m	namespace:__anon133	file:
cs_dustfluids_array	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> cs_dustfluids_array;   \/\/ Arrays of sound speed of dust, cs_d^2 = nu_d\/T_eddy$/;"	m	class:DustFluids
cs_dustfluids_array_n	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> cs_dustfluids_array_n; \/\/ Arrays of sound speed of dust, cs_d^2 = nu_d\/T_eddy at stage n$/;"	m	class:DustFluids
cs_planet	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^omega_planet[10], inv_omega_planet[10], cs_planet[10], a_orbit[10], e_orbit[10],$/;"	m	namespace:__anon68	file:
cs_planet	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^omega_planet[10], inv_omega_planet[10], cs_planet[10],$/;"	m	namespace:__anon109	file:
cs_planet	pgen/disk_planet_dust_cylindrical.cpp	/^t0_planet, time_drag, vk_planet, omega_planet, inv_omega_planet, cs_planet,$/;"	m	namespace:__anon99	file:
cs_planet	pgen/disk_planet_dust_spherical.cpp	/^t0_planet, time_drag, vk_planet, omega_planet, inv_omega_planet, cs_planet,$/;"	m	namespace:__anon113	file:
ct_update	field/field.hpp	/^  FaceField b0, ct_update; \/\/ rkl2 STS memory registers$/;"	m	class:Field
curr_time	pgen/disk_VSI.cpp	/^prev_time, curr_time, next_time, edt;$/;"	m	namespace:__anon133	file:
current_level	mesh/mesh.hpp	/^  int root_level, max_level, current_level;$/;"	m	class:Mesh
current_level_	multigrid/multigrid.hpp	/^  int current_level_, fmglevel_;$/;"	m	class:MultigridDriver
current_level_	multigrid/multigrid.hpp	/^  int nlevel_, ngh_, nvar_, current_level_;$/;"	m	class:Multigrid
curvilinear	reconstruct/reconstruction.hpp	/^  bool uniform[3], curvilinear[2];$/;"	m	class:Reconstruction
d	hydro/rsolvers/mhd/hlld.cpp	/^  Real d, mx, my, mz, e, by, bz;$/;"	m	struct:Cons1D	file:
d	hydro/rsolvers/mhd/hlld_backup.cpp	/^  Real d, mx, my, mz, e, by, bz;$/;"	m	struct:Cons1D	file:
d	hydro/rsolvers/mhd/hlld_iso.cpp	/^  Real d, mx, my, mz, by, bz;$/;"	m	struct:Cons1D	file:
d	hydro/rsolvers/mhd/lhlld.cpp	/^  Real d, mx, my, mz, e, by, bz;$/;"	m	struct:Cons1D	file:
d0	pgen/dust_diffusion.cpp	/^Real v0, t0, x0, d0, rho0, v1, v2, v3;$/;"	m	namespace:__anon117	file:
d0	pgen/dusty_wave.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon86	file:
d0	pgen/dusty_wave_1d.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon137	file:
d0	pgen/hgb.cpp	/^Real iso_cs, gm1, d0, p0;$/;"	m	namespace:__anon115	file:
d0	pgen/jeans.cpp	/^Real d0, p0, v0, u0, w0, va, b0;$/;"	m	namespace:__anon119	file:
d0	pgen/jgg.cpp	/^Real iso_cs, gm1, d0, p0;$/;"	m	namespace:__anon123	file:
d0	pgen/linear_wave.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon125	file:
d0	pgen/mignone_advection.cpp	/^constexpr Real d0 = 1.0;$/;"	m	namespace:__anon149	file:
d0	pgen/slotted_cylinder.cpp	/^constexpr Real d0 = 1.0;$/;"	m	namespace:__anon82	file:
d0	pgen/ssheet.cpp	/^Real iso_cs, gm1, d0, p0;$/;"	m	namespace:__anon95	file:
d0	pgen/ssheet_RWI_dust.cpp	/^Real sound_speed, gamma1, inv_gm1, d0, amp, x1size, x2size, x3size, qshear, Omega0,$/;"	m	namespace:__anon90	file:
d0	pgen/ssheet_planet_dust.cpp	/^Real x1size, x2size, x3size, sound_speed, gm1, inv_gm1, d0, qshear, Omega0, beta,$/;"	m	namespace:__anon111	file:
d_amb	pgen/jet.cpp	/^Real d_amb, p_amb, vx_amb, vy_amb, vz_amb, bx_amb, by_amb, bz_amb;$/;"	m	namespace:__anon77	file:
d_jet	pgen/jet.cpp	/^Real r_jet, d_jet, p_jet, vx_jet, vy_jet, vz_jet, bx_jet, by_jet, bz_jet;$/;"	m	namespace:__anon77	file:
d_src	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> s_src[5], d_src[13]; \/\/ s_src for deep copy, d_src for shallow copy$/;"	m	class:OrbitalTransform::OrbitalAdvection
damping_rate	pgen/disk_RWI_2D.cpp	/^tau_damping, damping_rate, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon101	file:
damping_rate	pgen/disk_VSI.cpp	/^x1min, x1max, x2min, x2max, damping_rate, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon133	file:
damping_rate	pgen/disk_dust_diffusion.cpp	/^Real x1min, x1max, tau_damping, damping_rate;$/;"	m	namespace:__anon70	file:
damping_rate	pgen/disk_dust_drift.cpp	/^Real x1min, x1max, tau_damping, damping_rate;$/;"	m	namespace:__anon64	file:
damping_rate	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real x1min, x1max, damping_rate, gm0, r0, rho0, dslope, p0_over_r0, pslope, beta,$/;"	m	namespace:__anon68	file:
damping_rate	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real x1min, x1max, damping_rate, gm0, r0, rho0, dslope, p0_over_r0, pslope, beta,$/;"	m	namespace:__anon109	file:
damping_rate	pgen/disk_planet_dust_cylindrical.cpp	/^x1min, x1max, damping_rate, Hill_radius, accretion_radius, accretion_rate,$/;"	m	namespace:__anon99	file:
damping_rate	pgen/disk_planet_dust_spherical.cpp	/^x1min, x1max, damping_rate, Hill_radius, accretion_radius, accretion_rate,$/;"	m	namespace:__anon113	file:
damping_rate	pgen/disk_streaming_cylindrical.cpp	/^Real x1min, x1max, tau_damping, damping_rate;$/;"	m	namespace:__anon54	file:
damping_rate	pgen/disk_streaming_spherical.cpp	/^Real x1min, x1max, tau_damping, damping_rate;$/;"	m	namespace:__anon75	file:
damping_rate	pgen/dust_diffusion.cpp	/^Real x1min, x1max, tau_damping, damping_rate;$/;"	m	namespace:__anon117	file:
damping_rate	pgen/ssheet_RWI_dust.cpp	/^A_bump, sigma_bump, x1min, x1max, damping_rate, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon90	file:
damping_rate	pgen/ssheet_planet_dust.cpp	/^x1min, x1max, damping_rate, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon111	file:
data	athena_arrays.hpp	/^  T *data() { return pdata_; }$/;"	f	class:AthenaArray
data	athena_arrays.hpp	/^  const T *data() const { return pdata_; }$/;"	f	class:AthenaArray
data	outputs/outputs.hpp	/^  AthenaArray<Real> data;  \/\/ array containing data (usually shallow copy\/slice)$/;"	m	struct:OutputData
data	utils/interp_table.hpp	/^  AthenaArray<Real> data;$/;"	m	class:InterpTable2D
data_format	outputs/outputs.hpp	/^  std::string data_format;$/;"	m	struct:OutputParameters
dataset_names	outputs/outputs.hpp	/^  char (*dataset_names)[max_name_length+1];   \/\/ array of C-string names of datasets$/;"	m	class:ATHDF5Output
dby	pgen/dusty_soundwave.cpp	/^Real rho_g0, p0, u0, v0, w0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon105	file:
dby	pgen/dusty_wave.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon86	file:
dby	pgen/dusty_wave_1d.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon137	file:
dby	pgen/linear_wave.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon125	file:
dbz	pgen/dusty_soundwave.cpp	/^Real rho_g0, p0, u0, v0, w0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon105	file:
dbz	pgen/dusty_wave.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon86	file:
dbz	pgen/dusty_wave_1d.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon137	file:
dbz	pgen/linear_wave.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon125	file:
dcycle	outputs/outputs.hpp	/^  int dcycle;$/;"	m	struct:OutputParameters
ddisp	mesh/mesh.hpp	/^  int *rdisp, *ddisp;$/;"	m	class:Mesh
decomp_	fft/athena_fft.hpp	/^  int decomp_, pdim_;$/;"	m	class:FFTBlock::AthenaFFTDirection
decomp_	fft/athena_fft.hpp	/^  int decomp_, pdim_;$/;"	m	class:FFTBlock::FFTDriver
dedt	fft/turbulence.hpp	/^  Real expo, dedt, dvol;$/;"	m	class:TurbulenceDriver
def	multigrid/multigrid.hpp	/^  AthenaArray<Real> u, def, src, uold;$/;"	m	struct:MGOctet
def_	multigrid/multigrid.hpp	/^  AthenaArray<Real> *u_, *def_, *src_, *uold_;$/;"	m	class:Multigrid
defscale_	multigrid/multigrid.hpp	/^  Real defscale_;$/;"	m	class:Multigrid
delta	task_list/task_list.hpp	/^    Real delta; \/\/!> low-storage coefficients to avoid double F() evaluation per substage$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
delta_b	pgen/gr_linear_wave.cpp	/^Real delta_u[4], delta_b[4];  \/\/ perturbations to contravariant quantities$/;"	m	namespace:__anon84	file:
delta_mom1	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> delta_mom1,       delta_mom2,       delta_mom3;$/;"	m	class:DustGasDrag
delta_mom1_im	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> delta_mom1_im,    delta_mom2_im,    delta_mom3_im;$/;"	m	class:DustGasDrag
delta_mom1_im_II	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> delta_mom1_im_II, delta_mom2_im_II, delta_mom3_im_II;$/;"	m	class:DustGasDrag
delta_mom1_src	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> delta_mom1_src,   delta_mom2_src,   delta_mom3_src;$/;"	m	class:DustGasDrag
delta_mom2	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> delta_mom1,       delta_mom2,       delta_mom3;$/;"	m	class:DustGasDrag
delta_mom2_im	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> delta_mom1_im,    delta_mom2_im,    delta_mom3_im;$/;"	m	class:DustGasDrag
delta_mom2_im_II	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> delta_mom1_im_II, delta_mom2_im_II, delta_mom3_im_II;$/;"	m	class:DustGasDrag
delta_mom2_src	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> delta_mom1_src,   delta_mom2_src,   delta_mom3_src;$/;"	m	class:DustGasDrag
delta_mom3	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> delta_mom1,       delta_mom2,       delta_mom3;$/;"	m	class:DustGasDrag
delta_mom3_im	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> delta_mom1_im,    delta_mom2_im,    delta_mom3_im;$/;"	m	class:DustGasDrag
delta_mom3_im_II	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> delta_mom1_im_II, delta_mom2_im_II, delta_mom3_im_II;$/;"	m	class:DustGasDrag
delta_mom3_src	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> delta_mom1_src,   delta_mom2_src,   delta_mom3_src;$/;"	m	class:DustGasDrag
delta_pgas	pgen/gr_linear_wave.cpp	/^Real delta_rho, delta_pgas;   \/\/ perturbations to thermodynamic quantities$/;"	m	namespace:__anon84	file:
delta_rho	pgen/gr_linear_wave.cpp	/^Real delta_rho, delta_pgas;   \/\/ perturbations to thermodynamic quantities$/;"	m	namespace:__anon84	file:
delta_rho_dust_imag	pgen/dusty_soundwave.cpp	/^Real delta_rho_dust_imag[NDUSTFLUIDS];$/;"	m	namespace:__anon105	file:
delta_rho_dust_real	pgen/dusty_soundwave.cpp	/^Real delta_rho_dust_real[NDUSTFLUIDS];$/;"	m	namespace:__anon105	file:
delta_rho_gas_imag	pgen/dusty_soundwave.cpp	/^Real delta_rho_gas_real, delta_rho_gas_imag;$/;"	m	namespace:__anon105	file:
delta_rho_gas_imag	pgen/dusty_wave_1d.cpp	/^Real delta_rho_gas_real, delta_rho_gas_imag;$/;"	m	namespace:__anon137	file:
delta_rho_gas_real	pgen/dusty_soundwave.cpp	/^Real delta_rho_gas_real, delta_rho_gas_imag;$/;"	m	namespace:__anon105	file:
delta_rho_gas_real	pgen/dusty_wave_1d.cpp	/^Real delta_rho_gas_real, delta_rho_gas_imag;$/;"	m	namespace:__anon137	file:
delta_u	pgen/gr_linear_wave.cpp	/^Real delta_u[4], delta_b[4];  \/\/ perturbations to contravariant quantities$/;"	m	namespace:__anon84	file:
delta_v	pgen/gr_linear_wave.cpp	/^Real delta_v[4];              \/\/ perturbations to 3-velocity$/;"	m	namespace:__anon84	file:
delta_vel_dust_imag	pgen/dusty_soundwave.cpp	/^Real delta_vel_dust_imag[NDUSTFLUIDS];$/;"	m	namespace:__anon105	file:
delta_vel_dust_real	pgen/dusty_soundwave.cpp	/^Real delta_vel_dust_real[NDUSTFLUIDS];$/;"	m	namespace:__anon105	file:
delta_vel_gas_imag	pgen/dusty_soundwave.cpp	/^Real delta_vel_gas_real, delta_vel_gas_imag;$/;"	m	namespace:__anon105	file:
delta_vel_gas_imag	pgen/dusty_wave_1d.cpp	/^Real delta_vel_gas_real, delta_vel_gas_imag;$/;"	m	namespace:__anon137	file:
delta_vel_gas_real	pgen/dusty_soundwave.cpp	/^Real delta_vel_gas_real, delta_vel_gas_imag;$/;"	m	namespace:__anon105	file:
delta_vel_gas_real	pgen/dusty_wave_1d.cpp	/^Real delta_vel_gas_real, delta_vel_gas_imag;$/;"	m	namespace:__anon137	file:
den	pgen/cpaw.cpp	/^Real den, pres, gm1, b_par, b_perp, v_perp, v_par;$/;"	m	namespace:__anon88	file:
dens_pow	eos/general/eos_table.cpp	/^Real dens_pow = -1.0;$/;"	m	namespace:__anon10	file:
density	pgen/gr_torus.cpp	/^enum class MagneticFieldConfigs {density, loops};$/;"	m	class:MagneticFieldConfigs	file:
density_floor_	eos/eos.hpp	/^  Real density_floor_, pressure_floor_;  \/\/ density and pressure floors$/;"	m	class:EquationOfState
dependency	task_list/mg_task_list.hpp	/^  TaskID dependency;   \/\/!> encodes dependencies to other tasks using MultigridTaskNames$/;"	m	struct:MGTask
dependency	task_list/task_list.hpp	/^  TaskID dependency; \/\/!> encodes dependencies to other tasks using$/;"	m	struct:Task
deref_count_	mesh/mesh_refinement.hpp	/^  int refine_flag_, neighbor_rflag_, deref_count_, deref_threshold_;$/;"	m	class:MeshRefinement
deref_threshold_	mesh/mesh_refinement.hpp	/^  int refine_flag_, neighbor_rflag_, deref_count_, deref_threshold_;$/;"	m	class:MeshRefinement
derefine_factor	pgen/disk_RWI_2D.cpp	/^refine_factor, derefine_factor, refine_rad_min, refine_rad_max;$/;"	m	namespace:__anon101	file:
derefine_factor	pgen/disk_planet_dust_cylindrical.cpp	/^refine_factor, derefine_factor, refine_rad_min, refine_rad_max;$/;"	m	namespace:__anon99	file:
derefine_factor	pgen/disk_planet_dust_spherical.cpp	/^refine_factor, derefine_factor, refine_rad_min, refine_rad_max;$/;"	m	namespace:__anon113	file:
det_arr	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> det_arr, scale_arr;$/;"	m	class:DustGasDrag
df_cons	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> df_cons, df_cons1, df_cons2; \/\/ time-integrator memory register #1$/;"	m	class:DustFluids
df_cons0	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> df_cons0, df_cons_fl_div;    \/\/ rkl2 STS memory registers;$/;"	m	class:DustFluids
df_cons1	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> df_cons, df_cons1, df_cons2; \/\/ time-integrator memory register #1$/;"	m	class:DustFluids
df_cons2	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> df_cons, df_cons1, df_cons2; \/\/ time-integrator memory register #1$/;"	m	class:DustFluids
df_cons_af_src	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> df_cons_af_src;              \/\/ conservatives after explicit source terms$/;"	m	class:DustFluids
df_cons_cc	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> df_cons_cc, df_prim_cc;   \/\/ cell-centered approximations$/;"	m	class:DustFluids
df_cons_coarse_recv	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> df_cons_coarse_send, df_cons_coarse_recv, df_cons_temp;$/;"	m	class:OrbitalTransform::OrbitalAdvection
df_cons_coarse_send	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> df_cons_coarse_send, df_cons_coarse_recv, df_cons_temp;$/;"	m	class:OrbitalTransform::OrbitalAdvection
df_cons_fl_div	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> df_cons0, df_cons_fl_div;    \/\/ rkl2 STS memory registers;$/;"	m	class:DustFluids
df_cons_orb	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> df_prim_orb, df_cons_orb; \/\/ buffer for orbital advection system output for dust fluids$/;"	m	class:OrbitalTransform::OrbitalAdvection
df_cons_temp	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> df_cons_coarse_send, df_cons_coarse_recv, df_cons_temp;$/;"	m	class:OrbitalTransform::OrbitalAdvection
df_flux	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> df_flux[3];                    \/\/ face-averaged flux vector$/;"	m	class:DustFluids
df_prim	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> df_prim, df_prim1, df_prim_n;  \/\/ time-integrator memory register #3$/;"	m	class:DustFluids
df_prim1	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> df_prim, df_prim1, df_prim_n;  \/\/ time-integrator memory register #3$/;"	m	class:DustFluids
df_prim_cc	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> df_cons_cc, df_prim_cc;   \/\/ cell-centered approximations$/;"	m	class:DustFluids
df_prim_l3d_	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> df_prim_l3d_, df_prim_r3d_;$/;"	m	class:DustFluids
df_prim_l_	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> df_prim_l_, df_prim_r_, df_prim_lb_;  \/\/ left and right states in reconstruction$/;"	m	class:DustFluids
df_prim_lb_	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> df_prim_l_, df_prim_r_, df_prim_lb_;  \/\/ left and right states in reconstruction$/;"	m	class:DustFluids
df_prim_n	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> df_prim, df_prim1, df_prim_n;  \/\/ time-integrator memory register #3$/;"	m	class:DustFluids
df_prim_orb	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> df_prim_orb, df_cons_orb; \/\/ buffer for orbital advection system output for dust fluids$/;"	m	class:OrbitalTransform::OrbitalAdvection
df_prim_r3d_	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> df_prim_l3d_, df_prim_r3d_;$/;"	m	class:DustFluids
df_prim_r_	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> df_prim_l_, df_prim_r_, df_prim_lb_;  \/\/ left and right states in reconstruction$/;"	m	class:DustFluids
dfbuf	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> dfbuf;    \/\/ pencil buffer for shallow copy for dust fluids calculation$/;"	m	class:OrbitalTransform::OrbitalAdvection
dfbvar	dustfluids/dustfluids.hpp	/^  DustFluidsBoundaryVariable    dfbvar;  \/\/ Dust Fluids boundary variables Object (Cell-Centered)$/;"	m	class:DustFluids
dfccdif	dustfluids/dustfluids.hpp	/^  DustFluidsCellCenterDiffusion dfccdif; \/\/ Object used in calculating the diffusions of dust$/;"	m	class:DustFluids
dfdif	dustfluids/dustfluids.hpp	/^  DustFluidsDiffusion           dfdif;   \/\/ Object used in calculating the diffusions of dust$/;"	m	class:DustFluids
dfdrag	dustfluids/dustfluids.hpp	/^  DustGasDrag                   dfdrag;  \/\/ Object used in calculating the dust-gas drags$/;"	m	class:DustFluids
dffloor	pgen/disk_RWI_2D.cpp	/^dfloor, dffloor, Omega0, user_dt, phi_vortex,$/;"	m	namespace:__anon101	file:
dffloor	pgen/disk_VSI.cpp	/^Real gm0, r0, rho0, pvalue, cs2_0, qvalue, beta, nu_alpha, dfloor, dffloor, rho_floor, Omega0,$/;"	m	namespace:__anon133	file:
dffloor	pgen/disk_dust_diffusion.cpp	/^Real dfloor, dffloor, Omega0, user_dt;$/;"	m	namespace:__anon70	file:
dffloor	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^nu_alpha, dfloor, dffloor, Omega0, user_dt, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon68	file:
dffloor	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^nu_alpha, dfloor, dffloor, Omega0, user_dt, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon109	file:
dffloor	pgen/disk_planet_dust_cylindrical.cpp	/^t_planet_growth, dfloor, dffloor, Omega0, user_dt, A_gap,$/;"	m	namespace:__anon99	file:
dffloor	pgen/disk_planet_dust_spherical.cpp	/^t_planet_growth, dfloor, dffloor, Omega0, user_dt, A_gap,$/;"	m	namespace:__anon113	file:
dffloor	pgen/disk_streaming_cylindrical.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, amp;$/;"	m	namespace:__anon54	file:
dffloor	pgen/disk_streaming_spherical.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, amp;$/;"	m	namespace:__anon75	file:
dffloor	pgen/dust_diffusion.cpp	/^Real gm0, r0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, iso_cs2_r0;$/;"	m	namespace:__anon117	file:
dffloor	pgen/dusty_kh.cpp	/^Real dffloor;$/;"	m	namespace:__anon129	file:
dffloor	pgen/kh_dust.cpp	/^Real dffloor;$/;"	m	namespace:__anon107	file:
dfloor	pgen/disk.cpp	/^Real dfloor;$/;"	m	namespace:__anon36	file:
dfloor	pgen/disk_RWI_2D.cpp	/^dfloor, dffloor, Omega0, user_dt, phi_vortex,$/;"	m	namespace:__anon101	file:
dfloor	pgen/disk_VSI.cpp	/^Real gm0, r0, rho0, pvalue, cs2_0, qvalue, beta, nu_alpha, dfloor, dffloor, rho_floor, Omega0,$/;"	m	namespace:__anon133	file:
dfloor	pgen/disk_dust_diffusion.cpp	/^Real dfloor, dffloor, Omega0, user_dt;$/;"	m	namespace:__anon70	file:
dfloor	pgen/disk_dust_drift.cpp	/^Real gm0, r0, rho_0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, user_dt, iso_cs2_r0;$/;"	m	namespace:__anon64	file:
dfloor	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^nu_alpha, dfloor, dffloor, Omega0, user_dt, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon68	file:
dfloor	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^nu_alpha, dfloor, dffloor, Omega0, user_dt, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon109	file:
dfloor	pgen/disk_planet_dust_cylindrical.cpp	/^t_planet_growth, dfloor, dffloor, Omega0, user_dt, A_gap,$/;"	m	namespace:__anon99	file:
dfloor	pgen/disk_planet_dust_spherical.cpp	/^t_planet_growth, dfloor, dffloor, Omega0, user_dt, A_gap,$/;"	m	namespace:__anon113	file:
dfloor	pgen/disk_streaming_cylindrical.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, amp;$/;"	m	namespace:__anon54	file:
dfloor	pgen/disk_streaming_spherical.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, amp;$/;"	m	namespace:__anon75	file:
dfloor	pgen/dust_diffusion.cpp	/^Real gm0, r0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, iso_cs2_r0;$/;"	m	namespace:__anon117	file:
dfloor	pgen/inject_pebble_3D.cpp	/^Real dfloor, pfloor, float_min;$/;"	m	namespace:__anon62	file:
dfloor	pgen/strat.cpp	/^Real dfloor, pfloor;$/;"	m	namespace:__anon127	file:
dflx_	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> dflx_;$/;"	m	class:DustFluids
dflx_	hydro/hydro.hpp	/^  AthenaArray<Real> dflx_;$/;"	m	class:Hydro
dflx_	scalars/scalars.hpp	/^  AthenaArray<Real> dflx_;$/;"	m	class:PassiveScalars
dfsrc	dustfluids/dustfluids.hpp	/^  DustFluidsSourceTerms         dfsrc;   \/\/ Object used in calculating the source terms of dust$/;"	m	class:DustFluids
dh2fd1	coordinates/coordinates.hpp	/^  AthenaArray<Real> h2f, dh2fd1, h31f, h32f, dh31fd1, dh32fd2;$/;"	m	class:Coordinates
dh2vd1	coordinates/coordinates.hpp	/^  AthenaArray<Real> h2v, dh2vd1, h31v, h32v, dh31vd1, dh32vd2;$/;"	m	class:Coordinates
dh31fd1	coordinates/coordinates.hpp	/^  AthenaArray<Real> h2f, dh2fd1, h31f, h32f, dh31fd1, dh32fd2;$/;"	m	class:Coordinates
dh31vd1	coordinates/coordinates.hpp	/^  AthenaArray<Real> h2v, dh2vd1, h31v, h32v, dh31vd1, dh32vd2;$/;"	m	class:Coordinates
dh32fd2	coordinates/coordinates.hpp	/^  AthenaArray<Real> h2f, dh2fd1, h31f, h32f, dh31fd1, dh32fd2;$/;"	m	class:Coordinates
dh32vd2	coordinates/coordinates.hpp	/^  AthenaArray<Real> h2v, dh2vd1, h31v, h32v, dh31vd1, dh32vd2;$/;"	m	class:Coordinates
diff_cc_flux	dustfluids/dustfluids_diffusion_cc/cell_center_diffusions.hpp	/^  AthenaArray<Real> diff_cc_flux[3];     \/\/ face-averaged flux vector$/;"	m	class:DustFluidsCellCenterDiffusion
diff_mom_cc	dustfluids/dustfluids_diffusion_cc/cell_center_diffusions.hpp	/^  AthenaArray<Real> diff_mom_cc;$/;"	m	class:DustFluidsCellCenterDiffusion
diff_tot_	dustfluids/dustfluids_diffusion/dustfluids_diffusion.hpp	/^  AthenaArray<Real> diff_tot_;$/;"	m	class:DustFluidsDiffusion
diffccbvar	dustfluids/dustfluids_diffusion_cc/cell_center_diffusions.cpp	/^  diffccbvar(pmb, &diff_mom_cc, &coarse_diff_mom_cc_, diff_cc_flux,$/;"	f
diffccbvar	dustfluids/dustfluids_diffusion_cc/cell_center_diffusions.hpp	/^  DustDiffusionBoundaryVariable diffccbvar;$/;"	m	class:DustFluidsCellCenterDiffusion
diffusion_flx	scalars/scalars.hpp	/^  AthenaArray<Real> diffusion_flx[3];$/;"	m	class:PassiveScalars
dim	fft/athena_fft.hpp	/^  int dim;$/;"	m	struct:AthenaFFTPlan
dim_	fft/athena_fft.hpp	/^  const int dim_;$/;"	m	class:FFTBlock::FFTDriver
dim_	fft/athena_fft.hpp	/^  int dim_;$/;"	m	class:AthenaFFTIndex
dim_	fft/athena_fft.hpp	/^  int dim_;$/;"	m	class:FFTBlock::AthenaFFTDirection
dir	fft/athena_fft.hpp	/^  int dir;$/;"	m	struct:AthenaFFTPlan
disp	fft/athena_fft.hpp	/^  int Nx[3], nx[3], disp[3];$/;"	m	class:FFTBlock::AthenaFFTDirection
div_vel_	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> div_vel_; \/\/ divergence of velocity$/;"	m	class:HydroDiffusion
dkx	fft/athena_fft.hpp	/^  Real dkx[3], dx1, dx2, dx3;$/;"	m	class:FFTBlock::AthenaFFTDirection
dl	pgen/shk_cloud.cpp	/^Real gmma1, dl, pl, ul;$/;"	m	namespace:__anon74	file:
do_sts_dustfluids	task_list/task_list.hpp	/^  bool do_sts_dustfluids;$/;"	m	class:SuperTimeStepTaskList
do_sts_field	task_list/task_list.hpp	/^  bool do_sts_field;$/;"	m	class:SuperTimeStepTaskList
do_sts_hydro	task_list/task_list.hpp	/^  bool do_sts_hydro;$/;"	m	class:SuperTimeStepTaskList
do_sts_scalar	task_list/task_list.hpp	/^  bool do_sts_scalar;$/;"	m	class:SuperTimeStepTaskList
dowrite	pgen/disk_VSI.cpp	/^int n0, nvar, dowrite, file_number, out_level;$/;"	m	namespace:__anon133	file:
drag_method	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  std::string drag_method; \/\/ Drag methods$/;"	m	class:DustGasDrag
dslope	pgen/disk.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas;$/;"	m	namespace:__anon36	file:
dslope	pgen/disk_RWI_2D.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, beta, nu_alpha,$/;"	m	namespace:__anon101	file:
dslope	pgen/disk_dust_diffusion.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, beta, nu_alpha;$/;"	m	namespace:__anon70	file:
dslope	pgen/disk_dust_drift.cpp	/^Real gm0, r0, rho_0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, user_dt, iso_cs2_r0;$/;"	m	namespace:__anon64	file:
dslope	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real x1min, x1max, damping_rate, gm0, r0, rho0, dslope, p0_over_r0, pslope, beta,$/;"	m	namespace:__anon68	file:
dslope	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real x1min, x1max, damping_rate, gm0, r0, rho0, dslope, p0_over_r0, pslope, beta,$/;"	m	namespace:__anon109	file:
dslope	pgen/disk_planet_dust_cylindrical.cpp	/^gm0, r0, rho0, dslope, p0_over_r0, pslope, beta, gMth, nu_alpha,$/;"	m	namespace:__anon99	file:
dslope	pgen/disk_planet_dust_spherical.cpp	/^gm0, r0, rho0, dslope, p0_over_r0, pslope, beta, gMth, nu_alpha,$/;"	m	namespace:__anon113	file:
dslope	pgen/disk_streaming_cylindrical.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, amp;$/;"	m	namespace:__anon54	file:
dslope	pgen/disk_streaming_spherical.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, amp;$/;"	m	namespace:__anon75	file:
dslope	pgen/dust_diffusion.cpp	/^Real gm0, r0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, iso_cs2_r0;$/;"	m	namespace:__anon117	file:
dt	mesh/mesh.cpp	/^    dt_hyperbolic(dt), dt_parabolic(dt), dt_user(dt),$/;"	v
dt	mesh/mesh.hpp	/^  Real start_time, time, tlim, dt, dt_hyperbolic, dt_parabolic, dt_user, cfl_number;$/;"	m	class:Mesh
dt	outputs/outputs.hpp	/^  Real next_time, dt;$/;"	m	struct:OutputParameters
dt1_	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> dt1_, dt2_, dt3_;                     \/\/ scratch arrays used in NewAdvectionDt$/;"	m	class:DustFluids
dt1_	hydro/hydro.hpp	/^  AthenaArray<Real> dt1_, dt2_, dt3_;  \/\/ scratch arrays used in NewTimeStep$/;"	m	class:Hydro
dt2_	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> dt1_, dt2_, dt3_;                     \/\/ scratch arrays used in NewAdvectionDt$/;"	m	class:DustFluids
dt2_	hydro/hydro.hpp	/^  AthenaArray<Real> dt1_, dt2_, dt3_;  \/\/ scratch arrays used in NewTimeStep$/;"	m	class:Hydro
dt3_	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> dt1_, dt2_, dt3_;                     \/\/ scratch arrays used in NewAdvectionDt$/;"	m	class:DustFluids
dt3_	hydro/hydro.hpp	/^  AthenaArray<Real> dt1_, dt2_, dt3_;  \/\/ scratch arrays used in NewTimeStep$/;"	m	class:Hydro
dt_diagnostics	mesh/mesh.hpp	/^  int nlim, ncycle, ncycle_out, dt_diagnostics;$/;"	m	class:Mesh
dt_hyperbolic	mesh/mesh.hpp	/^  Real start_time, time, tlim, dt, dt_hyperbolic, dt_parabolic, dt_user, cfl_number;$/;"	m	class:Mesh
dt_parabolic	mesh/mesh.hpp	/^  Real start_time, time, tlim, dt, dt_hyperbolic, dt_parabolic, dt_user, cfl_number;$/;"	m	class:Mesh
dt_user	mesh/mesh.hpp	/^  Real start_time, time, tlim, dt, dt_hyperbolic, dt_parabolic, dt_user, cfl_number;$/;"	m	class:Mesh
dtdrive	fft/turbulence.hpp	/^  Real tdrive, dtdrive, tcorr, f_shear;$/;"	m	class:TurbulenceDriver
dust_avg_	dustfluids/srcterms/dustfluids_srcterms.hpp	/^  AthenaArray<Real> dust_avg_;      \/\/ storage for polar averaging$/;"	m	class:DustFluidsSourceTerms
dust_dens_slope	pgen/disk_dust_drift.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon64	file:
dust_dens_slope	pgen/disk_streaming_cylindrical.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon54	file:
dust_dens_slope	pgen/disk_streaming_spherical.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon75	file:
dust_dens_slope	pgen/dust_diffusion.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon117	file:
dust_start_injection	pgen/inject_pebble_3D.cpp	/^Real min_tol, max_dfvdt, dust_start_injection, injection_Tsoft;$/;"	m	namespace:__anon62	file:
dust_xorder	dustfluids/dustfluids.hpp	/^  int dust_xorder;      \/\/ The reconstruction order of dust fluids$/;"	m	class:DustFluids
dust_xorder	orbital_advection/orbital_advection.hpp	/^  int xorder, xgh, dust_xorder;$/;"	m	class:OrbitalTransform::OrbitalAdvection
dust_xorder_	bvals/bvals.hpp	/^  int xorder_, xgh_, dust_xorder_;$/;"	m	class:BoundaryValues
dustdiffusion_type_	bvals/cc/dustdiffusion/bvals_dustdiffusion.hpp	/^  DustDiffusionBoundaryQuantity dustdiffusion_type_;$/;"	m	class:DustDiffusionBoundaryVariable
dustfluids_diffusion_defined	dustfluids/dustfluids_diffusion/dustfluids_diffusion.hpp	/^  bool dustfluids_diffusion_defined; \/\/ true or false$/;"	m	class:DustFluidsDiffusion
dustfluids_diffusion_flux	dustfluids/dustfluids_diffusion/dustfluids_diffusion.hpp	/^  AthenaArray<Real> dustfluids_diffusion_flux[3];$/;"	m	class:DustFluidsDiffusion
dustfluids_floor_	eos/eos.hpp	/^  Real dustfluids_floor_[NSPECIES];      \/\/ dust fluids density floor, I set dustfluids_floor_ as NSPECIES, so that it still can be initilized when NDUSTFLUIDS == 0.$/;"	m	class:EquationOfState
dustfluids_sourceterms_defined	dustfluids/srcterms/dustfluids_srcterms.hpp	/^  bool dustfluids_sourceterms_defined;$/;"	m	class:DustFluidsSourceTerms
dustfluids_type_	bvals/cc/dustfluids/bvals_dustfluids.hpp	/^  DustFluidsBoundaryQuantity dustfluids_type_;$/;"	m	class:DustFluidsBoundaryVariable
dvKc1	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> dvKc1, dvKc2;  \/\/ Derivatives of vKc$/;"	m	class:OrbitalTransform::OrbitalAdvection
dvKc2	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> dvKc1, dvKc2;  \/\/ Derivatives of vKc$/;"	m	class:OrbitalTransform::OrbitalAdvection
dvn	hydro/hydro.hpp	/^  AthenaArray<Real> dvn, dvt;$/;"	m	class:Hydro
dvol	fft/turbulence.hpp	/^  Real expo, dedt, dvol;$/;"	m	class:TurbulenceDriver
dvt	hydro/hydro.hpp	/^  AthenaArray<Real> dvn, dvt;$/;"	m	class:Hydro
dwidth	pgen/disk_dust_drift.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon64	file:
dwidth	pgen/disk_streaming_cylindrical.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon54	file:
dwidth	pgen/disk_streaming_spherical.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon75	file:
dwidth	pgen/dust_diffusion.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon117	file:
dx	orbital_advection/orbital_advection.hpp	/^  Real dx;$/;"	m	class:OrbitalTransform::OrbitalAdvection
dx1	fft/athena_fft.hpp	/^  Real dkx[3], dx1, dx2, dx3;$/;"	m	class:FFTBlock::AthenaFFTDirection
dx1_	dustfluids/dustfluids_diffusion/dustfluids_diffusion.hpp	/^  AthenaArray<Real> dx1_, dx2_, dx3_; \/\/ scratch arrays used in NewTimeStep$/;"	m	class:DustFluidsDiffusion
dx1_	field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> dx1_, dx2_, dx3_, len_;$/;"	m	class:FieldDiffusion
dx1_	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> dx1_, dx2_, dx3_;$/;"	m	class:HydroDiffusion
dx1_	scalars/scalars.hpp	/^  AthenaArray<Real> dx1_, dx2_, dx3_;$/;"	m	class:PassiveScalars
dx1f	coordinates/coordinates.hpp	/^  AthenaArray<Real> dx1f, dx2f, dx3f, x1f, x2f, x3f;    \/\/ face   spacing and positions$/;"	m	class:Coordinates
dx1v	coordinates/coordinates.hpp	/^  AthenaArray<Real> dx1v, dx2v, dx3v, x1v, x2v, x3v;    \/\/ volume spacing and positions$/;"	m	class:Coordinates
dx2	fft/athena_fft.hpp	/^  Real dkx[3], dx1, dx2, dx3;$/;"	m	class:FFTBlock::AthenaFFTDirection
dx2_	dustfluids/dustfluids_diffusion/dustfluids_diffusion.hpp	/^  AthenaArray<Real> dx1_, dx2_, dx3_; \/\/ scratch arrays used in NewTimeStep$/;"	m	class:DustFluidsDiffusion
dx2_	field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> dx1_, dx2_, dx3_, len_;$/;"	m	class:FieldDiffusion
dx2_	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> dx1_, dx2_, dx3_;$/;"	m	class:HydroDiffusion
dx2_	scalars/scalars.hpp	/^  AthenaArray<Real> dx1_, dx2_, dx3_;$/;"	m	class:PassiveScalars
dx2f	coordinates/coordinates.hpp	/^  AthenaArray<Real> dx1f, dx2f, dx3f, x1f, x2f, x3f;    \/\/ face   spacing and positions$/;"	m	class:Coordinates
dx2v	coordinates/coordinates.hpp	/^  AthenaArray<Real> dx1v, dx2v, dx3v, x1v, x2v, x3v;    \/\/ volume spacing and positions$/;"	m	class:Coordinates
dx3	fft/athena_fft.hpp	/^  Real dkx[3], dx1, dx2, dx3;$/;"	m	class:FFTBlock::AthenaFFTDirection
dx3_	dustfluids/dustfluids_diffusion/dustfluids_diffusion.hpp	/^  AthenaArray<Real> dx1_, dx2_, dx3_; \/\/ scratch arrays used in NewTimeStep$/;"	m	class:DustFluidsDiffusion
dx3_	field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> dx1_, dx2_, dx3_, len_;$/;"	m	class:FieldDiffusion
dx3_	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> dx1_, dx2_, dx3_;$/;"	m	class:HydroDiffusion
dx3_	scalars/scalars.hpp	/^  AthenaArray<Real> dx1_, dx2_, dx3_;$/;"	m	class:PassiveScalars
dx3f	coordinates/coordinates.hpp	/^  AthenaArray<Real> dx1f, dx2f, dx3f, x1f, x2f, x3f;    \/\/ face   spacing and positions$/;"	m	class:Coordinates
dx3v	coordinates/coordinates.hpp	/^  AthenaArray<Real> dx1v, dx2v, dx3v, x1v, x2v, x3v;    \/\/ volume spacing and positions$/;"	m	class:Coordinates
dxw_	hydro/hydro.hpp	/^  AthenaArray<Real> dxw_;$/;"	m	class:Hydro
e	field/field.hpp	/^  EdgeField e;    \/\/!> edge-centered electric fields used in CT$/;"	m	class:Field
e	hydro/rsolvers/mhd/hlld.cpp	/^  Real d, mx, my, mz, e, by, bz;$/;"	m	struct:Cons1D	file:
e	hydro/rsolvers/mhd/hlld_backup.cpp	/^  Real d, mx, my, mz, e, by, bz;$/;"	m	struct:Cons1D	file:
e	hydro/rsolvers/mhd/lhlld.cpp	/^  Real d, mx, my, mz, e, by, bz;$/;"	m	struct:Cons1D	file:
e1	bvals/fc/bvals_fc.hpp	/^  AthenaArray<Real> &e1, &e2, &e3;  \/\/ same for EdgeField$/;"	m	class:FaceCenteredBoundaryVariable
e1_x2f	field/field.hpp	/^  AthenaArray<Real> e1_x2f, e3_x2f; \/\/ electric fields at x2-face from Riemann solver$/;"	m	class:Field
e1_x3f	field/field.hpp	/^  AthenaArray<Real> e1_x3f, e2_x3f; \/\/ electric fields at x3-face from Riemann solver$/;"	m	class:Field
e2	bvals/fc/bvals_fc.hpp	/^  AthenaArray<Real> &e1, &e2, &e3;  \/\/ same for EdgeField$/;"	m	class:FaceCenteredBoundaryVariable
e2_x1f	field/field.hpp	/^  AthenaArray<Real> e2_x1f, e3_x1f; \/\/ electric fields at x1-face from Riemann solver$/;"	m	class:Field
e2_x3f	field/field.hpp	/^  AthenaArray<Real> e1_x3f, e2_x3f; \/\/ electric fields at x3-face from Riemann solver$/;"	m	class:Field
e3	bvals/fc/bvals_fc.hpp	/^  AthenaArray<Real> &e1, &e2, &e3;  \/\/ same for EdgeField$/;"	m	class:FaceCenteredBoundaryVariable
e3_x1f	field/field.hpp	/^  AthenaArray<Real> e2_x1f, e3_x1f; \/\/ electric fields at x1-face from Riemann solver$/;"	m	class:Field
e3_x2f	field/field.hpp	/^  AthenaArray<Real> e1_x2f, e3_x2f; \/\/ electric fields at x2-face from Riemann solver$/;"	m	class:Field
eUnit	utils/interp_table.hpp	/^  Real rhoUnit, eUnit, hUnit;$/;"	m	class:EosTable
e_avg_	field/field.hpp	/^  AthenaArray<Real> e_avg_;   \/\/ for polar averaging$/;"	m	class:Field
e_h	field/field_diffusion/field_diffusion.hpp	/^  EdgeField e_oa, e_h;     \/\/ edge-centered electric field from non-ideal MHD$/;"	m	class:FieldDiffusion
e_oa	field/field_diffusion/field_diffusion.hpp	/^  EdgeField e_oa, e_h;     \/\/ edge-centered electric field from non-ideal MHD$/;"	m	class:FieldDiffusion
e_of_rho_T	eos/general/hydrogen.cpp	/^Real e_of_rho_T(Real rho, Real T) {$/;"	f	namespace:__anon11
e_orbit	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^omega_planet[10], inv_omega_planet[10], cs_planet[10], a_orbit[10], e_orbit[10],$/;"	m	namespace:__anon68	file:
ebeta	task_list/task_list.hpp	/^    Real sbeta, ebeta; \/\/ time coeff describing start\/end time of each stage$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
eddy_time_	dustfluids/dustfluids_diffusion/dustfluids_diffusion.hpp	/^  Real              eddy_time_;       \/\/ The eddy timescale (turn over time of eddy) at r0$/;"	m	class:DustFluidsDiffusion
edge	bvals/bvals_interfaces.hpp	/^enum class NeighborConnect {none, face, edge, corner}; \/\/ degenerate\/shared part of block$/;"	m	class:NeighborConnect
edge_flag_	bvals/fc/bvals_fc.hpp	/^  bool edge_flag_[12];$/;"	m	class:FaceCenteredBoundaryVariable
edge_length_	field/field.hpp	/^  AthenaArray<Real> face_area_, edge_length_, edge_length_p1_;$/;"	m	class:Field
edge_length_	field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> face_area_, face_area_p1_, edge_length_, edge_length_m1_;$/;"	m	class:FieldDiffusion
edge_length_m1_	field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> face_area_, face_area_p1_, edge_length_, edge_length_m1_;$/;"	m	class:FieldDiffusion
edge_length_p1_	field/field.hpp	/^  AthenaArray<Real> face_area_, edge_length_, edge_length_p1_;$/;"	m	class:Field
edt	pgen/disk_VSI.cpp	/^prev_time, curr_time, next_time, edt;$/;"	m	namespace:__anon133	file:
egas_unit_	eos/eos.hpp	/^  Real egas_unit_, inv_egas_unit_;       \/\/ physical unit\/sim unit for energy density$/;"	m	class:EquationOfState
eid	bvals/bvals_interfaces.hpp	/^  int bufid, eid, targetid;$/;"	m	struct:NeighborBlock
empty	athena_arrays.hpp	/^  enum class DataStatus {empty, shallow_slice, allocated};  \/\/ formerly, "bool scopy_"$/;"	m	class:AthenaArray::DataStatus
empty_flux	gravity/gravity.hpp	/^  AthenaArray<Real> empty_flux[3];$/;"	m	class:Gravity
energy_floor_	eos/eos.hpp	/^  Real energy_floor_;                    \/\/ energy floor$/;"	m	class:EquationOfState
eps_	bvals/bvals.hpp	/^  Real eps_, eps_flux_;          \/\/ fraction part of the shear$/;"	m	class:BoundaryValues
eps_	multigrid/multigrid.hpp	/^  Real eps_;$/;"	m	class:MultigridDriver
eps_flux_	bvals/bvals.hpp	/^  Real eps_, eps_flux_;          \/\/ fraction part of the shear$/;"	m	class:BoundaryValues
epsilon	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> epsilon, epsilon_n;$/;"	m	class:DustGasDrag
epsilon_n	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> epsilon, epsilon_n;$/;"	m	class:DustGasDrag
error_output	pgen/jgg.cpp	/^bool error_output;$/;"	m	namespace:__anon123	file:
error_output	pgen/ssheet.cpp	/^bool error_output;$/;"	m	namespace:__anon95	file:
etaB	field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> etaB; \/\/ 4-dim array, covering O\/H\/A altogether$/;"	m	class:FieldDiffusion
etaVk	pgen/dust_NSH.cpp	/^Real etaVk; \/\/ The amplitude of pressure gradient force$/;"	m	namespace:__anon103	file:
etaVk	pgen/ssheet_RWI_dust.cpp	/^kappap, kappap2, Kai0, etaVk, AN(0.0), BN(0.0), Psi(0.0), user_dt, time_drag, beta,$/;"	m	namespace:__anon90	file:
etaVk	pgen/ssheet_planet_dust.cpp	/^kappap, kappap2, Kai0, etaVk, AN, BN, Psi, time_drag, user_dt, rs, gmp, gMth, t_planet_growth,$/;"	m	namespace:__anon111	file:
etaVk	pgen/streaming_eigen.cpp	/^Real etaVk; \/\/ The amplitude of pressure gradient force$/;"	m	namespace:__anon66	file:
etaVk	pgen/streaming_eigen_2dust.cpp	/^Real etaVk; \/\/ The amplitude of pressure gradient force$/;"	m	namespace:__anon145	file:
etaVk	pgen/streaming_nonlinear.cpp	/^Real etaVk; \/\/ The amplitude of pressure gradient force$/;"	m	namespace:__anon135	file:
etaVk	pgen/streaming_stratified.cpp	/^Real etaVk; \/\/ The amplitude of pressure gradient force$/;"	m	namespace:__anon154	file:
eta_ad	field/field_diffusion/field_diffusion.hpp	/^  Real eta_ohm, eta_hall, eta_ad;$/;"	m	class:FieldDiffusion
eta_gas	pgen/disk_RWI_2D.cpp	/^A_bump, sigma_bump, r0_bump, width_vortex, eta_gas, beta_gas, ks_gas,$/;"	m	namespace:__anon101	file:
eta_gas	pgen/disk_dust_diffusion.cpp	/^Real eta_gas, beta_gas, ks_gas;$/;"	m	namespace:__anon70	file:
eta_gas	pgen/disk_dust_drift.cpp	/^Real eta_gas, beta_gas, ks_gas;$/;"	m	namespace:__anon64	file:
eta_gas	pgen/disk_streaming_cylindrical.cpp	/^Real eta_gas, beta_gas, ks_gas;$/;"	m	namespace:__anon54	file:
eta_gas	pgen/disk_streaming_spherical.cpp	/^Real eta_gas, beta_gas, ks_gas;$/;"	m	namespace:__anon75	file:
eta_hall	field/field_diffusion/field_diffusion.hpp	/^  Real eta_ohm, eta_hall, eta_ad;$/;"	m	class:FieldDiffusion
eta_ofac_in	pgen/disk_3d_mhd_dust.cpp	/^Real eta_ofac_in, eta_ofac_mid, theta_Rin, theta_Rout, fcool;$/;"	m	namespace:__anon60	file:
eta_ofac_mid	pgen/disk_3d_mhd_dust.cpp	/^Real eta_ofac_in, eta_ofac_mid, theta_Rin, theta_Rout, fcool;$/;"	m	namespace:__anon60	file:
eta_ohm	field/field_diffusion/field_diffusion.hpp	/^  Real eta_ohm, eta_hall, eta_ad;$/;"	m	class:FieldDiffusion
eta_tot_	field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> eta_tot_;$/;"	m	class:FieldDiffusion
ev	pgen/dusty_wave.cpp	/^Real ev[NWAVE], rem[NWAVE][NWAVE], lem[NWAVE][NWAVE];$/;"	m	namespace:__anon86	file:
ev	pgen/linear_wave.cpp	/^Real ev[NWAVE], rem[NWAVE][NWAVE], lem[NWAVE][NWAVE];$/;"	m	namespace:__anon125	file:
evolve	athena.hpp	/^enum class FluidFormulation {evolve, background, disabled}; \/\/ rename background -> fixed?$/;"	m	class:FluidFormulation
expo	fft/turbulence.hpp	/^  Real expo, dedt, dvol;$/;"	m	class:TurbulenceDriver
extent_2d	fft/plimpton/remap_2d.h	/^struct extent_2d {$/;"	s
extent_3d	fft/plimpton/remap_3d.h	/^struct extent_3d {$/;"	s
f2	mesh/mesh.hpp	/^  const bool f2, f3; \/\/ flags indicating (at least) 2D or 3D Mesh$/;"	m	class:Mesh
f3	mesh/mesh.hpp	/^  const bool f2, f3; \/\/ flags indicating (at least) 2D or 3D Mesh$/;"	m	class:Mesh
f_ICE_inter0	pgen/inject_pebble_3D.cpp	/^Real f_ICE_inter0, m_p0, rho_sil_inter, rho_ice_inter;$/;"	m	namespace:__anon62	file:
f_in_	fft/athena_fft.hpp	/^  AthenaFFTIndex *f_in_, *f_out_, *b_in_, *b_out_;$/;"	m	class:FFTBlock::AthenaFFTDirection
f_out_	fft/athena_fft.hpp	/^  AthenaFFTIndex *f_in_, *f_out_, *b_in_, *b_out_;$/;"	m	class:FFTBlock::AthenaFFTDirection
f_shear	fft/turbulence.hpp	/^  Real tdrive, dtdrive, tcorr, f_shear;$/;"	m	class:TurbulenceDriver
fac	pgen/cpaw.cpp	/^Real fac, sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon88	file:
face	bvals/bvals_interfaces.hpp	/^enum class NeighborConnect {none, face, edge, corner}; \/\/ degenerate\/shared part of block$/;"	m	class:NeighborConnect
face_area_	field/field.hpp	/^  AthenaArray<Real> face_area_, edge_length_, edge_length_p1_;$/;"	m	class:Field
face_area_	field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> face_area_, face_area_p1_, edge_length_, edge_length_m1_;$/;"	m	class:FieldDiffusion
face_area_p1_	field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> face_area_, face_area_p1_, edge_length_, edge_length_m1_;$/;"	m	class:FieldDiffusion
factor	fft/plimpton/factor.cpp	/^void factor(int n, int *num, int *list)$/;"	f
fail	task_list/task_list.hpp	/^enum class TaskStatus {fail, success, next};$/;"	m	class:TaskStatus
false	mesh/mesh.cpp	/^                   == BoundaryFlag::shear_periodic ? true : false),$/;"	v
false	scalars/scalars.cpp	/^    scalar_diffusion_defined(false),$/;"	v
fbvar	field/field.hpp	/^  FaceCenteredBoundaryVariable fbvar;$/;"	m	class:Field
fc	athena.hpp	/^enum class BoundaryQuantity {cc, fc, cc_flcor, fc_flcor, mggrav,$/;"	m	class:BoundaryQuantity
fc_flcor	athena.hpp	/^enum class BoundaryQuantity {cc, fc, cc_flcor, fc_flcor, mggrav,$/;"	m	class:BoundaryQuantity
fc_flx_phys_id_	bvals/fc/bvals_fc.hpp	/^  int fc_phys_id_, fc_flx_phys_id_, fc_flx_pole_phys_id_;$/;"	m	class:FaceCenteredBoundaryVariable
fc_flx_pole_phys_id_	bvals/fc/bvals_fc.hpp	/^  int fc_phys_id_, fc_flx_phys_id_, fc_flx_pole_phys_id_;$/;"	m	class:FaceCenteredBoundaryVariable
fc_phys_id_	bvals/fc/bvals_fc.hpp	/^  int fc_phys_id_, fc_flx_phys_id_, fc_flx_pole_phys_id_;$/;"	m	class:FaceCenteredBoundaryVariable
fcool	pgen/disk_3d_mhd_dust.cpp	/^Real eta_ofac_in, eta_ofac_mid, theta_Rin, theta_Rout, fcool;$/;"	m	namespace:__anon60	file:
fdif	field/field.hpp	/^  FieldDiffusion fdif;$/;"	m	class:Field
ffas_	multigrid/multigrid.hpp	/^  bool fsubtract_average_, ffas_;$/;"	m	class:MultigridDriver
fft_2d	fft/plimpton/fft_2d.cpp	/^void fft_2d(FFT_DATA *in, FFT_DATA *out, int flag, struct fft_plan_2d *plan)$/;"	f
fft_2d_create_plan	fft/plimpton/fft_2d.cpp	/^struct fft_plan_2d *fft_2d_create_plan($/;"	f
fft_2d_destroy_plan	fft/plimpton/fft_2d.cpp	/^void fft_2d_destroy_plan(struct fft_plan_2d *plan)$/;"	f
fft_3d	fft/plimpton/fft_3d.cpp	/^void fft_3d(FFT_DATA *in, FFT_DATA *out, int flag, struct fft_plan_3d *plan)$/;"	f
fft_3d_create_plan	fft/plimpton/fft_3d.cpp	/^struct fft_plan_3d *fft_3d_create_plan($/;"	f
fft_3d_destroy_plan	fft/plimpton/fft_3d.cpp	/^void fft_3d_destroy_plan(struct fft_plan_3d *plan)$/;"	f
fft_block_size_	fft/athena_fft.hpp	/^  RegionSize fft_mesh_size_, fft_block_size_;$/;"	m	class:FFTBlock::FFTDriver
fft_data	pgen/jgg.cpp	/^  fftw_complex *fft_data;$/;"	m	namespace:__anon123	file:
fft_loclist_	fft/athena_fft.hpp	/^  LogicalLocation *fft_loclist_;$/;"	m	class:FFTBlock::FFTDriver
fft_mesh_size_	fft/athena_fft.hpp	/^  RegionSize fft_mesh_size_, fft_block_size_;$/;"	m	class:FFTBlock::FFTDriver
fft_plan_2d	fft/plimpton/fft_2d.h	/^struct fft_plan_2d {$/;"	s
fft_plan_3d	fft/plimpton/fft_3d.h	/^struct fft_plan_3d {$/;"	s
fh_	outputs/io_wrapper.hpp	/^  IOWrapperFile fh_;$/;"	m	class:IOWrapper
fi1	bvals/bvals_interfaces.hpp	/^  int fi1, fi2;      \/\/ 2-vec for identifying refined neighbors (up to 4x face neighbors$/;"	m	struct:NeighborIndexes
fi2	bvals/bvals_interfaces.hpp	/^  int fi1, fi2;      \/\/ 2-vec for identifying refined neighbors (up to 4x face neighbors$/;"	m	struct:NeighborIndexes
fid	bvals/bvals_interfaces.hpp	/^  BoundaryFace fid;$/;"	m	struct:NeighborBlock
field_config	pgen/gr_torus.cpp	/^MagneticFieldConfigs field_config;            \/\/ type of magnetic field$/;"	m	namespace:__anon39	file:
field_diffusion_defined	field/field_diffusion/field_diffusion.hpp	/^  bool field_diffusion_defined;$/;"	m	class:FieldDiffusion
file_basename	outputs/outputs.hpp	/^  std::string file_basename;$/;"	m	struct:OutputParameters
file_id	outputs/outputs.hpp	/^  std::string file_id;$/;"	m	struct:OutputParameters
file_number	outputs/outputs.hpp	/^  int file_number;$/;"	m	struct:OutputParameters
file_number	pgen/disk_VSI.cpp	/^int n0, nvar, dowrite, file_number, out_level;$/;"	m	namespace:__anon133	file:
file_type	outputs/outputs.hpp	/^  std::string file_type;$/;"	m	struct:OutputParameters
filename	outputs/outputs.hpp	/^  std::string filename;                       \/\/ name of athdf file$/;"	m	class:ATHDF5Output
final	bvals/bvals.hpp	/^  void SetupPersistentMPI() final; \/\/ setup MPI requests$/;"	m	class:BoundaryValues
final	bvals/bvals.hpp	/^  void StartReceivingShear(BoundaryCommSubset phase) final;$/;"	m	class:BoundaryValues
final	bvals/cc/dustdiffusion/bvals_dustdiffusion.hpp	/^  int LoadFluxBoundaryBufferSameLevel(Real *buf, const NeighborBlock& nb) final;$/;"	m	class:DustDiffusionBoundaryVariable
final	bvals/cc/dustdiffusion/bvals_dustdiffusion.hpp	/^  void PolarWedgeInnerX2( Real time, Real dt, int il, int iu, int jl, int kl, int ku, int ngh) final;$/;"	m	class:DustDiffusionBoundaryVariable
final	bvals/cc/dustdiffusion/bvals_dustdiffusion.hpp	/^  void PolarWedgeOuterX2( Real time, Real dt, int il, int iu, int jl, int kl, int ku, int ngh) final;$/;"	m	class:DustDiffusionBoundaryVariable
final	bvals/cc/dustdiffusion/bvals_dustdiffusion.hpp	/^  void SetBoundaryFromCoarser(Real *buf, const NeighborBlock& nb) final;$/;"	m	class:DustDiffusionBoundaryVariable
final	bvals/cc/dustdiffusion/bvals_dustdiffusion.hpp	/^  void SetBoundaryFromFiner(Real *buf, const NeighborBlock& nb) final;$/;"	m	class:DustDiffusionBoundaryVariable
final	bvals/cc/dustfluids/bvals_dustfluids.hpp	/^  int LoadFluxBoundaryBufferSameLevel(Real *buf, const NeighborBlock& nb) final;$/;"	m	class:DustFluidsBoundaryVariable
final	bvals/cc/dustfluids/bvals_dustfluids.hpp	/^  void PolarWedgeInnerX2( Real time, Real dt, int il, int iu, int jl, int kl, int ku, int ngh) final;$/;"	m	class:DustFluidsBoundaryVariable
final	bvals/cc/dustfluids/bvals_dustfluids.hpp	/^  void PolarWedgeOuterX2( Real time, Real dt, int il, int iu, int jl, int kl, int ku, int ngh) final;$/;"	m	class:DustFluidsBoundaryVariable
final	bvals/cc/dustfluids/bvals_dustfluids.hpp	/^  void SetBoundaryFromCoarser(Real *buf, const NeighborBlock& nb) final;$/;"	m	class:DustFluidsBoundaryVariable
final	bvals/cc/dustfluids/bvals_dustfluids.hpp	/^  void SetBoundaryFromFiner(Real *buf, const NeighborBlock& nb) final;$/;"	m	class:DustFluidsBoundaryVariable
final	bvals/cc/hydro/bvals_hydro.hpp	/^  int LoadFluxBoundaryBufferSameLevel(Real *buf, const NeighborBlock& nb) final;$/;"	m	class:HydroBoundaryVariable
final	bvals/cc/mg/bvals_mg.hpp	/^                                                   const NeighborBlock& nb) final;$/;"	m	class:MGGravityBoundaryValues
final	bvals/cc/mg/bvals_mg.hpp	/^                                                 const NeighborBlock& nb) final;$/;"	m	class:MGGravityBoundaryValues
final	bvals/cc/mg/bvals_mg.hpp	/^                                               const NeighborBlock& nb) final;$/;"	m	class:MGGravityBoundaryValues
final	bvals/cc/mg/bvals_mg.hpp	/^                                             const NeighborBlock& nb) final;$/;"	m	class:MGGravityBoundaryValues
final	coordinates/coordinates.hpp	/^                          AthenaArray<Real> &area) final;$/;"	m	class:Cylindrical
final	coordinates/coordinates.hpp	/^                          AthenaArray<Real> &area) final;$/;"	m	class:SphericalPolar
final	coordinates/coordinates.hpp	/^                        AthenaArray<Real> &len) final;$/;"	m	class:Cylindrical
final	coordinates/coordinates.hpp	/^                        AthenaArray<Real> &len) final;$/;"	m	class:SphericalPolar
final	coordinates/coordinates.hpp	/^                       Real *pa0, Real *pa1, Real *pa2, Real *pa3) final;$/;"	m	class:GRUser
final	coordinates/coordinates.hpp	/^                       Real *pa0, Real *pa1, Real *pa2, Real *pa3) final;$/;"	m	class:KerrSchild
final	coordinates/coordinates.hpp	/^                       Real *pa0, Real *pa1, Real *pa2, Real *pa3) final;$/;"	m	class:Minkowski
final	coordinates/coordinates.hpp	/^                       Real *pa0, Real *pa1, Real *pa2, Real *pa3) final;$/;"	m	class:Schwarzschild
final	coordinates/coordinates.hpp	/^                       Real *pa_0, Real *pa_1, Real *pa_2, Real *pa_3) final;$/;"	m	class:GRUser
final	coordinates/coordinates.hpp	/^                       Real *pa_0, Real *pa_1, Real *pa_2, Real *pa_3) final;$/;"	m	class:KerrSchild
final	coordinates/coordinates.hpp	/^                       Real *pa_0, Real *pa_1, Real *pa_2, Real *pa_3) final;$/;"	m	class:Minkowski
final	coordinates/coordinates.hpp	/^                       Real *pa_0, Real *pa_1, Real *pa_2, Real *pa_3) final;$/;"	m	class:Schwarzschild
final	coordinates/coordinates.hpp	/^                     AthenaArray<Real> &u) final;$/;"	m	class:Cylindrical
final	coordinates/coordinates.hpp	/^                     AthenaArray<Real> &u) final;$/;"	m	class:GRUser
final	coordinates/coordinates.hpp	/^                     AthenaArray<Real> &u) final;$/;"	m	class:KerrSchild
final	coordinates/coordinates.hpp	/^                     AthenaArray<Real> &u) final;$/;"	m	class:Schwarzschild
final	coordinates/coordinates.hpp	/^                     AthenaArray<Real> &u) final;$/;"	m	class:SphericalPolar
final	coordinates/coordinates.hpp	/^                     AthenaArray<Real> &u, AthenaArray<Real> &flux_div) final;$/;"	m	class:Cylindrical
final	coordinates/coordinates.hpp	/^                     AthenaArray<Real> &u, AthenaArray<Real> &flux_div) final;$/;"	m	class:SphericalPolar
final	coordinates/coordinates.hpp	/^                     const AthenaArray<Real> &prim_df, AthenaArray<Real> &cons_df) final;$/;"	m	class:Cylindrical
final	coordinates/coordinates.hpp	/^                     const AthenaArray<Real> &prim_df, AthenaArray<Real> &cons_df) final;$/;"	m	class:SphericalPolar
final	coordinates/coordinates.hpp	/^                    AthenaArray<Real> &dx1) final;$/;"	m	class:GRUser
final	coordinates/coordinates.hpp	/^                    AthenaArray<Real> &dx1) final;$/;"	m	class:KerrSchild
final	coordinates/coordinates.hpp	/^                    AthenaArray<Real> &dx1) final;$/;"	m	class:Schwarzschild
final	coordinates/coordinates.hpp	/^                    AthenaArray<Real> &dx2) final;$/;"	m	class:Cylindrical
final	coordinates/coordinates.hpp	/^                    AthenaArray<Real> &dx2) final;$/;"	m	class:GRUser
final	coordinates/coordinates.hpp	/^                    AthenaArray<Real> &dx2) final;$/;"	m	class:KerrSchild
final	coordinates/coordinates.hpp	/^                    AthenaArray<Real> &dx2) final;$/;"	m	class:Schwarzschild
final	coordinates/coordinates.hpp	/^                    AthenaArray<Real> &dx2) final;$/;"	m	class:SphericalPolar
final	coordinates/coordinates.hpp	/^                    AthenaArray<Real> &dx3) final;$/;"	m	class:GRUser
final	coordinates/coordinates.hpp	/^                    AthenaArray<Real> &dx3) final;$/;"	m	class:KerrSchild
final	coordinates/coordinates.hpp	/^                    AthenaArray<Real> &dx3) final;$/;"	m	class:Schwarzschild
final	coordinates/coordinates.hpp	/^                    AthenaArray<Real> &dx3) final;$/;"	m	class:SphericalPolar
final	coordinates/coordinates.hpp	/^                    AthenaArray<Real> &prim_right, AthenaArray<Real> &bx) final;$/;"	m	class:GRUser
final	coordinates/coordinates.hpp	/^                    AthenaArray<Real> &prim_right, AthenaArray<Real> &bx) final;$/;"	m	class:KerrSchild
final	coordinates/coordinates.hpp	/^                    AthenaArray<Real> &prim_right, AthenaArray<Real> &bx) final;$/;"	m	class:Minkowski
final	coordinates/coordinates.hpp	/^                    AthenaArray<Real> &prim_right, AthenaArray<Real> &bx) final;$/;"	m	class:Schwarzschild
final	coordinates/coordinates.hpp	/^                   AthenaArray<Real> &g, AthenaArray<Real> &g_inv) final;$/;"	m	class:GRUser
final	coordinates/coordinates.hpp	/^                   AthenaArray<Real> &g, AthenaArray<Real> &g_inv) final;$/;"	m	class:KerrSchild
final	coordinates/coordinates.hpp	/^                   AthenaArray<Real> &g, AthenaArray<Real> &g_inv) final;$/;"	m	class:Minkowski
final	coordinates/coordinates.hpp	/^                   AthenaArray<Real> &g, AthenaArray<Real> &g_inv) final;$/;"	m	class:Schwarzschild
final	coordinates/coordinates.hpp	/^                   AthenaArray<Real> &len) final;$/;"	m	class:Cylindrical
final	coordinates/coordinates.hpp	/^                   AthenaArray<Real> &len) final;$/;"	m	class:GRUser
final	coordinates/coordinates.hpp	/^                   AthenaArray<Real> &len) final;$/;"	m	class:KerrSchild
final	coordinates/coordinates.hpp	/^                   AthenaArray<Real> &len) final;$/;"	m	class:Schwarzschild
final	coordinates/coordinates.hpp	/^                   AthenaArray<Real> &len) final;$/;"	m	class:SphericalPolar
final	coordinates/coordinates.hpp	/^                  AthenaArray<Real> &g, AthenaArray<Real> &gi) final;$/;"	m	class:GRUser
final	coordinates/coordinates.hpp	/^                  AthenaArray<Real> &g, AthenaArray<Real> &gi) final;$/;"	m	class:KerrSchild
final	coordinates/coordinates.hpp	/^                  AthenaArray<Real> &g, AthenaArray<Real> &gi) final;$/;"	m	class:Minkowski
final	coordinates/coordinates.hpp	/^                  AthenaArray<Real> &g, AthenaArray<Real> &gi) final;$/;"	m	class:Schwarzschild
final	coordinates/coordinates.hpp	/^                  AthenaArray<Real> &vol) final;$/;"	m	class:Cylindrical
final	coordinates/coordinates.hpp	/^                  AthenaArray<Real> &vol) final;$/;"	m	class:GRUser
final	coordinates/coordinates.hpp	/^                  AthenaArray<Real> &vol) final;$/;"	m	class:KerrSchild
final	coordinates/coordinates.hpp	/^                  AthenaArray<Real> &vol) final;$/;"	m	class:Schwarzschild
final	coordinates/coordinates.hpp	/^                  AthenaArray<Real> &vol) final;$/;"	m	class:SphericalPolar
final	coordinates/coordinates.hpp	/^                 AthenaArray<Real> &area) final;$/;"	m	class:Cylindrical
final	coordinates/coordinates.hpp	/^                 AthenaArray<Real> &area) final;$/;"	m	class:GRUser
final	coordinates/coordinates.hpp	/^                 AthenaArray<Real> &area) final;$/;"	m	class:KerrSchild
final	coordinates/coordinates.hpp	/^                 AthenaArray<Real> &area) final;$/;"	m	class:Schwarzschild
final	coordinates/coordinates.hpp	/^                 AthenaArray<Real> &area) final;$/;"	m	class:SphericalPolar
final	coordinates/coordinates.hpp	/^      AthenaArray<Real> &flux, AthenaArray<Real> &ey, AthenaArray<Real> &ez) final;$/;"	m	class:GRUser
final	coordinates/coordinates.hpp	/^      AthenaArray<Real> &flux, AthenaArray<Real> &ey, AthenaArray<Real> &ez) final;$/;"	m	class:KerrSchild
final	coordinates/coordinates.hpp	/^      AthenaArray<Real> &flux, AthenaArray<Real> &ey, AthenaArray<Real> &ez) final;$/;"	m	class:Minkowski
final	coordinates/coordinates.hpp	/^      AthenaArray<Real> &flux, AthenaArray<Real> &ey, AthenaArray<Real> &ez) final;$/;"	m	class:Schwarzschild
final	coordinates/coordinates.hpp	/^  Real GetCellVolume(const int k, const int j, const int i) final;$/;"	m	class:Cylindrical
final	coordinates/coordinates.hpp	/^  Real GetCellVolume(const int k, const int j, const int i) final;$/;"	m	class:GRUser
final	coordinates/coordinates.hpp	/^  Real GetCellVolume(const int k, const int j, const int i) final;$/;"	m	class:KerrSchild
final	coordinates/coordinates.hpp	/^  Real GetCellVolume(const int k, const int j, const int i) final;$/;"	m	class:Schwarzschild
final	coordinates/coordinates.hpp	/^  Real GetCellVolume(const int k, const int j, const int i) final;$/;"	m	class:SphericalPolar
final	coordinates/coordinates.hpp	/^  Real GetEdge1Length(const int k, const int j, const int i) final;$/;"	m	class:GRUser
final	coordinates/coordinates.hpp	/^  Real GetEdge1Length(const int k, const int j, const int i) final;$/;"	m	class:KerrSchild
final	coordinates/coordinates.hpp	/^  Real GetEdge1Length(const int k, const int j, const int i) final;$/;"	m	class:Schwarzschild
final	coordinates/coordinates.hpp	/^  Real GetEdge2Length(const int k, const int j, const int i) final;$/;"	m	class:Cylindrical
final	coordinates/coordinates.hpp	/^  Real GetEdge2Length(const int k, const int j, const int i) final;$/;"	m	class:GRUser
final	coordinates/coordinates.hpp	/^  Real GetEdge2Length(const int k, const int j, const int i) final;$/;"	m	class:KerrSchild
final	coordinates/coordinates.hpp	/^  Real GetEdge2Length(const int k, const int j, const int i) final;$/;"	m	class:Schwarzschild
final	coordinates/coordinates.hpp	/^  Real GetEdge2Length(const int k, const int j, const int i) final;$/;"	m	class:SphericalPolar
final	coordinates/coordinates.hpp	/^  Real GetEdge3Length(const int k, const int j, const int i) final;$/;"	m	class:GRUser
final	coordinates/coordinates.hpp	/^  Real GetEdge3Length(const int k, const int j, const int i) final;$/;"	m	class:KerrSchild
final	coordinates/coordinates.hpp	/^  Real GetEdge3Length(const int k, const int j, const int i) final;$/;"	m	class:Schwarzschild
final	coordinates/coordinates.hpp	/^  Real GetEdge3Length(const int k, const int j, const int i) final;$/;"	m	class:SphericalPolar
final	coordinates/coordinates.hpp	/^  Real GetFace1Area(const int k, const int j, const int i) final;$/;"	m	class:Cylindrical
final	coordinates/coordinates.hpp	/^  Real GetFace1Area(const int k, const int j, const int i) final;$/;"	m	class:GRUser
final	coordinates/coordinates.hpp	/^  Real GetFace1Area(const int k, const int j, const int i) final;$/;"	m	class:KerrSchild
final	coordinates/coordinates.hpp	/^  Real GetFace1Area(const int k, const int j, const int i) final;$/;"	m	class:Schwarzschild
final	coordinates/coordinates.hpp	/^  Real GetFace1Area(const int k, const int j, const int i) final;$/;"	m	class:SphericalPolar
final	coordinates/coordinates.hpp	/^  Real GetFace2Area(const int k, const int j, const int i) final;$/;"	m	class:GRUser
final	coordinates/coordinates.hpp	/^  Real GetFace2Area(const int k, const int j, const int i) final;$/;"	m	class:KerrSchild
final	coordinates/coordinates.hpp	/^  Real GetFace2Area(const int k, const int j, const int i) final;$/;"	m	class:Schwarzschild
final	coordinates/coordinates.hpp	/^  Real GetFace2Area(const int k, const int j, const int i) final;$/;"	m	class:SphericalPolar
final	coordinates/coordinates.hpp	/^  Real GetFace3Area(const int k, const int j, const int i) final;$/;"	m	class:Cylindrical
final	coordinates/coordinates.hpp	/^  Real GetFace3Area(const int k, const int j, const int i) final;$/;"	m	class:GRUser
final	coordinates/coordinates.hpp	/^  Real GetFace3Area(const int k, const int j, const int i) final;$/;"	m	class:KerrSchild
final	coordinates/coordinates.hpp	/^  Real GetFace3Area(const int k, const int j, const int i) final;$/;"	m	class:Schwarzschild
final	coordinates/coordinates.hpp	/^  Real GetFace3Area(const int k, const int j, const int i) final;$/;"	m	class:SphericalPolar
final	gravity/fft_gravity.hpp	/^  void ApplyKernel(int mode) final;$/;"	m	class:FFTGravity
final	gravity/mg_gravity.hpp	/^                       int il, int iu, int jl, int ju, int kl, int ku) final;$/;"	m	class:MGGravity
final	gravity/mg_gravity.hpp	/^                       int rlev, int il, int iu, int jl, int ju, int kl, int ku) final;$/;"	m	class:MGGravity
final	gravity/mg_gravity.hpp	/^              int rlev, int il, int iu, int jl, int ju, int kl, int ku, int color) final;$/;"	m	class:MGGravity
final	gravity/mg_gravity.hpp	/^  void ProlongateOctetBoundariesFluxCons(AthenaArray<Real> &dst) final;$/;"	m	class:MGGravityDriver
final	gravity/mg_gravity.hpp	/^  void Solve(int stage) final;$/;"	m	class:MGGravityDriver
finest_lev	pgen/disk_3d_mhd_dust.cpp	/^int  finest_lev;$/;"	m	namespace:__anon60	file:
finished_tasks	task_list/task_list.hpp	/^  TaskID finished_tasks;$/;"	m	struct:TaskStates
fl_div	hydro/hydro.hpp	/^  AthenaArray<Real> u0, fl_div;     \/\/ rkl2 STS memory registers;$/;"	m	class:Hydro
flag	bvals/bvals_interfaces.hpp	/^  BoundaryStatus flag[kMaxNeighbor], sflag[kMaxNeighbor];$/;"	m	struct:BoundaryData
flag_point_mass_	dustfluids/srcterms/dustfluids_srcterms.hpp	/^  bool flag_point_mass_;            \/\/ flag for calling PointMass function$/;"	m	class:DustFluidsSourceTerms
flag_point_mass_	hydro/srcterms/hydro_srcterms.hpp	/^  bool flag_point_mass_;      \/\/ flag for calling PointMass function$/;"	m	class:HydroSourceTerms
flag_shearing_source_	dustfluids/srcterms/dustfluids_srcterms.hpp	/^  int  flag_shearing_source_;       \/\/ 1=orbital advection, 2=shearing box, 3=rotating system$/;"	m	class:DustFluidsSourceTerms
flag_shearing_source_	hydro/srcterms/hydro_srcterms.hpp	/^  int  flag_shearing_source_; \/\/ 1=orbital advection, 2=shearing box, 3=rotating system$/;"	m	class:HydroSourceTerms
fleaf	multigrid/multigrid.hpp	/^  bool fleaf;$/;"	m	struct:MGOctet
flip_across_pole_	bvals/cc/bvals_cc.hpp	/^  const bool *flip_across_pole_;$/;"	m	class:CellCenteredBoundaryVariable
flip_across_pole_	bvals/fc/bvals_fc.hpp	/^  const bool *flip_across_pole_;$/;"	m	class:FaceCenteredBoundaryVariable
flip_across_pole_dustdiffusion	bvals/bvals_interfaces.hpp	/^constexpr const bool flip_across_pole_dustdiffusion[] = {false, false, true, true};$/;"	v
flip_across_pole_dustfluids	bvals/bvals_interfaces.hpp	/^constexpr const bool flip_across_pole_dustfluids[]    = {false, false, true, true};$/;"	v
flip_across_pole_field	bvals/bvals_interfaces.hpp	/^constexpr const bool flip_across_pole_field[] = {false, true, true};$/;"	v
flip_across_pole_hydro	bvals/bvals_interfaces.hpp	/^constexpr const bool flip_across_pole_hydro[] = {false, false, true, true, false};$/;"	v
float_1pe	eos/general/hydrogen.cpp	/^const Real float_1pe = 1.0 + float_eps;$/;"	m	namespace:__anon11	file:
float_eps	eos/general/hydrogen.cpp	/^const Real float_eps = std::numeric_limits<float>::epsilon();$/;"	m	namespace:__anon11	file:
float_min	pgen/inject_pebble_3D.cpp	/^Real dfloor, pfloor, float_min;$/;"	m	namespace:__anon62	file:
fluid_setup	mesh/mesh.hpp	/^  const FluidFormulation fluid_setup;$/;"	m	class:Mesh
flux	hydro/hydro.hpp	/^  AthenaArray<Real> flux[3];        \/\/ face-averaged flux vector$/;"	m	class:Hydro
flux_north_flag_	bvals/fc/bvals_fc.hpp	/^  BoundaryStatus *flux_north_flag_;$/;"	m	class:FaceCenteredBoundaryVariable
flux_north_recv_	bvals/fc/bvals_fc.hpp	/^  Real **flux_north_send_, **flux_north_recv_;$/;"	m	class:FaceCenteredBoundaryVariable
flux_north_send_	bvals/fc/bvals_fc.hpp	/^  Real **flux_north_send_, **flux_north_recv_;$/;"	m	class:FaceCenteredBoundaryVariable
flux_radii	pgen/gr_torus.cpp	/^Real *flux_radii;                             \/\/ locations to calculate fluxes$/;"	m	namespace:__anon39	file:
flux_south_flag_	bvals/fc/bvals_fc.hpp	/^  BoundaryStatus *flux_south_flag_;$/;"	m	class:FaceCenteredBoundaryVariable
flux_south_recv_	bvals/fc/bvals_fc.hpp	/^  Real **flux_south_send_, **flux_south_recv_;$/;"	m	class:FaceCenteredBoundaryVariable
flux_south_send_	bvals/fc/bvals_fc.hpp	/^  Real **flux_south_send_, **flux_south_recv_;$/;"	m	class:FaceCenteredBoundaryVariable
fmglevel_	multigrid/multigrid.hpp	/^  int current_level_, fmglevel_;$/;"	m	class:MultigridDriver
force_x1	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> force_x1, force_x2, force_x3;$/;"	m	class:DustGasDrag
force_x1_n	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> force_x1_n, force_x2_n, force_x3_n;$/;"	m	class:DustGasDrag
force_x2	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> force_x1, force_x2, force_x3;$/;"	m	class:DustGasDrag
force_x2_n	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> force_x1_n, force_x2_n, force_x3_n;$/;"	m	class:DustGasDrag
force_x3	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> force_x1, force_x2, force_x3;$/;"	m	class:DustGasDrag
force_x3_n	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> force_x1_n, force_x2_n, force_x3_n;$/;"	m	class:DustGasDrag
forward	fft/athena_fft.hpp	/^  enum class AthenaFFTDirection {forward=-1, backward=1};$/;"	m	class:FFTBlock::AthenaFFTDirection
four_pi_G	gravity/gravity.hpp	/^  Real gconst, four_pi_G;$/;"	m	class:Gravity
four_pi_G_	gravity/fft_gravity.hpp	/^  Real four_pi_G_;$/;"	m	class:FFTGravityDriver
four_pi_G_	gravity/mg_gravity.hpp	/^  Real four_pi_G_;$/;"	m	class:MGGravityDriver
four_pi_G_	mesh/mesh.hpp	/^  Real four_pi_G_, grav_eps_;$/;"	m	class:Mesh
fplan	pgen/jgg.cpp	/^  fftw_plan fplan;$/;"	m	namespace:__anon123	file:
fplan_	fft/athena_fft.hpp	/^  AthenaFFTPlan *fplan_, *bplan_;$/;"	m	class:FFTBlock::AthenaFFTDirection
fsubtract_average_	multigrid/multigrid.hpp	/^  bool fsubtract_average_, ffas_;$/;"	m	class:MultigridDriver
fv_	fft/turbulence.hpp	/^  std::complex<Real> **fv_, **fv_new_;$/;"	m	class:TurbulenceDriver
fv_co_	fft/turbulence.hpp	/^  std::complex<Real> **fv_sh_, **fv_co_;$/;"	m	class:TurbulenceDriver
fv_new_	fft/turbulence.cpp	/^    fv_new_(nullptr) {$/;"	f
fv_new_	fft/turbulence.hpp	/^  std::complex<Real> **fv_, **fv_new_;$/;"	m	class:TurbulenceDriver
fv_sh_	fft/turbulence.hpp	/^  std::complex<Real> **fv_sh_, **fv_co_;$/;"	m	class:TurbulenceDriver
fvol_	mesh/mesh_refinement.hpp	/^  AthenaArray<Real> fvol_[2][2], sarea_x1_[2][2], sarea_x2_[2][3], sarea_x3_[3][2];$/;"	m	class:MeshRefinement
fx_	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> fx_, fy_, fz_;$/;"	m	class:HydroDiffusion
fy_	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> fx_, fy_, fz_;$/;"	m	class:HydroDiffusion
fz_	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> fx_, fy_, fz_;$/;"	m	class:HydroDiffusion
g1_	dustfluids/srcterms/dustfluids_srcterms.hpp	/^  Real g1_, g2_, g3_;               \/\/ constant acc'n in each direction$/;"	m	class:DustFluidsSourceTerms
g1_	hydro/srcterms/hydro_srcterms.hpp	/^  Real g1_, g2_, g3_; \/\/ constant acc'n in each direction$/;"	m	class:HydroSourceTerms
g2_	dustfluids/srcterms/dustfluids_srcterms.hpp	/^  Real g1_, g2_, g3_;               \/\/ constant acc'n in each direction$/;"	m	class:DustFluidsSourceTerms
g2_	hydro/srcterms/hydro_srcterms.hpp	/^  Real g1_, g2_, g3_; \/\/ constant acc'n in each direction$/;"	m	class:HydroSourceTerms
g3_	dustfluids/srcterms/dustfluids_srcterms.hpp	/^  Real g1_, g2_, g3_;               \/\/ constant acc'n in each direction$/;"	m	class:DustFluidsSourceTerms
g3_	hydro/srcterms/hydro_srcterms.hpp	/^  Real g1_, g2_, g3_; \/\/ constant acc'n in each direction$/;"	m	class:HydroSourceTerms
gMth	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^gMth[10], t_planet_growth[10], Hill_radius[10], accretion_radius[10],$/;"	m	namespace:__anon68	file:
gMth	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^gMth[10], t_planet_growth[10], Hill_radius[10], accretion_radius[10],$/;"	m	namespace:__anon109	file:
gMth	pgen/disk_planet_dust_cylindrical.cpp	/^gm0, r0, rho0, dslope, p0_over_r0, pslope, beta, gMth, nu_alpha,$/;"	m	namespace:__anon99	file:
gMth	pgen/disk_planet_dust_spherical.cpp	/^gm0, r0, rho0, dslope, p0_over_r0, pslope, beta, gMth, nu_alpha,$/;"	m	namespace:__anon113	file:
gMth	pgen/ssheet_planet_dust.cpp	/^kappap, kappap2, Kai0, etaVk, AN, BN, Psi, time_drag, user_dt, rs, gmp, gMth, t_planet_growth,$/;"	m	namespace:__anon111	file:
g_	coordinates/coordinates.hpp	/^  AthenaArray<Real> g_, gi_;$/;"	m	class:Coordinates
g_	eos/eos.hpp	/^  AthenaArray<Real> g_, g_inv_;          \/\/ metric and its inverse, used in GR$/;"	m	class:EquationOfState
g_	field/field.hpp	/^  AthenaArray<Real> g_, gi_;  \/\/ only used in GR$/;"	m	class:Field
g_	hydro/hydro.hpp	/^  AthenaArray<Real> g_, gi_;       \/\/ metric and inverse, for some GR Riemann solvers$/;"	m	class:Hydro
g_inv_	eos/eos.hpp	/^  AthenaArray<Real> g_, g_inv_;          \/\/ metric and its inverse, used in GR$/;"	m	class:EquationOfState
gam	pgen/dusty_soundwave.cpp	/^Real gam, gm1, iso_cs, vflow;$/;"	m	namespace:__anon105	file:
gam	pgen/dusty_wave.cpp	/^Real gam,gm1,iso_cs,vflow;$/;"	m	namespace:__anon86	file:
gam	pgen/dusty_wave_1d.cpp	/^Real gam, gm1, iso_cs, vflow;$/;"	m	namespace:__anon137	file:
gam	pgen/jeans.cpp	/^Real cs2, gam, gm1, omega, omega2, gconst;$/;"	m	namespace:__anon119	file:
gam	pgen/linear_wave.cpp	/^Real gam,gm1,iso_cs,vflow;$/;"	m	namespace:__anon125	file:
gamma1	pgen/ssheet_RWI_dust.cpp	/^Real sound_speed, gamma1, inv_gm1, d0, amp, x1size, x2size, x3size, qshear, Omega0,$/;"	m	namespace:__anon90	file:
gamma_	eos/eos.hpp	/^  Real iso_sound_speed_, gamma_;         \/\/ isothermal Cs, ratio of specific heats$/;"	m	class:EquationOfState
gamma_1	task_list/task_list.hpp	/^    Real gamma_1, gamma_2, gamma_3; \/\/ low-storage coeff for weighted ave of registers$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
gamma_2	task_list/task_list.hpp	/^    Real gamma_1, gamma_2, gamma_3; \/\/ low-storage coeff for weighted ave of registers$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
gamma_3	task_list/task_list.hpp	/^    Real gamma_1, gamma_2, gamma_3; \/\/ low-storage coeff for weighted ave of registers$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
gamma_adi	pgen/gr_torus.cpp	/^Real gamma_adi;                               \/\/ adiabatic index$/;"	m	namespace:__anon39	file:
gamma_adi_red	pgen/gr_linear_wave.cpp	/^Real gamma_adi_red;           \/\/ reduced adiabatic index \\Gamma\/(\\Gamma-1)$/;"	m	namespace:__anon84	file:
gamma_gas	pgen/disk.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas;$/;"	m	namespace:__anon36	file:
gamma_gas	pgen/disk_RWI_2D.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, beta, nu_alpha,$/;"	m	namespace:__anon101	file:
gamma_gas	pgen/disk_dust_diffusion.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, beta, nu_alpha;$/;"	m	namespace:__anon70	file:
gamma_gas	pgen/disk_dust_drift.cpp	/^Real gm0, r0, rho_0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, user_dt, iso_cs2_r0;$/;"	m	namespace:__anon64	file:
gamma_gas	pgen/disk_streaming_cylindrical.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, amp;$/;"	m	namespace:__anon54	file:
gamma_gas	pgen/disk_streaming_spherical.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, amp;$/;"	m	namespace:__anon75	file:
gamma_gas	pgen/dust_collision.cpp	/^Real v0, t0, x0, user_dt, iso_cs, gamma_gas;$/;"	m	namespace:__anon152	file:
gamma_gas	pgen/dust_collision_different_Ts.cpp	/^Real v0, t0, x0, user_dt, iso_cs, gamma_gas;$/;"	m	namespace:__anon131	file:
gamma_gas	pgen/dust_diffusion.cpp	/^Real gm0, r0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, iso_cs2_r0;$/;"	m	namespace:__anon117	file:
gamma_gas	pgen/dust_inelastic_collision.cpp	/^Real v0, t0, x0, user_dt, iso_cs, press, gamma_gas;$/;"	m	namespace:__anon143	file:
gamma_gas	pgen/dust_squaredrag.cpp	/^Real v0, t0, x0, user_dt, iso_cs, gamma_gas;$/;"	m	namespace:__anon141	file:
gamma_gas	pgen/dusty_shock.cpp	/^Real user_dt, iso_cs, xshock, gamma_gas, vel_right;$/;"	m	namespace:__anon120	file:
gamma_gas	pgen/field_loop_poles.cpp	/^Real vy0, rho0, isocs2, gamma_gas;$/;"	m	namespace:__anon56	file:
gamma_gas	pgen/inject_pebble_3D.cpp	/^Real mplanet, tsoft, rsoft, gamma_gas, x1min, x1max;$/;"	m	namespace:__anon62	file:
gamma_max_	eos/eos.hpp	/^  Real gamma_max_;                       \/\/ maximum Lorentz factor$/;"	m	class:EquationOfState
gammaj_tilde	mesh/mesh.hpp	/^  Real muj, nuj, muj_tilde, gammaj_tilde;$/;"	m	class:Mesh
gbvar	gravity/gravity.cpp	/^    gbvar(pmb, &phi, nullptr, empty_flux) {$/;"	f
gbvar	gravity/gravity.hpp	/^  CellCenteredBoundaryVariable gbvar;$/;"	m	class:Gravity
gcnt_	fft/athena_fft.hpp	/^  std::int64_t cnt_, gcnt_;$/;"	m	class:FFTBlock::AthenaFFTDirection
gcnt_	fft/athena_fft.hpp	/^  std::int64_t gcnt_;$/;"	m	class:FFTBlock::FFTDriver
gconst	gravity/gravity.hpp	/^  Real gconst, four_pi_G;$/;"	m	class:Gravity
gconst	pgen/jeans.cpp	/^Real cs2, gam, gm1, omega, omega2, gconst;$/;"	m	namespace:__anon119	file:
get_a_orbit	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real get_a_orbit(int num) {$/;"	f
get_e_orbit	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real get_e_orbit(int num) {$/;"	f
get_omega_orbit	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real get_omega_orbit(int num) {$/;"	f
get_phi_orbit	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real get_phi_orbit(int num) {$/;"	f
gflag	mesh/mesh.hpp	/^  int gflag;$/;"	m	class:Mesh
gflag	mesh/mesh.hpp	/^  int gflag;$/;"	m	class:MeshBlock
gi_	coordinates/coordinates.hpp	/^  AthenaArray<Real> g_, gi_;$/;"	m	class:Coordinates
gi_	field/field.hpp	/^  AthenaArray<Real> g_, gi_;  \/\/ only used in GR$/;"	m	class:Field
gi_	hydro/hydro.hpp	/^  AthenaArray<Real> g_, gi_;       \/\/ metric and inverse, for some GR Riemann solvers$/;"	m	class:Hydro
gid	bvals/bvals_interfaces.hpp	/^  int gid;     \/\/!< global ID of neighbor$/;"	m	struct:SimpleNeighborBlock
gid	mesh/mesh.hpp	/^  int gid, lid;$/;"	m	class:MeshBlock
gid_	fft/athena_fft.hpp	/^  int gid_;$/;"	m	class:FFTBlock::AthenaFFTDirection
gid_	mesh/meshblock_tree.hpp	/^  int gid_;$/;"	m	class:MeshBlockTree
gide_	mesh/mesh.hpp	/^  int gids_, gide_;$/;"	m	class:Mesh
gids_	mesh/mesh.hpp	/^  int gids_, gide_;$/;"	m	class:Mesh
gl_coeff	utils/gl_quadrature.cpp	/^static const Quadrature gl_coeff[65] = {$/;"	m	namespace:GaussLegendre	file:
global_ps_	fft/turbulence.hpp	/^  bool global_ps_ = false;$/;"	m	class:TurbulenceDriver
gm	orbital_advection/orbital_advection.hpp	/^  Real gm;                         \/\/ central gravity in cylindrical\/spherical_polar$/;"	m	class:OrbitalTransform::OrbitalAdvection
gm	pgen/quirk.cpp	/^Real gm;$/;"	m	namespace:__anon140	file:
gm0	pgen/disk.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas;$/;"	m	namespace:__anon36	file:
gm0	pgen/disk_RWI_2D.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, beta, nu_alpha,$/;"	m	namespace:__anon101	file:
gm0	pgen/disk_VSI.cpp	/^Real gm0, r0, rho0, pvalue, cs2_0, qvalue, beta, nu_alpha, dfloor, dffloor, rho_floor, Omega0,$/;"	m	namespace:__anon133	file:
gm0	pgen/disk_dust_diffusion.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, beta, nu_alpha;$/;"	m	namespace:__anon70	file:
gm0	pgen/disk_dust_drift.cpp	/^Real gm0, r0, rho_0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, user_dt, iso_cs2_r0;$/;"	m	namespace:__anon64	file:
gm0	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real x1min, x1max, damping_rate, gm0, r0, rho0, dslope, p0_over_r0, pslope, beta,$/;"	m	namespace:__anon68	file:
gm0	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real x1min, x1max, damping_rate, gm0, r0, rho0, dslope, p0_over_r0, pslope, beta,$/;"	m	namespace:__anon109	file:
gm0	pgen/disk_planet_dust_cylindrical.cpp	/^gm0, r0, rho0, dslope, p0_over_r0, pslope, beta, gMth, nu_alpha,$/;"	m	namespace:__anon99	file:
gm0	pgen/disk_planet_dust_spherical.cpp	/^gm0, r0, rho0, dslope, p0_over_r0, pslope, beta, gMth, nu_alpha,$/;"	m	namespace:__anon113	file:
gm0	pgen/disk_streaming_cylindrical.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, amp;$/;"	m	namespace:__anon54	file:
gm0	pgen/disk_streaming_spherical.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, amp;$/;"	m	namespace:__anon75	file:
gm0	pgen/dust_diffusion.cpp	/^Real gm0, r0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, iso_cs2_r0;$/;"	m	namespace:__anon117	file:
gm0	pgen/visc_dustfluids.cpp	/^Real nuiso, gm0;$/;"	m	namespace:__anon151	file:
gm0	pgen/visc_scalars.cpp	/^Real nuiso, gm0;$/;"	m	namespace:__anon53	file:
gm1	hydro/rsolvers/hydro/roe.cpp	/^Real gm1, iso_cs;$/;"	m	namespace:__anon30	file:
gm1	hydro/rsolvers/mhd/roe_mhd.cpp	/^Real gm1, iso_cs;$/;"	m	namespace:__anon20	file:
gm1	pgen/cpaw.cpp	/^Real den, pres, gm1, b_par, b_perp, v_perp, v_par;$/;"	m	namespace:__anon88	file:
gm1	pgen/dust_NSH.cpp	/^Real gm1, iso_cs;$/;"	m	namespace:__anon103	file:
gm1	pgen/dusty_soundwave.cpp	/^Real gam, gm1, iso_cs, vflow;$/;"	m	namespace:__anon105	file:
gm1	pgen/dusty_wave.cpp	/^Real gam,gm1,iso_cs,vflow;$/;"	m	namespace:__anon86	file:
gm1	pgen/dusty_wave_1d.cpp	/^Real gam, gm1, iso_cs, vflow;$/;"	m	namespace:__anon137	file:
gm1	pgen/hb3.cpp	/^Real gm1, iso_cs;$/;"	m	namespace:__anon58	file:
gm1	pgen/hgb.cpp	/^Real iso_cs, gm1, d0, p0;$/;"	m	namespace:__anon115	file:
gm1	pgen/jeans.cpp	/^Real cs2, gam, gm1, omega, omega2, gconst;$/;"	m	namespace:__anon119	file:
gm1	pgen/jet.cpp	/^Real gm1, x2_0, x3_0;$/;"	m	namespace:__anon77	file:
gm1	pgen/jgg.cpp	/^Real iso_cs, gm1, d0, p0;$/;"	m	namespace:__anon123	file:
gm1	pgen/linear_wave.cpp	/^Real gam,gm1,iso_cs,vflow;$/;"	m	namespace:__anon125	file:
gm1	pgen/magnoh.cpp	/^Real gm1;$/;"	m	namespace:__anon92	file:
gm1	pgen/ssheet.cpp	/^Real iso_cs, gm1, d0, p0;$/;"	m	namespace:__anon95	file:
gm1	pgen/ssheet_planet_dust.cpp	/^Real x1size, x2size, x3size, sound_speed, gm1, inv_gm1, d0, qshear, Omega0, beta,$/;"	m	namespace:__anon111	file:
gm1	pgen/streaming_eigen.cpp	/^Real gm1, iso_cs;$/;"	m	namespace:__anon66	file:
gm1	pgen/streaming_eigen_2dust.cpp	/^Real gm1, iso_cs;$/;"	m	namespace:__anon145	file:
gm1	pgen/streaming_nonlinear.cpp	/^Real gm1, iso_cs;$/;"	m	namespace:__anon135	file:
gm1	pgen/streaming_stratified.cpp	/^Real gm1, iso_cs;$/;"	m	namespace:__anon154	file:
gm_	dustfluids/srcterms/dustfluids_srcterms.hpp	/^  Real gm_;                         \/\/ GM for point mass MUST BE LOCATED AT ORIGIN$/;"	m	class:DustFluidsSourceTerms
gm_	hydro/srcterms/hydro_srcterms.hpp	/^  Real gm_;           \/\/ GM for point mass MUST BE LOCATED AT ORIGIN$/;"	m	class:HydroSourceTerms
gm_cur	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^vy_planet[10], vz_planet[10], gm_cur[11], rad_cor[10], planets_number;$/;"	m	namespace:__anon68	file:
gm_cur	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^vy_planet[10], vz_planet[10], gm_cur[11], rad_cor[10], planets_number;$/;"	m	namespace:__anon109	file:
gmma	pgen/noh.cpp	/^Real gmma, gmma1;$/;"	m	namespace:__anon147	file:
gmma1	pgen/noh.cpp	/^Real gmma, gmma1;$/;"	m	namespace:__anon147	file:
gmma1	pgen/shk_cloud.cpp	/^Real gmma1, dl, pl, ul;$/;"	m	namespace:__anon74	file:
gmp	pgen/disk_dust_diffusion.cpp	/^Real tau_relax, rs, gmstar, gmp, rad_planet, phi_planet_0, z_planet, t0_planet, t_end_planet, vk_planet, omega_planet, inv_omega_planet;$/;"	m	namespace:__anon70	file:
gmp	pgen/disk_dust_drift.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon64	file:
gmp	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real tau_relax[10], rad_soft[10], gmp[10], inv_sqrt2gmp[10], rad_planet[10],$/;"	m	namespace:__anon68	file:
gmp	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real tau_relax[10], rad_soft[10], gmp[10], inv_sqrt2gmp[10], rad_planet[10],$/;"	m	namespace:__anon109	file:
gmp	pgen/disk_planet_dust_cylindrical.cpp	/^Real rad_soft, gmp, inv_sqrt2gmp, rad_planet, phi_planet_0, z_planet,$/;"	m	namespace:__anon99	file:
gmp	pgen/disk_planet_dust_spherical.cpp	/^Real rad_soft, gmp, inv_sqrt2gmp, rad_planet, phi_planet_0, z_planet,$/;"	m	namespace:__anon113	file:
gmp	pgen/disk_streaming_cylindrical.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon54	file:
gmp	pgen/disk_streaming_spherical.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon75	file:
gmp	pgen/dust_diffusion.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon117	file:
gmp	pgen/ssheet_planet_dust.cpp	/^kappap, kappap2, Kai0, etaVk, AN, BN, Psi, time_drag, user_dt, rs, gmp, gMth, t_planet_growth,$/;"	m	namespace:__anon111	file:
gmstar	pgen/disk_dust_diffusion.cpp	/^Real tau_relax, rs, gmstar, gmp, rad_planet, phi_planet_0, z_planet, t0_planet, t_end_planet, vk_planet, omega_planet, inv_omega_planet;$/;"	m	namespace:__anon70	file:
gmstar	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real gmstar, x_0, y_0, z_0, vx_0, vy_0, vz_0, x_cur, y_cur, z_cur, vx_cur, vy_cur, vz_cur;$/;"	m	namespace:__anon68	file:
gmstar	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real gmstar, x_0, y_0, z_0, vx_0, vy_0, vz_0, x_cur, y_cur, z_cur, vx_cur, vy_cur, vz_cur;$/;"	m	namespace:__anon109	file:
gr_amr	athena.hpp	/^enum class BoundaryCommSubset {mesh_init, gr_amr, all, orbital};$/;"	m	class:BoundaryCommSubset
grav_acc	pgen/rt.cpp	/^Real grav_acc;$/;"	m	namespace:__anon122	file:
grav_eps_	mesh/mesh.hpp	/^  Real four_pi_G_, grav_eps_;$/;"	m	class:Mesh
gravity_tensor_energy_	gravity/gravity.hpp	/^  bool gravity_tensor_energy_;$/;"	m	class:Gravity
gravity_tensor_momentum_	gravity/gravity.hpp	/^  bool gravity_tensor_momentum_;$/;"	m	class:Gravity
gtlist_	gravity/fft_gravity.hpp	/^  FFTGravitySolverTaskList *gtlist_;$/;"	m	class:FFTGravityDriver
h2f	coordinates/coordinates.hpp	/^  AthenaArray<Real> h2f, dh2fd1, h31f, h32f, dh31fd1, dh32fd2;$/;"	m	class:Coordinates
h2v	coordinates/coordinates.hpp	/^  AthenaArray<Real> h2v, dh2vd1, h31v, h32v, dh31vd1, dh32vd2;$/;"	m	class:Coordinates
h31f	coordinates/coordinates.hpp	/^  AthenaArray<Real> h2f, dh2fd1, h31f, h32f, dh31fd1, dh32fd2;$/;"	m	class:Coordinates
h31v	coordinates/coordinates.hpp	/^  AthenaArray<Real> h2v, dh2vd1, h31v, h32v, dh31vd1, dh32vd2;$/;"	m	class:Coordinates
h32f	coordinates/coordinates.hpp	/^  AthenaArray<Real> h2f, dh2fd1, h31f, h32f, dh31fd1, dh32fd2;$/;"	m	class:Coordinates
h32v	coordinates/coordinates.hpp	/^  AthenaArray<Real> h2v, dh2vd1, h31v, h32v, dh31vd1, dh32vd2;$/;"	m	class:Coordinates
hUnit	utils/interp_table.hpp	/^  Real rhoUnit, eUnit, hUnit;$/;"	m	class:EosTable
h_grid	pgen/gr_torus.cpp	/^Real h_grid;                                  \/\/ grid compression parameter$/;"	m	namespace:__anon39	file:
hall	field/field_diffusion/field_diffusion.hpp	/^  enum DiffProcess {ohmic=0, hall=1, ambipolar=2};$/;"	e	enum:FieldDiffusion::DiffProcess
hbuf	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> hbuf;     \/\/ pencil buffer for shallow copy for hydro calculation$/;"	m	class:OrbitalTransform::OrbitalAdvection
hbvar	hydro/hydro.hpp	/^  HydroBoundaryVariable hbvar;$/;"	m	class:Hydro
hdif	hydro/hydro.cpp	/^    hdif(this, pin) {$/;"	f
hdif	hydro/hydro.hpp	/^  HydroDiffusion hdif;$/;"	m	class:Hydro
hminus_ratio_i	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> hplus_ratio_i, hminus_ratio_i; \/\/ for curvilinear PPMx1$/;"	m	class:Reconstruction
hminus_ratio_j	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> hplus_ratio_j, hminus_ratio_j; \/\/ for curvilinear PPMx2$/;"	m	class:Reconstruction
hminus_ratio_k	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> hplus_ratio_k, hminus_ratio_k; \/\/ for curvilinear PPMx3$/;"	m	class:Reconstruction
hplus_ratio_i	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> hplus_ratio_i, hminus_ratio_i; \/\/ for curvilinear PPMx1$/;"	m	class:Reconstruction
hplus_ratio_j	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> hplus_ratio_j, hminus_ratio_j; \/\/ for curvilinear PPMx2$/;"	m	class:Reconstruction
hplus_ratio_k	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> hplus_ratio_k, hminus_ratio_k; \/\/ for curvilinear PPMx3$/;"	m	class:Reconstruction
hsrc	hydro/hydro.hpp	/^  HydroSourceTerms hsrc;$/;"	m	class:Hydro
hst_dt	pgen/jgg.cpp	/^Real hst_dt, hst_next_time;$/;"	m	namespace:__anon123	file:
hst_dt	pgen/ssheet.cpp	/^Real hst_dt, hst_next_time;$/;"	m	namespace:__anon95	file:
hst_next_time	pgen/jgg.cpp	/^Real hst_dt, hst_next_time;$/;"	m	namespace:__anon123	file:
hst_next_time	pgen/ssheet.cpp	/^Real hst_dt, hst_next_time;$/;"	m	namespace:__anon95	file:
hyd_avg_	hydro/srcterms/hydro_srcterms.hpp	/^  AthenaArray<Real> hyd_avg_; \/\/ storage for polar averaging$/;"	m	class:HydroSourceTerms
hydro_diffusion_defined	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  bool hydro_diffusion_defined;    \/\/ true or false$/;"	m	class:HydroDiffusion
hydro_sourceterms_defined	hydro/srcterms/hydro_srcterms.hpp	/^  bool hydro_sourceterms_defined;$/;"	m	class:HydroSourceTerms
hydro_type_	bvals/cc/hydro/bvals_hydro.hpp	/^  HydroBoundaryQuantity hydro_type_;$/;"	m	class:HydroBoundaryVariable
idx_vector	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> idx_vector, lu_matrix;$/;"	m	class:DustGasDrag
ie	fft/athena_fft.hpp	/^  int nx[3], is[3], ie[3];$/;"	m	class:AthenaFFTIndex
ie	mesh/mesh.hpp	/^  int is, ie, js, je, ks, ke;$/;"	m	class:MeshBlock
ifield	pgen/dust_NSH.cpp	/^int ShBoxCoord, ipert, ifield; \/\/ initial pattern$/;"	m	namespace:__anon103	file:
ifield	pgen/hb3.cpp	/^int ShBoxCoord, ipert,ifield; \/\/ initial pattern$/;"	m	namespace:__anon58	file:
ifield	pgen/streaming_eigen.cpp	/^int ShBoxCoord, ipert, ifield; \/\/ initial pattern$/;"	m	namespace:__anon66	file:
ifield	pgen/streaming_eigen_2dust.cpp	/^int ShBoxCoord, ipert, ifield; \/\/ initial pattern$/;"	m	namespace:__anon145	file:
ifield	pgen/streaming_nonlinear.cpp	/^int ShBoxCoord, ipert, ifield; \/\/ initial pattern$/;"	m	namespace:__anon135	file:
ifield	pgen/streaming_stratified.cpp	/^int ShBoxCoord, ipert, ifield; \/\/ initial pattern$/;"	m	namespace:__anon154	file:
ihi	fft/plimpton/remap_2d.h	/^  int ilo,ihi,isize;$/;"	m	struct:extent_2d
ihi	fft/plimpton/remap_3d.h	/^  int ilo,ihi,isize;$/;"	m	struct:extent_3d
il	coordinates/coordinates.hpp	/^  int il, iu, jl, ju, kl, ku, ng;  \/\/ limits of indices of arrays (normal or coarse)$/;"	m	class:Coordinates
ilo	fft/plimpton/remap_2d.h	/^  int ilo,ihi,isize;$/;"	m	struct:extent_2d
ilo	fft/plimpton/remap_3d.h	/^  int ilo,ihi,isize;$/;"	m	struct:extent_3d
iloc	fft/athena_fft.cpp	/^    loc_(iloc), msize_(msize), bsize_(bsize),$/;"	v
iloc	fft/athena_fft.hpp	/^  int iloc[3],ploc[3];$/;"	m	class:AthenaFFTIndex
in_	fft/athena_fft.hpp	/^  std::complex<Real> *in_, *out_;$/;"	m	class:FFTBlock::AthenaFFTDirection
include_ghost_zones	outputs/outputs.hpp	/^  bool include_ghost_zones, cartesian_vector;$/;"	m	struct:OutputParameters
indx_first_task	task_list/task_list.hpp	/^  int indx_first_task, num_tasks_left;$/;"	m	struct:TaskStates
initial	pgen/gr_linear_wave.cpp	/^AthenaArray<Real> initial;    \/\/ initial conditions$/;"	v
initial_D2G	pgen/disk_3d_mhd_dust.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS],$/;"	m	namespace:__anon60	file:
initial_D2G	pgen/disk_RWI_2D.cpp	/^Real initial_D2G[NDUSTFLUIDS], ring_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS], weight_dust[NDUSTFLUIDS];$/;"	m	namespace:__anon101	file:
initial_D2G	pgen/disk_VSI.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS],$/;"	m	namespace:__anon133	file:
initial_D2G	pgen/disk_dust_diffusion.cpp	/^Real initial_D2G[NDUSTFLUIDS], ring_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS],$/;"	m	namespace:__anon70	file:
initial_D2G	pgen/disk_dust_drift.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS];$/;"	m	namespace:__anon64	file:
initial_D2G	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS],$/;"	m	namespace:__anon68	file:
initial_D2G	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS],$/;"	m	namespace:__anon109	file:
initial_D2G	pgen/disk_planet_dust_cylindrical.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS],$/;"	m	namespace:__anon99	file:
initial_D2G	pgen/disk_planet_dust_spherical.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS],$/;"	m	namespace:__anon113	file:
initial_D2G	pgen/disk_streaming_cylindrical.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS];$/;"	m	namespace:__anon54	file:
initial_D2G	pgen/disk_streaming_spherical.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS];$/;"	m	namespace:__anon75	file:
initial_D2G	pgen/dmr_dust.cpp	/^Real initial_D2G[NDUSTFLUIDS];$/;"	m	namespace:__anon148	file:
initial_D2G	pgen/dust_NSH.cpp	/^Real initial_D2G[NDUSTFLUIDS];$/;"	m	namespace:__anon103	file:
initial_D2G	pgen/dust_diffusion.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], nu_dust[NDUSTFLUIDS], Hratio[NDUSTFLUIDS];$/;"	m	namespace:__anon117	file:
initial_D2G	pgen/dusty_shock.cpp	/^Real initial_D2G;$/;"	m	namespace:__anon120	file:
initial_D2G	pgen/dusty_soundwave.cpp	/^Real initial_D2G[NDUSTFLUIDS];$/;"	m	namespace:__anon105	file:
initial_D2G	pgen/inject_pebble_3D.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS], boundary_D2G[NDUSTFLUIDS], const_stopping_time[NDUSTFLUIDS];$/;"	m	namespace:__anon62	file:
initial_D2G	pgen/kh_dust.cpp	/^Real initial_D2G[NDUSTFLUIDS];$/;"	m	namespace:__anon107	file:
initial_D2G	pgen/ssheet_RWI_dust.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS];$/;"	m	namespace:__anon90	file:
initial_D2G	pgen/ssheet_planet_dust.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS];$/;"	m	namespace:__anon111	file:
initial_D2G	pgen/streaming_eigen.cpp	/^Real initial_D2G[NDUSTFLUIDS];$/;"	m	namespace:__anon66	file:
initial_D2G	pgen/streaming_eigen_2dust.cpp	/^Real initial_D2G[NDUSTFLUIDS];$/;"	m	namespace:__anon145	file:
initial_D2G	pgen/streaming_nonlinear.cpp	/^Real initial_D2G[NDUSTFLUIDS];$/;"	m	namespace:__anon135	file:
initial_D2G	pgen/streaming_stratified.cpp	/^Real initial_D2G[NDUSTFLUIDS];$/;"	m	namespace:__anon154	file:
initialized_	fft/turbulence.hpp	/^  bool initialized_ = false;$/;"	m	class:TurbulenceDriver
injection_Tsoft	pgen/inject_pebble_3D.cpp	/^Real min_tol, max_dfvdt, dust_start_injection, injection_Tsoft;$/;"	m	namespace:__anon62	file:
inner_ratio_region	pgen/disk_RWI_2D.cpp	/^inner_ratio_region, outer_ratio_region, inner_width_damping, outer_width_damping,$/;"	m	namespace:__anon101	file:
inner_ratio_region	pgen/disk_VSI.cpp	/^inner_ratio_region, outer_ratio_region, inner_width_damping, outer_width_damping,$/;"	m	namespace:__anon133	file:
inner_ratio_region	pgen/disk_dust_diffusion.cpp	/^Real radius_inner_damping, radius_outer_damping, inner_ratio_region, outer_ratio_region,$/;"	m	namespace:__anon70	file:
inner_ratio_region	pgen/disk_dust_drift.cpp	/^Real radius_inner_damping, radius_outer_damping, inner_ratio_region, outer_ratio_region,$/;"	m	namespace:__anon64	file:
inner_ratio_region	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^inner_ratio_region, outer_ratio_region, inner_width_damping, outer_width_damping;$/;"	m	namespace:__anon68	file:
inner_ratio_region	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^inner_ratio_region, outer_ratio_region, inner_width_damping, outer_width_damping;$/;"	m	namespace:__anon109	file:
inner_ratio_region	pgen/disk_planet_dust_cylindrical.cpp	/^radius_inner_damping, radius_outer_damping, inner_ratio_region,$/;"	m	namespace:__anon99	file:
inner_ratio_region	pgen/disk_planet_dust_spherical.cpp	/^radius_inner_damping, radius_outer_damping, inner_ratio_region,$/;"	m	namespace:__anon113	file:
inner_ratio_region	pgen/disk_streaming_cylindrical.cpp	/^Real radius_inner_damping, radius_outer_damping, inner_ratio_region, outer_ratio_region,$/;"	m	namespace:__anon54	file:
inner_ratio_region	pgen/disk_streaming_spherical.cpp	/^Real radius_inner_damping, radius_outer_damping, inner_ratio_region, outer_ratio_region,$/;"	m	namespace:__anon75	file:
inner_ratio_region	pgen/dust_diffusion.cpp	/^Real radius_inner_damping, radius_outer_damping, inner_ratio_region, outer_ratio_region,$/;"	m	namespace:__anon117	file:
inner_ratio_region	pgen/ssheet_RWI_dust.cpp	/^inner_ratio_region, outer_ratio_region, inner_width_damping, outer_width_damping;$/;"	m	namespace:__anon90	file:
inner_ratio_region	pgen/ssheet_planet_dust.cpp	/^inner_ratio_region, outer_ratio_region, inner_width_damping, outer_width_damping;$/;"	m	namespace:__anon111	file:
inner_width_damping	pgen/disk_RWI_2D.cpp	/^inner_ratio_region, outer_ratio_region, inner_width_damping, outer_width_damping,$/;"	m	namespace:__anon101	file:
inner_width_damping	pgen/disk_VSI.cpp	/^inner_ratio_region, outer_ratio_region, inner_width_damping, outer_width_damping,$/;"	m	namespace:__anon133	file:
inner_width_damping	pgen/disk_dust_diffusion.cpp	/^    inner_width_damping, outer_width_damping;$/;"	m	namespace:__anon70	file:
inner_width_damping	pgen/disk_dust_drift.cpp	/^     inner_width_damping, outer_width_damping;$/;"	m	namespace:__anon64	file:
inner_width_damping	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^inner_ratio_region, outer_ratio_region, inner_width_damping, outer_width_damping;$/;"	m	namespace:__anon68	file:
inner_width_damping	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^inner_ratio_region, outer_ratio_region, inner_width_damping, outer_width_damping;$/;"	m	namespace:__anon109	file:
inner_width_damping	pgen/disk_planet_dust_cylindrical.cpp	/^outer_ratio_region, inner_width_damping, outer_width_damping,$/;"	m	namespace:__anon99	file:
inner_width_damping	pgen/disk_planet_dust_spherical.cpp	/^outer_ratio_region, inner_width_damping, outer_width_damping,$/;"	m	namespace:__anon113	file:
inner_width_damping	pgen/disk_streaming_cylindrical.cpp	/^     inner_width_damping, outer_width_damping;$/;"	m	namespace:__anon54	file:
inner_width_damping	pgen/disk_streaming_spherical.cpp	/^     inner_width_damping, outer_width_damping;$/;"	m	namespace:__anon75	file:
inner_width_damping	pgen/dust_diffusion.cpp	/^     inner_width_damping, outer_width_damping;$/;"	m	namespace:__anon117	file:
inner_width_damping	pgen/ssheet_RWI_dust.cpp	/^inner_ratio_region, outer_ratio_region, inner_width_damping, outer_width_damping;$/;"	m	namespace:__anon90	file:
inner_width_damping	pgen/ssheet_planet_dust.cpp	/^inner_ratio_region, outer_ratio_region, inner_width_damping, outer_width_damping;$/;"	m	namespace:__anon111	file:
inner_x1	bvals/bvals_interfaces.hpp	/^enum BoundaryFace {undef=-1, inner_x1=0, outer_x1=1, inner_x2=2, outer_x2=3,$/;"	e	enum:BoundaryFace
inner_x2	bvals/bvals_interfaces.hpp	/^enum BoundaryFace {undef=-1, inner_x1=0, outer_x1=1, inner_x2=2, outer_x2=3,$/;"	e	enum:BoundaryFace
inner_x3	bvals/bvals_interfaces.hpp	/^                   inner_x3=4, outer_x3=5};$/;"	e	enum:BoundaryFace
integrate	utils/gl_quadrature.cpp	/^Real integrate(const int n, Real (*f)(Real), Real x1l, Real x1u) {$/;"	f	namespace:GaussLegendre
integrate	utils/gl_quadrature.cpp	/^Real integrate(const int n, Real (*f)(Real, Real),$/;"	f	namespace:GaussLegendre
integrate	utils/gl_quadrature.cpp	/^Real integrate(const int n, Real (*f)(Real, Real, Real),$/;"	f	namespace:GaussLegendre
integrator	task_list/task_list.hpp	/^  std::string integrator;$/;"	m	class:TimeIntegratorTaskList
integrator_	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  std::string integrator_;        \/\/ Time Integrator$/;"	m	class:DustGasDrag
interp_values	pgen/gr_mhd_inflow.cpp	/^AthenaArray<Real> interp_values;  \/\/ table for analytic solution$/;"	m	namespace:__anon72	file:
interpolate	utils/interp_table.cpp	/^Real InterpTable2D::interpolate(int var, Real x2, Real x1) {$/;"	f	class:InterpTable2D
inv_egas_unit_	eos/eos.hpp	/^  Real egas_unit_, inv_egas_unit_;       \/\/ physical unit\/sim unit for energy density$/;"	m	class:EquationOfState
inv_gas_rho	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> inv_gas_rho, inv_gas_rho_n;$/;"	m	class:DustGasDrag
inv_gas_rho_n	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> inv_gas_rho, inv_gas_rho_n;$/;"	m	class:DustGasDrag
inv_gm1	pgen/ssheet_RWI_dust.cpp	/^Real sound_speed, gamma1, inv_gm1, d0, amp, x1size, x2size, x3size, qshear, Omega0,$/;"	m	namespace:__anon90	file:
inv_gm1	pgen/ssheet_planet_dust.cpp	/^Real x1size, x2size, x3size, sound_speed, gm1, inv_gm1, d0, qshear, Omega0, beta,$/;"	m	namespace:__anon111	file:
inv_omega_planet	pgen/disk_dust_diffusion.cpp	/^Real tau_relax, rs, gmstar, gmp, rad_planet, phi_planet_0, z_planet, t0_planet, t_end_planet, vk_planet, omega_planet, inv_omega_planet;$/;"	m	namespace:__anon70	file:
inv_omega_planet	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^omega_planet[10], inv_omega_planet[10], cs_planet[10], a_orbit[10], e_orbit[10],$/;"	m	namespace:__anon68	file:
inv_omega_planet	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^omega_planet[10], inv_omega_planet[10], cs_planet[10],$/;"	m	namespace:__anon109	file:
inv_omega_planet	pgen/disk_planet_dust_cylindrical.cpp	/^t0_planet, time_drag, vk_planet, omega_planet, inv_omega_planet, cs_planet,$/;"	m	namespace:__anon99	file:
inv_omega_planet	pgen/disk_planet_dust_spherical.cpp	/^t0_planet, time_drag, vk_planet, omega_planet, inv_omega_planet, cs_planet,$/;"	m	namespace:__anon113	file:
inv_rho_unit_	eos/eos.hpp	/^  Real rho_unit_, inv_rho_unit_;         \/\/ physical unit\/sim unit for mass density$/;"	m	class:EquationOfState
inv_sqrt2gmp	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real tau_relax[10], rad_soft[10], gmp[10], inv_sqrt2gmp[10], rad_planet[10],$/;"	m	namespace:__anon68	file:
inv_sqrt2gmp	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real tau_relax[10], rad_soft[10], gmp[10], inv_sqrt2gmp[10], rad_planet[10],$/;"	m	namespace:__anon109	file:
inv_sqrt2gmp	pgen/disk_planet_dust_cylindrical.cpp	/^Real rad_soft, gmp, inv_sqrt2gmp, rad_planet, phi_planet_0, z_planet,$/;"	m	namespace:__anon99	file:
inv_sqrt2gmp	pgen/disk_planet_dust_spherical.cpp	/^Real rad_soft, gmp, inv_sqrt2gmp, rad_planet, phi_planet_0, z_planet,$/;"	m	namespace:__anon113	file:
inv_vsqr_unit_	eos/eos.hpp	/^  Real vsqr_unit_, inv_vsqr_unit_;       \/\/ physical unit\/sim unit for speed^2$/;"	m	class:EquationOfState
invert	eos/general/hydrogen.cpp	/^Real invert(Real(*f) (Real, Real), Real rho, Real sol, Real Ta, Real Tb) {$/;"	f	namespace:__anon11
ip	fft/athena_fft.hpp	/^  int np[3], ip[3];$/;"	m	class:AthenaFFTIndex
ipert	pgen/dust_NSH.cpp	/^int ShBoxCoord, ipert, ifield; \/\/ initial pattern$/;"	m	namespace:__anon103	file:
ipert	pgen/hb3.cpp	/^int ShBoxCoord, ipert,ifield; \/\/ initial pattern$/;"	m	namespace:__anon58	file:
ipert	pgen/hgb.cpp	/^int ipert;$/;"	m	namespace:__anon115	file:
ipert	pgen/jgg.cpp	/^int ipert;$/;"	m	namespace:__anon123	file:
ipert	pgen/ssheet.cpp	/^int ipert; \/\/ initial pattern$/;"	m	namespace:__anon95	file:
ipert	pgen/streaming_eigen.cpp	/^int ShBoxCoord, ipert, ifield; \/\/ initial pattern$/;"	m	namespace:__anon66	file:
ipert	pgen/streaming_eigen_2dust.cpp	/^int ShBoxCoord, ipert, ifield; \/\/ initial pattern$/;"	m	namespace:__anon145	file:
ipert	pgen/streaming_nonlinear.cpp	/^int ShBoxCoord, ipert, ifield; \/\/ initial pattern$/;"	m	namespace:__anon135	file:
ipert	pgen/streaming_stratified.cpp	/^int ShBoxCoord, ipert, ifield; \/\/ initial pattern$/;"	m	namespace:__anon154	file:
iprob	pgen/dust_diffusion.cpp	/^int iprob;$/;"	m	namespace:__anon117	file:
iprob	pgen/dust_inelastic_collision.cpp	/^int iprob;$/;"	m	namespace:__anon143	file:
iprob	pgen/dusty_kh.cpp	/^int iprob;$/;"	m	namespace:__anon129	file:
iprob	pgen/kh.cpp	/^int iprob;$/;"	m	namespace:__anon97	file:
iprob	pgen/kh_dust.cpp	/^int iprob;$/;"	m	namespace:__anon107	file:
iprob	pgen/mignone_advection.cpp	/^int iprob;$/;"	m	namespace:__anon149	file:
iprob	pgen/visc_dustfluids.cpp	/^int iprob;$/;"	m	namespace:__anon151	file:
iprob	pgen/visc_scalars.cpp	/^int iprob;$/;"	m	namespace:__anon53	file:
is	fft/athena_fft.hpp	/^  int nx[3], is[3], ie[3];$/;"	m	class:AthenaFFTIndex
is	mesh/mesh.hpp	/^  int is, ie, js, je, ks, ke;$/;"	m	class:MeshBlock
is_shear	bvals/bvals.hpp	/^  bool is_shear[2]; \/\/ inner_x1=0, outer_x1=1$/;"	m	class:BoundaryValues
ishock	pgen/quirk.cpp	/^int ishock;$/;"	m	namespace:__anon140	file:
isize	fft/plimpton/remap_2d.h	/^  int ilo,ihi,isize;$/;"	m	struct:extent_2d
isize	fft/plimpton/remap_3d.h	/^  int ilo,ihi,isize;$/;"	m	struct:extent_3d
islice	outputs/outputs.hpp	/^  int islice, jslice, kslice;$/;"	m	struct:OutputParameters
iso	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  enum DiffProcess {iso=0, aniso=1, alpha=2};$/;"	e	enum:HydroDiffusion::DiffProcess
iso_cs	hydro/rsolvers/hydro/roe.cpp	/^Real gm1, iso_cs;$/;"	m	namespace:__anon30	file:
iso_cs	hydro/rsolvers/mhd/roe_mhd.cpp	/^Real gm1, iso_cs;$/;"	m	namespace:__anon20	file:
iso_cs	pgen/dust_NSH.cpp	/^Real gm1, iso_cs;$/;"	m	namespace:__anon103	file:
iso_cs	pgen/dust_collision.cpp	/^Real v0, t0, x0, user_dt, iso_cs, gamma_gas;$/;"	m	namespace:__anon152	file:
iso_cs	pgen/dust_collision_different_Ts.cpp	/^Real v0, t0, x0, user_dt, iso_cs, gamma_gas;$/;"	m	namespace:__anon131	file:
iso_cs	pgen/dust_diffusion.cpp	/^Real nuiso, iso_cs, amp;$/;"	m	namespace:__anon117	file:
iso_cs	pgen/dust_inelastic_collision.cpp	/^Real v0, t0, x0, user_dt, iso_cs, press, gamma_gas;$/;"	m	namespace:__anon143	file:
iso_cs	pgen/dust_squaredrag.cpp	/^Real v0, t0, x0, user_dt, iso_cs, gamma_gas;$/;"	m	namespace:__anon141	file:
iso_cs	pgen/dusty_shock.cpp	/^Real user_dt, iso_cs, xshock, gamma_gas, vel_right;$/;"	m	namespace:__anon120	file:
iso_cs	pgen/dusty_soundwave.cpp	/^Real gam, gm1, iso_cs, vflow;$/;"	m	namespace:__anon105	file:
iso_cs	pgen/dusty_wave.cpp	/^Real gam,gm1,iso_cs,vflow;$/;"	m	namespace:__anon86	file:
iso_cs	pgen/dusty_wave_1d.cpp	/^Real gam, gm1, iso_cs, vflow;$/;"	m	namespace:__anon137	file:
iso_cs	pgen/hb3.cpp	/^Real gm1, iso_cs;$/;"	m	namespace:__anon58	file:
iso_cs	pgen/hgb.cpp	/^Real iso_cs, gm1, d0, p0;$/;"	m	namespace:__anon115	file:
iso_cs	pgen/jgg.cpp	/^Real iso_cs, gm1, d0, p0;$/;"	m	namespace:__anon123	file:
iso_cs	pgen/linear_wave.cpp	/^Real gam,gm1,iso_cs,vflow;$/;"	m	namespace:__anon125	file:
iso_cs	pgen/mignone_advection.cpp	/^Real iso_cs;$/;"	m	namespace:__anon149	file:
iso_cs	pgen/slotted_cylinder.cpp	/^Real radius, omega_x1, omega_x2, omega, iso_cs;$/;"	m	namespace:__anon82	file:
iso_cs	pgen/ssheet.cpp	/^Real iso_cs, gm1, d0, p0;$/;"	m	namespace:__anon95	file:
iso_cs	pgen/streaming_eigen.cpp	/^Real gm1, iso_cs;$/;"	m	namespace:__anon66	file:
iso_cs	pgen/streaming_eigen_2dust.cpp	/^Real gm1, iso_cs;$/;"	m	namespace:__anon145	file:
iso_cs	pgen/streaming_nonlinear.cpp	/^Real gm1, iso_cs;$/;"	m	namespace:__anon135	file:
iso_cs	pgen/streaming_stratified.cpp	/^Real gm1, iso_cs;$/;"	m	namespace:__anon154	file:
iso_cs2_r0	pgen/disk_dust_drift.cpp	/^Real gm0, r0, rho_0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, user_dt, iso_cs2_r0;$/;"	m	namespace:__anon64	file:
iso_cs2_r0	pgen/dust_diffusion.cpp	/^Real gm0, r0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, iso_cs2_r0;$/;"	m	namespace:__anon117	file:
iso_sound_speed_	eos/eos.hpp	/^  Real iso_sound_speed_, gamma_;         \/\/ isothermal Cs, ratio of specific heats$/;"	m	class:EquationOfState
isocs2	pgen/field_loop_poles.cpp	/^Real vy0, rho0, isocs2, gamma_gas;$/;"	m	namespace:__anon56	file:
iu	coordinates/coordinates.hpp	/^  int il, iu, jl, ju, kl, ku, ng;  \/\/ limits of indices of arrays (normal or coarse)$/;"	m	class:Coordinates
iuser_mesh_data	mesh/mesh.hpp	/^  AthenaArray<int> *iuser_mesh_data;$/;"	m	class:Mesh
iuser_meshblock_data	mesh/mesh.hpp	/^  AthenaArray<int> *iuser_meshblock_data;$/;"	m	class:MeshBlock
jacobi	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> jacobi, jacobi_n, product, lambda, lambda_inv;$/;"	m	class:DustGasDrag
jacobi_n	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> jacobi, jacobi_n, product, lambda, lambda_inv;$/;"	m	class:DustGasDrag
jcc	field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> jcc;     \/\/ cell-centered current density (for the integrator)$/;"	m	class:FieldDiffusion
je	mesh/mesh.hpp	/^  int is, ie, js, je, ks, ke;$/;"	m	class:MeshBlock
jedge_	field/field_diffusion/field_diffusion.hpp	/^  EdgeField jedge_;       \/\/ curl of B$/;"	m	class:FieldDiffusion
jfx	field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> jfx, jfy, jfz; \/\/ interface current density (for HLL Riemann solver)$/;"	m	class:FieldDiffusion
jfy	field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> jfx, jfy, jfz; \/\/ interface current density (for HLL Riemann solver)$/;"	m	class:FieldDiffusion
jfz	field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> jfx, jfy, jfz; \/\/ interface current density (for HLL Riemann solver)$/;"	m	class:FieldDiffusion
jhi	fft/plimpton/remap_2d.h	/^  int jlo,jhi,jsize;$/;"	m	struct:extent_2d
jhi	fft/plimpton/remap_3d.h	/^  int jlo,jhi,jsize;$/;"	m	struct:extent_3d
jl	coordinates/coordinates.hpp	/^  int il, iu, jl, ju, kl, ku, ng;  \/\/ limits of indices of arrays (normal or coarse)$/;"	m	class:Coordinates
jlo	fft/plimpton/remap_2d.h	/^  int jlo,jhi,jsize;$/;"	m	struct:extent_2d
jlo	fft/plimpton/remap_3d.h	/^  int jlo,jhi,jsize;$/;"	m	struct:extent_3d
jmax_recv	bvals/bvals_interfaces.hpp	/^  int jmin_recv[kMaxNeighbor], jmax_recv[kMaxNeighbor];$/;"	m	struct:ShearNeighborData
jmax_send	bvals/bvals_interfaces.hpp	/^  int jmin_send[kMaxNeighbor], jmax_send[kMaxNeighbor];$/;"	m	struct:ShearNeighborData
jmin_recv	bvals/bvals_interfaces.hpp	/^  int jmin_recv[kMaxNeighbor], jmax_recv[kMaxNeighbor];$/;"	m	struct:ShearNeighborData
jmin_send	bvals/bvals_interfaces.hpp	/^  int jmin_send[kMaxNeighbor], jmax_send[kMaxNeighbor];$/;"	m	struct:ShearNeighborData
joverlap_	bvals/bvals.hpp	/^  int joverlap_, joverlap_flux_; \/\/ # of cells the shear runs over one block$/;"	m	class:BoundaryValues
joverlap_flux_	bvals/bvals.hpp	/^  int joverlap_, joverlap_flux_; \/\/ # of cells the shear runs over one block$/;"	m	class:BoundaryValues
js	mesh/mesh.hpp	/^  int is, ie, js, je, ks, ke;$/;"	m	class:MeshBlock
jsize	fft/plimpton/remap_2d.h	/^  int jlo,jhi,jsize;$/;"	m	struct:extent_2d
jsize	fft/plimpton/remap_3d.h	/^  int jlo,jhi,jsize;$/;"	m	struct:extent_3d
jslice	outputs/outputs.hpp	/^  int islice, jslice, kslice;$/;"	m	struct:OutputParameters
ju	coordinates/coordinates.hpp	/^  int il, iu, jl, ju, kl, ku, ng;  \/\/ limits of indices of arrays (normal or coarse)$/;"	m	class:Coordinates
k1	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^static Real q0[60], q1[60], Dist[60], k1[60], k2[60], k3[60], k4[60];\/\/RK4 parameters$/;"	m	namespace:__anon68	file:
k1	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^static Real q0[60], q1[60], Dist[60], k1[60], k2[60], k3[60], k4[60];\/\/RK4 parameters$/;"	m	namespace:__anon109	file:
k2	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^static Real q0[60], q1[60], Dist[60], k1[60], k2[60], k3[60], k4[60];\/\/RK4 parameters$/;"	m	namespace:__anon68	file:
k2	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^static Real q0[60], q1[60], Dist[60], k1[60], k2[60], k3[60], k4[60];\/\/RK4 parameters$/;"	m	namespace:__anon109	file:
k3	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^static Real q0[60], q1[60], Dist[60], k1[60], k2[60], k3[60], k4[60];\/\/RK4 parameters$/;"	m	namespace:__anon68	file:
k3	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^static Real q0[60], q1[60], Dist[60], k1[60], k2[60], k3[60], k4[60];\/\/RK4 parameters$/;"	m	namespace:__anon109	file:
k4	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^static Real q0[60], q1[60], Dist[60], k1[60], k2[60], k3[60], k4[60];\/\/RK4 parameters$/;"	m	namespace:__anon68	file:
k4	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^static Real q0[60], q1[60], Dist[60], k1[60], k2[60], k3[60], k4[60];\/\/RK4 parameters$/;"	m	namespace:__anon109	file:
kMaxNeighbor	bvals/bvals_interfaces.hpp	/^  static constexpr int kMaxNeighbor = n;$/;"	m	struct:BoundaryData
kMaxNeighbor	bvals/bvals_interfaces.hpp	/^  static constexpr int kMaxNeighbor = n;$/;"	m	struct:ShearNeighborData
kNField_	task_list/task_list.hpp	/^  constexpr static int kNField_ = 2;$/;"	m	class:TaskID
kNx	fft/athena_fft.hpp	/^  int kNx[3], knx[3], kdisp[3];$/;"	m	class:FFTBlock::AthenaFFTDirection
k_adi	pgen/gr_bondi.cpp	/^Real n_adi, k_adi;  \/\/ hydro parameters$/;"	m	namespace:__anon80	file:
k_par	pgen/cpaw.cpp	/^Real lambda, k_par; \/\/ Wavelength, 2*PI\/wavelength$/;"	m	namespace:__anon88	file:
k_par	pgen/dusty_soundwave.cpp	/^Real amp, lambda, k_par;              \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	m	namespace:__anon105	file:
k_par	pgen/dusty_wave.cpp	/^Real amp, lambda, k_par; \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	m	namespace:__anon86	file:
k_par	pgen/dusty_wave_1d.cpp	/^Real amp, lambda, k_par; \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	m	namespace:__anon137	file:
k_par	pgen/linear_wave.cpp	/^Real amp, lambda, k_par; \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	m	namespace:__anon125	file:
kappa	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> kappa;     \/\/ conduction array$/;"	m	class:HydroDiffusion
kappa_aniso	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  Real kappa_iso, kappa_aniso; \/\/ thermal conduction coeff$/;"	m	class:HydroDiffusion
kappa_iso	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  Real kappa_iso, kappa_aniso; \/\/ thermal conduction coeff$/;"	m	class:HydroDiffusion
kappa_tot_	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> nu_tot_, kappa_tot_;$/;"	m	class:HydroDiffusion
kappap	pgen/dust_NSH.cpp	/^Real kappap, kappap2, AN(0.0), BN(0.0), Psi(0.0), Kai0;$/;"	m	namespace:__anon103	file:
kappap	pgen/ssheet_RWI_dust.cpp	/^kappap, kappap2, Kai0, etaVk, AN(0.0), BN(0.0), Psi(0.0), user_dt, time_drag, beta,$/;"	m	namespace:__anon90	file:
kappap	pgen/ssheet_planet_dust.cpp	/^kappap, kappap2, Kai0, etaVk, AN, BN, Psi, time_drag, user_dt, rs, gmp, gMth, t_planet_growth,$/;"	m	namespace:__anon111	file:
kappap	pgen/streaming_eigen.cpp	/^Real kappap, kappap2, AN(0.0), BN(0.0), Psi(0.0), Kai0;$/;"	m	namespace:__anon66	file:
kappap	pgen/streaming_eigen_2dust.cpp	/^Real kappap, kappap2, AN(0.0), BN(0.0), Psi(0.0), Kai0;$/;"	m	namespace:__anon145	file:
kappap	pgen/streaming_nonlinear.cpp	/^Real kappap, kappap2, AN(0.0), BN(0.0), Psi(0.0), Kai0;$/;"	m	namespace:__anon135	file:
kappap	pgen/streaming_stratified.cpp	/^Real kappap, kappap2, AN(0.0), BN(0.0), Psi(0.0), Kai0;$/;"	m	namespace:__anon154	file:
kappap2	pgen/dust_NSH.cpp	/^Real kappap, kappap2, AN(0.0), BN(0.0), Psi(0.0), Kai0;$/;"	m	namespace:__anon103	file:
kappap2	pgen/ssheet_RWI_dust.cpp	/^kappap, kappap2, Kai0, etaVk, AN(0.0), BN(0.0), Psi(0.0), user_dt, time_drag, beta,$/;"	m	namespace:__anon90	file:
kappap2	pgen/ssheet_planet_dust.cpp	/^kappap, kappap2, Kai0, etaVk, AN, BN, Psi, time_drag, user_dt, rs, gmp, gMth, t_planet_growth,$/;"	m	namespace:__anon111	file:
kappap2	pgen/streaming_eigen.cpp	/^Real kappap, kappap2, AN(0.0), BN(0.0), Psi(0.0), Kai0;$/;"	m	namespace:__anon66	file:
kappap2	pgen/streaming_eigen_2dust.cpp	/^Real kappap, kappap2, AN(0.0), BN(0.0), Psi(0.0), Kai0;$/;"	m	namespace:__anon145	file:
kappap2	pgen/streaming_nonlinear.cpp	/^Real kappap, kappap2, AN(0.0), BN(0.0), Psi(0.0), Kai0;$/;"	m	namespace:__anon135	file:
kappap2	pgen/streaming_stratified.cpp	/^Real kappap, kappap2, AN(0.0), BN(0.0), Psi(0.0), Kai0;$/;"	m	namespace:__anon154	file:
kdisp	fft/athena_fft.hpp	/^  int kNx[3], knx[3], kdisp[3];$/;"	m	class:FFTBlock::AthenaFFTDirection
ke	mesh/mesh.hpp	/^  int is, ie, js, je, ks, ke;$/;"	m	class:MeshBlock
khi	fft/plimpton/remap_3d.h	/^  int klo,khi,ksize;$/;"	m	struct:extent_3d
kl	coordinates/coordinates.hpp	/^  int il, iu, jl, ju, kl, ku, ng;  \/\/ limits of indices of arrays (normal or coarse)$/;"	m	class:Coordinates
klo	fft/plimpton/remap_3d.h	/^  int klo,khi,ksize;$/;"	m	struct:extent_3d
knx	fft/athena_fft.hpp	/^  int kNx[3], knx[3], kdisp[3];$/;"	m	class:FFTBlock::AthenaFFTDirection
ks	mesh/mesh.hpp	/^  int is, ie, js, je, ks, ke;$/;"	m	class:MeshBlock
ks_gas	pgen/disk_RWI_2D.cpp	/^A_bump, sigma_bump, r0_bump, width_vortex, eta_gas, beta_gas, ks_gas,$/;"	m	namespace:__anon101	file:
ks_gas	pgen/disk_dust_diffusion.cpp	/^Real eta_gas, beta_gas, ks_gas;$/;"	m	namespace:__anon70	file:
ks_gas	pgen/disk_dust_drift.cpp	/^Real eta_gas, beta_gas, ks_gas;$/;"	m	namespace:__anon64	file:
ks_gas	pgen/disk_streaming_cylindrical.cpp	/^Real eta_gas, beta_gas, ks_gas;$/;"	m	namespace:__anon54	file:
ks_gas	pgen/disk_streaming_spherical.cpp	/^Real eta_gas, beta_gas, ks_gas;$/;"	m	namespace:__anon75	file:
ksize	fft/plimpton/remap_3d.h	/^  int klo,khi,ksize;$/;"	m	struct:extent_3d
kslice	outputs/outputs.hpp	/^  int islice, jslice, kslice;$/;"	m	struct:OutputParameters
ku	coordinates/coordinates.hpp	/^  int il, iu, jl, ju, kl, ku, ng;  \/\/ limits of indices of arrays (normal or coarse)$/;"	m	class:Coordinates
kwave	pgen/jeans.cpp	/^Real amp, njeans, lambda, kwave; \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	m	namespace:__anon119	file:
kx	pgen/streaming_eigen.cpp	/^Real Kpar, kx, ky, kz, omg_osi, s_grow;$/;"	m	namespace:__anon66	file:
kx	pgen/streaming_eigen_2dust.cpp	/^Real Kpar, kx, ky, kz, omg_osi, s_grow;$/;"	m	namespace:__anon145	file:
ky	pgen/streaming_eigen.cpp	/^Real Kpar, kx, ky, kz, omg_osi, s_grow;$/;"	m	namespace:__anon66	file:
ky	pgen/streaming_eigen_2dust.cpp	/^Real Kpar, kx, ky, kz, omg_osi, s_grow;$/;"	m	namespace:__anon145	file:
kz	pgen/streaming_eigen.cpp	/^Real Kpar, kx, ky, kz, omg_osi, s_grow;$/;"	m	namespace:__anon66	file:
kz	pgen/streaming_eigen_2dust.cpp	/^Real Kpar, kx, ky, kz, omg_osi, s_grow;$/;"	m	namespace:__anon145	file:
l	pgen/gr_torus.cpp	/^Real r_edge, r_peak, l, r_peak_max, rho_max;  \/\/ torus parameters$/;"	m	namespace:__anon39	file:
l1	multigrid/multigrid.hpp	/^enum class MGNormType {max, l1, l2};$/;"	m	class:MGNormType
lambda	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> jacobi, jacobi_n, product, lambda, lambda_inv;$/;"	m	class:DustGasDrag
lambda	pgen/cpaw.cpp	/^Real lambda, k_par; \/\/ Wavelength, 2*PI\/wavelength$/;"	m	namespace:__anon88	file:
lambda	pgen/dusty_soundwave.cpp	/^Real amp, lambda, k_par;              \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	m	namespace:__anon105	file:
lambda	pgen/dusty_wave.cpp	/^Real amp, lambda, k_par; \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	m	namespace:__anon86	file:
lambda	pgen/dusty_wave_1d.cpp	/^Real amp, lambda, k_par; \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	m	namespace:__anon137	file:
lambda	pgen/gr_linear_wave.cpp	/^Real lambda;                  \/\/ wavespeed$/;"	m	namespace:__anon84	file:
lambda	pgen/jeans.cpp	/^Real amp, njeans, lambda, kwave; \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	m	namespace:__anon119	file:
lambda	pgen/linear_wave.cpp	/^Real amp, lambda, k_par; \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	m	namespace:__anon125	file:
lambda_inv	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> jacobi, jacobi_n, product, lambda, lambda_inv;$/;"	m	class:DustGasDrag
lambdas_m_l_	hydro/hydro.hpp	/^  AthenaArray<Real> lambdas_m_l_;  \/\/ most negative wavespeeds in left state$/;"	m	class:Hydro
lambdas_m_r_	hydro/hydro.hpp	/^  AthenaArray<Real> lambdas_m_r_;  \/\/ most negative wavespeeds in right state$/;"	m	class:Hydro
lambdas_p_l_	hydro/hydro.hpp	/^  AthenaArray<Real> lambdas_p_l_;  \/\/ most positive wavespeeds in left state$/;"	m	class:Hydro
lambdas_p_r_	hydro/hydro.hpp	/^  AthenaArray<Real> lambdas_p_r_;  \/\/ most positive wavespeeds in right state$/;"	m	class:Hydro
laplacian_l_df_fc_	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> laplacian_l_df_fc_, laplacian_r_df_fc_;$/;"	m	class:DustFluids
laplacian_l_fc_	hydro/hydro.hpp	/^  AthenaArray<Real> laplacian_l_fc_, laplacian_r_fc_;$/;"	m	class:Hydro
laplacian_l_fc_	scalars/scalars.hpp	/^  AthenaArray<Real> laplacian_l_fc_, laplacian_r_fc_;$/;"	m	class:PassiveScalars
laplacian_r_df_fc_	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> laplacian_l_df_fc_, laplacian_r_df_fc_;$/;"	m	class:DustFluids
laplacian_r_fc_	hydro/hydro.hpp	/^  AthenaArray<Real> laplacian_l_fc_, laplacian_r_fc_;$/;"	m	class:Hydro
laplacian_r_fc_	scalars/scalars.hpp	/^  AthenaArray<Real> laplacian_l_fc_, laplacian_r_fc_;$/;"	m	class:PassiveScalars
last_ave_	multigrid/multigrid.hpp	/^  Real last_ave_;$/;"	m	class:MultigridDriver
last_filename_	parameter_input.hpp	/^  std::string last_filename_;  \/\/ last input file opened, to prevent duplicate reads$/;"	m	class:ParameterInput
lb_automatic_	mesh/mesh.hpp	/^  bool lb_flag_, lb_automatic_, lb_manual_;$/;"	m	class:Mesh
lb_flag_	mesh/mesh.hpp	/^  bool lb_flag_, lb_automatic_, lb_manual_;$/;"	m	class:Mesh
lb_interval_	mesh/mesh.hpp	/^  int lb_interval_;$/;"	m	class:Mesh
lb_manual_	mesh/mesh.hpp	/^  bool lb_flag_, lb_automatic_, lb_manual_;$/;"	m	class:Mesh
lb_time	task_list/task_list.hpp	/^  bool lb_time; \/\/!> flag for automatic load balancing based on timing$/;"	m	struct:Task
lb_time_	mesh/mesh.hpp	/^  double cost_, lb_time_;$/;"	m	class:MeshBlock
lb_tolerance_	mesh/mesh.hpp	/^  double lb_tolerance_;$/;"	m	class:Mesh
lem	pgen/dusty_wave.cpp	/^Real ev[NWAVE], rem[NWAVE][NWAVE], lem[NWAVE][NWAVE];$/;"	m	namespace:__anon86	file:
lem	pgen/linear_wave.cpp	/^Real ev[NWAVE], rem[NWAVE][NWAVE], lem[NWAVE][NWAVE];$/;"	m	namespace:__anon125	file:
len_	field/field_diffusion/field_diffusion.hpp	/^  AthenaArray<Real> dx1_, dx2_, dx3_, len_;$/;"	m	class:FieldDiffusion
length1	fft/plimpton/fft_2d.h	/^  int length1,length2;              \/* length of 1st and 2nd FFTs *\/$/;"	m	struct:fft_plan_2d
length1	fft/plimpton/fft_3d.h	/^  int length1,length2,length3;      \/* length of 1st,2nd,3rd FFTs *\/$/;"	m	struct:fft_plan_3d
length2	fft/plimpton/fft_2d.h	/^  int length1,length2;              \/* length of 1st and 2nd FFTs *\/$/;"	m	struct:fft_plan_2d
length2	fft/plimpton/fft_3d.h	/^  int length1,length2,length3;      \/* length of 1st,2nd,3rd FFTs *\/$/;"	m	struct:fft_plan_3d
length3	fft/plimpton/fft_3d.h	/^  int length1,length2,length3;      \/* length of 1st,2nd,3rd FFTs *\/$/;"	m	struct:fft_plan_3d
level	athena.hpp	/^  int level;$/;"	m	struct:LogicalLocation
level	bvals/bvals_interfaces.hpp	/^  int level;   \/\/!< refinement (logical, not physical) level of neighbor$/;"	m	struct:SimpleNeighborBlock
lid	bvals/bvals_interfaces.hpp	/^  int lid;     \/\/!< local ID of neighbor$/;"	m	struct:SimpleNeighborBlock
lid	mesh/mesh.hpp	/^  int gid, lid;$/;"	m	class:MeshBlock
loc	bvals/bvals.hpp	/^  LogicalLocation loc;$/;"	m	class:BoundaryBase
loc	mesh/mesh.hpp	/^  LogicalLocation loc;$/;"	m	class:MeshBlock
loc	multigrid/multigrid.hpp	/^  LogicalLocation loc;$/;"	m	struct:MGOctet
loc_	fft/athena_fft.hpp	/^  LogicalLocation loc_;$/;"	m	class:FFTBlock::AthenaFFTDirection
loc_	mesh/meshblock_tree.hpp	/^  LogicalLocation loc_;$/;"	m	class:MeshBlockTree
loc_	multigrid/multigrid.hpp	/^  LogicalLocation loc_;$/;"	m	class:Multigrid
loc_shear	bvals/bvals.hpp	/^  std::int64_t loc_shear[2];  \/\/ x1 LogicalLocation of block(s) on inner\/outer shear bndry$/;"	m	class:BoundaryValues
lock_	parameter_input.hpp	/^  omp_lock_t lock_;$/;"	m	class:ParameterInput
loclist	mesh/mesh.hpp	/^  LogicalLocation *loclist;$/;"	m	class:Mesh
locrootlevel_	multigrid/multigrid.hpp	/^  int locrootlevel_, nrootlevel_, nmblevel_, ntotallevel_, nreflevel_, maxreflevel_;$/;"	m	class:MultigridDriver
logEgasMax	utils/interp_table.hpp	/^  Real logEgasMin, logEgasMax;$/;"	m	class:EosTable
logEgasMin	utils/interp_table.hpp	/^  Real logEgasMin, logEgasMax;$/;"	m	class:EosTable
logRhoMax	utils/interp_table.hpp	/^  Real logRhoMin, logRhoMax;$/;"	m	class:EosTable
logRhoMin	utils/interp_table.hpp	/^  Real logRhoMin, logRhoMax;$/;"	m	class:EosTable
log_h_edge	pgen/gr_torus.cpp	/^Real log_h_edge, log_h_peak;                  \/\/ calculated torus parameters$/;"	m	namespace:__anon39	file:
log_h_peak	pgen/gr_torus.cpp	/^Real log_h_edge, log_h_peak;                  \/\/ calculated torus parameters$/;"	m	namespace:__anon39	file:
lower_altitude_damping	pgen/disk_VSI.cpp	/^theta_upper_damping, theta_lower_damping, upper_altitude_damping, lower_altitude_damping,$/;"	m	namespace:__anon133	file:
lu_matrix	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> idx_vector, lu_matrix;$/;"	m	class:DustGasDrag
lu_tol	reconstruct/reconstruction.cpp	/^constexpr Real lu_tol = 3e-16;$/;"	m	namespace:__anon7	file:
lx1	athena.hpp	/^  std::int64_t lx1, lx2, lx3;$/;"	m	struct:LogicalLocation
lx2	athena.hpp	/^  std::int64_t lx1, lx2, lx3;$/;"	m	struct:LogicalLocation
lx3	athena.hpp	/^  std::int64_t lx1, lx2, lx3;$/;"	m	struct:LogicalLocation
m	pgen/gr_bondi.cpp	/^Real m, a;          \/\/ black hole mass and spin$/;"	m	namespace:__anon80	file:
m	pgen/gr_mhd_inflow.cpp	/^Real m;                           \/\/ mass M of black hole$/;"	m	namespace:__anon72	file:
m	pgen/gr_torus.cpp	/^Real m, a;                                    \/\/ black hole parameters$/;"	m	namespace:__anon39	file:
m_coord	pgen/mignone_advection.cpp	/^int m_coord;$/;"	m	namespace:__anon149	file:
m_p0	pgen/inject_pebble_3D.cpp	/^Real f_ICE_inter0, m_p0, rho_sil_inter, rho_ice_inter;$/;"	m	namespace:__anon62	file:
main	main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main_int	athena.hpp	/^enum class TaskType {op_split_before, main_int, op_split_after};$/;"	m	class:TaskType
main_int	mesh/mesh.cpp	/^    sts_loc(TaskType::main_int),$/;"	v
main_stage	task_list/task_list.hpp	/^    bool main_stage, orbital_stage; \/\/ flag for whether the main calculation is done$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
mask	utils/utils.hpp	/^static sigset_t mask;$/;"	m	namespace:SignalHandler
mass_flux_fc	scalars/scalars.hpp	/^  AthenaArray<Real> mass_flux_fc[3];  \/\/ deep copy of Hydro intermediate flux quantities$/;"	m	class:PassiveScalars
max	athena.hpp	/^enum class UserHistoryOperation {sum, max, min};$/;"	m	class:UserHistoryOperation
max	multigrid/multigrid.hpp	/^enum class MGNormType {max, l1, l2};$/;"	m	class:MGNormType
max_dfvdt	pgen/inject_pebble_3D.cpp	/^Real min_tol, max_dfvdt, dust_start_injection, injection_Tsoft;$/;"	m	namespace:__anon62	file:
max_len_parname	parameter_input.hpp	/^  std::size_t max_len_parname;  \/\/ length of longest param_name, for nice-looking output$/;"	m	class:InputBlock
max_len_parvalue	parameter_input.hpp	/^  std::size_t max_len_parvalue; \/\/ length of longest param_value, to format outputs$/;"	m	class:InputBlock
max_level	mesh/mesh.hpp	/^  int root_level, max_level, current_level;$/;"	m	class:Mesh
max_name_length	outputs/outputs.hpp	/^  static const int max_name_length = 20;  \/\/ maximum length of names excluding \\0$/;"	m	class:ATHDF5Output
max_ofc_coarse	orbital_advection/orbital_advection.hpp	/^  int max_ofc_coarse, min_ofc_coarse;$/;"	m	class:OrbitalTransform::OrbitalAdvection
max_off_coarse	orbital_advection/orbital_advection.hpp	/^  int max_off_coarse, min_off_coarse;$/;"	m	class:OrbitalTransform::OrbitalAdvection
max_phys_id	bvals/cc/bvals_cc.hpp	/^  static constexpr int max_phys_id = 4;$/;"	m	class:CellCenteredBoundaryVariable
max_phys_id	bvals/fc/bvals_fc.hpp	/^  static constexpr int max_phys_id = 5;$/;"	m	class:FaceCenteredBoundaryVariable
max_phys_id	bvals/orbital/bvals_orbital.hpp	/^  static constexpr int max_phys_id = 2;$/;"	m	class:OrbitalBoundaryCommunication
maxneighbor_	bvals/bvals.hpp	/^  static int maxneighbor_;$/;"	m	class:BoundaryBase
maxneighbor_	bvals/bvals_base.cpp	/^int BoundaryBase::maxneighbor_;$/;"	m	class:BoundaryBase	file:
maxreflevel_	multigrid/multigrid.hpp	/^  int locrootlevel_, nrootlevel_, nmblevel_, ntotallevel_, nreflevel_, maxreflevel_;$/;"	m	class:MultigridDriver
memory	fft/plimpton/remap_2d.h	/^  int memory;                       \/* user provides scratch space or not *\/$/;"	m	struct:remap_plan_2d
memory	fft/plimpton/remap_3d.h	/^  int memory;                       \/* user provides scratch space or not *\/$/;"	m	struct:remap_plan_3d
mesh_bcs	mesh/mesh.hpp	/^  BoundaryFlag mesh_bcs[6];$/;"	m	class:Mesh
mesh_init	athena.hpp	/^enum class BoundaryCommSubset {mesh_init, gr_amr, all, orbital};$/;"	m	class:BoundaryCommSubset
mesh_size	mesh/mesh.hpp	/^  RegionSize mesh_size;$/;"	m	class:Mesh
method_id_	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  int         method_id_;         \/\/ The integrator method id$/;"	m	class:DustGasDrag
metric_cell_i1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_cell_i1_, metric_cell_i2_;$/;"	m	class:Coordinates
metric_cell_i2_	coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_cell_i1_, metric_cell_i2_;$/;"	m	class:Coordinates
metric_cell_j1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_cell_j1_, metric_cell_j2_;$/;"	m	class:Coordinates
metric_cell_j2_	coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_cell_j1_, metric_cell_j2_;$/;"	m	class:Coordinates
metric_cell_kji_	coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_cell_kji_;$/;"	m	class:Coordinates
metric_face1_i1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face1_i1_, metric_face1_i2_;$/;"	m	class:Coordinates
metric_face1_i2_	coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face1_i1_, metric_face1_i2_;$/;"	m	class:Coordinates
metric_face1_j1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face1_j1_, metric_face1_j2_;$/;"	m	class:Coordinates
metric_face1_j2_	coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face1_j1_, metric_face1_j2_;$/;"	m	class:Coordinates
metric_face1_kji_	coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face1_kji_;$/;"	m	class:Coordinates
metric_face2_i1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face2_i1_, metric_face2_i2_;$/;"	m	class:Coordinates
metric_face2_i2_	coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face2_i1_, metric_face2_i2_;$/;"	m	class:Coordinates
metric_face2_j1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face2_j1_, metric_face2_j2_;$/;"	m	class:Coordinates
metric_face2_j2_	coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face2_j1_, metric_face2_j2_;$/;"	m	class:Coordinates
metric_face2_kji_	coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face2_kji_;$/;"	m	class:Coordinates
metric_face3_i1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face3_i1_, metric_face3_i2_;$/;"	m	class:Coordinates
metric_face3_i2_	coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face3_i1_, metric_face3_i2_;$/;"	m	class:Coordinates
metric_face3_j1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face3_j1_, metric_face3_j2_;$/;"	m	class:Coordinates
metric_face3_j2_	coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face3_j1_, metric_face3_j2_;$/;"	m	class:Coordinates
metric_face3_kji_	coordinates/coordinates.hpp	/^  AthenaArray<Real> metric_face3_kji_;$/;"	m	class:Coordinates
mg_phys_id_	multigrid/multigrid.hpp	/^  int mg_phys_id_;$/;"	m	class:MultigridDriver
mgcomm_	bvals/cc/mg/bvals_mg.hpp	/^  MPI_Comm mgcomm_;$/;"	m	class:MGBoundaryValues
mggrav	athena.hpp	/^enum class BoundaryQuantity {cc, fc, cc_flcor, fc_flcor, mggrav,$/;"	m	class:BoundaryQuantity
mggrav_f	athena.hpp	/^                             mggrav_f, orbital_cc, orbital_fc};$/;"	m	class:BoundaryQuantity
mgroot_	multigrid/multigrid.hpp	/^  Multigrid *mgroot_;$/;"	m	class:MultigridDriver
mgtlist_	multigrid/multigrid.hpp	/^  MultigridTaskList *mgtlist_;$/;"	m	class:MultigridDriver
mid1_plan	fft/plimpton/fft_3d.h	/^  struct remap_plan_3d *mid1_plan;      \/* remap from 1st -> 2nd FFTs *\/$/;"	m	struct:fft_plan_3d	typeref:struct:fft_plan_3d::remap_plan_3d
mid1_target	fft/plimpton/fft_3d.h	/^  int mid1_target,mid2_target;$/;"	m	struct:fft_plan_3d
mid2_plan	fft/plimpton/fft_3d.h	/^  struct remap_plan_3d *mid2_plan;      \/* remap from 2nd -> 3rd FFTs *\/$/;"	m	struct:fft_plan_3d	typeref:struct:fft_plan_3d::remap_plan_3d
mid2_target	fft/plimpton/fft_3d.h	/^  int mid1_target,mid2_target;$/;"	m	struct:fft_plan_3d
mid_plan	fft/plimpton/fft_2d.h	/^  struct remap_plan_2d *mid_plan;       \/* remap from 1st -> 2nd FFTs *\/$/;"	m	struct:fft_plan_2d	typeref:struct:fft_plan_2d::remap_plan_2d
mid_target	fft/plimpton/fft_2d.h	/^  int pre_target,mid_target;        \/* where to put remap results *\/$/;"	m	struct:fft_plan_2d
min_dt	orbital_advection/orbital_advection.hpp	/^  Real min_dt;$/;"	m	class:OrbitalTransform::OrbitalAdvection
min_ofc_coarse	orbital_advection/orbital_advection.hpp	/^  int max_ofc_coarse, min_ofc_coarse;$/;"	m	class:OrbitalTransform::OrbitalAdvection
min_off_coarse	orbital_advection/orbital_advection.hpp	/^  int max_off_coarse, min_off_coarse;$/;"	m	class:OrbitalTransform::OrbitalAdvection
min_tol	pgen/inject_pebble_3D.cpp	/^Real min_tol, max_dfvdt, dust_start_injection, injection_Tsoft;$/;"	m	namespace:__anon62	file:
mmax_arr	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<int>  mmax_arr;$/;"	m	class:DustGasDrag
mode_	multigrid/multigrid.hpp	/^  int nranks_, nvar_, mode_;$/;"	m	class:MultigridDriver
mom1_prim	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> mom1_prim,   mom2_prim,   mom3_prim;$/;"	m	class:DustGasDrag
mom1_prim_n	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> mom1_prim_n, mom2_prim_n, mom3_prim_n;$/;"	m	class:DustGasDrag
mom2_prim	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> mom1_prim,   mom2_prim,   mom3_prim;$/;"	m	class:DustGasDrag
mom2_prim_n	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> mom1_prim_n, mom2_prim_n, mom3_prim_n;$/;"	m	class:DustGasDrag
mom3_prim	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> mom1_prim,   mom2_prim,   mom3_prim;$/;"	m	class:DustGasDrag
mom3_prim_n	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> mom1_prim_n, mom2_prim_n, mom3_prim_n;$/;"	m	class:DustGasDrag
mom_correct_Flag	pgen/inject_pebble_3D.cpp	/^bool size_change, mom_correct_Flag;$/;"	m	namespace:__anon62	file:
mphi	pgen/magnoh.cpp	/^Real alpha, beta, rho0, P0, pcoeff, vr, perturb, mphi;$/;"	m	namespace:__anon92	file:
mplanet	pgen/inject_pebble_3D.cpp	/^Real mplanet, tsoft, rsoft, gamma_gas, x1min, x1max;$/;"	m	namespace:__anon62	file:
msize_	fft/athena_fft.hpp	/^  RegionSize msize_, bsize_;$/;"	m	class:FFTBlock::AthenaFFTDirection
mu	pgen/disk_3d_mhd_dust.cpp	/^Real beta, mu, Am_in, Am0, Bz0, A30, RBmin, taddBp;$/;"	m	namespace:__anon60	file:
muj	mesh/mesh.hpp	/^  Real muj, nuj, muj_tilde, gammaj_tilde;$/;"	m	class:Mesh
muj_tilde	mesh/mesh.hpp	/^  Real muj, nuj, muj_tilde, gammaj_tilde;$/;"	m	class:Mesh
multilevel	mesh/mesh.hpp	/^  const bool adaptive, multilevel;$/;"	m	class:Mesh
mx	hydro/rsolvers/mhd/hlld.cpp	/^  Real d, mx, my, mz, e, by, bz;$/;"	m	struct:Cons1D	file:
mx	hydro/rsolvers/mhd/hlld_backup.cpp	/^  Real d, mx, my, mz, e, by, bz;$/;"	m	struct:Cons1D	file:
mx	hydro/rsolvers/mhd/hlld_iso.cpp	/^  Real d, mx, my, mz, by, bz;$/;"	m	struct:Cons1D	file:
mx	hydro/rsolvers/mhd/lhlld.cpp	/^  Real d, mx, my, mz, e, by, bz;$/;"	m	struct:Cons1D	file:
my	hydro/rsolvers/mhd/hlld.cpp	/^  Real d, mx, my, mz, e, by, bz;$/;"	m	struct:Cons1D	file:
my	hydro/rsolvers/mhd/hlld_backup.cpp	/^  Real d, mx, my, mz, e, by, bz;$/;"	m	struct:Cons1D	file:
my	hydro/rsolvers/mhd/hlld_iso.cpp	/^  Real d, mx, my, mz, by, bz;$/;"	m	struct:Cons1D	file:
my	hydro/rsolvers/mhd/lhlld.cpp	/^  Real d, mx, my, mz, e, by, bz;$/;"	m	struct:Cons1D	file:
my_blocks	mesh/mesh.hpp	/^  AthenaArray<MeshBlock*> my_blocks;$/;"	m	class:Mesh
my_rank	globals.cpp	/^int my_rank;         \/\/ MPI rank of this process$/;"	m	namespace:Globals	file:
mz	hydro/rsolvers/mhd/hlld.cpp	/^  Real d, mx, my, mz, e, by, bz;$/;"	m	struct:Cons1D	file:
mz	hydro/rsolvers/mhd/hlld_backup.cpp	/^  Real d, mx, my, mz, e, by, bz;$/;"	m	struct:Cons1D	file:
mz	hydro/rsolvers/mhd/hlld_iso.cpp	/^  Real d, mx, my, mz, by, bz;$/;"	m	struct:Cons1D	file:
mz	hydro/rsolvers/mhd/lhlld.cpp	/^  Real d, mx, my, mz, e, by, bz;$/;"	m	struct:Cons1D	file:
n0	pgen/disk_VSI.cpp	/^int n0, nvar, dowrite, file_number, out_level;$/;"	m	namespace:__anon133	file:
nEgas	utils/interp_table.hpp	/^  int nRho, nEgas, nVar;$/;"	m	class:EosTable
nRho	utils/interp_table.hpp	/^  int nRho, nEgas, nVar;$/;"	m	class:EosTable
nVar	utils/interp_table.hpp	/^  int nRho, nEgas, nVar;$/;"	m	class:EosTable
n_adi	pgen/gr_bondi.cpp	/^Real n_adi, k_adi;  \/\/ hydro parameters$/;"	m	namespace:__anon80	file:
name	outputs/outputs.hpp	/^  std::string name;$/;"	m	struct:OutputData
nbdel	mesh/mesh.hpp	/^  int nbtotal, nblocal, nbnew, nbdel;$/;"	m	class:Mesh
nblevel	bvals/bvals.hpp	/^  int nblevel[3][3][3];$/;"	m	class:BoundaryBase
nblist	mesh/mesh.hpp	/^  int *nslist, *ranklist, *nblist;$/;"	m	class:Mesh
nblist_	fft/athena_fft.hpp	/^  int *ranklist_, *nslist_, *nblist_;$/;"	m	class:FFTBlock::FFTDriver
nblist_	multigrid/multigrid.hpp	/^  int *nslist_, *nblist_, *nvlist_, *nvslist_, *nvlisti_, *nvslisti_, *ranklist_;$/;"	m	class:MultigridDriver
nblocal	mesh/mesh.hpp	/^  int nbtotal, nblocal, nbnew, nbdel;$/;"	m	class:Mesh
nblocks_	fft/athena_fft.hpp	/^  int nranks_, nblocks_;$/;"	m	class:FFTBlock::FFTDriver
nblx2	bvals/bvals.hpp	/^  std::int64_t nblx2;$/;"	m	class:BoundaryValues
nbmax	bvals/bvals_interfaces.hpp	/^  int nbmax;  \/\/!> actual maximum number of neighboring MeshBlocks$/;"	m	struct:BoundaryData
nbnew	mesh/mesh.hpp	/^  int nbtotal, nblocal, nbnew, nbdel;$/;"	m	class:Mesh
nbtotal	mesh/mesh.hpp	/^  int nbtotal, nblocal, nbnew, nbdel;$/;"	m	class:Mesh
nc1	coordinates/coordinates.hpp	/^  int nc1, nc2, nc3;               \/\/ # cells in each dir of arrays (normal or coarse)$/;"	m	class:Coordinates
nc1	orbital_advection/orbital_advection.hpp	/^  int nc1, nc2, nc3;$/;"	m	class:OrbitalTransform::OrbitalAdvection
nc2	coordinates/coordinates.hpp	/^  int nc1, nc2, nc3;               \/\/ # cells in each dir of arrays (normal or coarse)$/;"	m	class:Coordinates
nc2	orbital_advection/orbital_advection.hpp	/^  int nc1, nc2, nc3;$/;"	m	class:OrbitalTransform::OrbitalAdvection
nc3	coordinates/coordinates.hpp	/^  int nc1, nc2, nc3;               \/\/ # cells in each dir of arrays (normal or coarse)$/;"	m	class:Coordinates
nc3	orbital_advection/orbital_advection.hpp	/^  int nc1, nc2, nc3;$/;"	m	class:OrbitalTransform::OrbitalAdvection
ncc1	mesh/mesh.hpp	/^  int ncc1, ncc2, ncc3;$/;"	m	class:MeshBlock
ncc2	mesh/mesh.hpp	/^  int ncc1, ncc2, ncc3;$/;"	m	class:MeshBlock
ncc3	mesh/mesh.hpp	/^  int ncc1, ncc2, ncc3;$/;"	m	class:MeshBlock
ncells1	mesh/mesh.hpp	/^  int ncells1, ncells2, ncells3;$/;"	m	class:MeshBlock
ncells2	mesh/mesh.hpp	/^  int ncells1, ncells2, ncells3;$/;"	m	class:MeshBlock
ncells3	mesh/mesh.hpp	/^  int ncells1, ncells2, ncells3;$/;"	m	class:MeshBlock
ncoarse_	multigrid/multigrid.hpp	/^  bool ncoarse_[3][3][3];$/;"	m	class:MultigridDriver
ncycle	mesh/mesh.hpp	/^  int nlim, ncycle, ncycle_out, dt_diagnostics;$/;"	m	class:Mesh
ncycle_out	mesh/mesh.hpp	/^  int nlim, ncycle, ncycle_out, dt_diagnostics;$/;"	m	class:Mesh
nderef	mesh/mesh.hpp	/^  int *nref, *nderef;$/;"	m	class:Mesh
ndim	mesh/mesh.hpp	/^  const int ndim;     \/\/ number of dimensions$/;"	m	class:Mesh
nedge_	bvals/bvals.hpp	/^  int nface_, nedge_;         \/\/ used only in fc\/flux_correction_fc.cpp calculations$/;"	m	class:BoundaryValues
nedge_fine_	bvals/fc/bvals_fc.hpp	/^  int nedge_fine_[12];$/;"	m	class:FaceCenteredBoundaryVariable
neighbor	bvals/bvals.hpp	/^  NeighborBlock neighbor[56];$/;"	m	class:BoundaryBase
neighbor_rflag_	mesh/mesh_refinement.hpp	/^  int refine_flag_, neighbor_rflag_, deref_count_, deref_threshold_;$/;"	m	class:MeshRefinement
new_block_dt_	mesh/mesh.hpp	/^  Real new_block_dt_, new_block_dt_hyperbolic_, new_block_dt_parabolic_,$/;"	m	class:MeshBlock
new_block_dt_hyperbolic_	mesh/mesh.hpp	/^  Real new_block_dt_, new_block_dt_hyperbolic_, new_block_dt_parabolic_,$/;"	m	class:MeshBlock
new_block_dt_parabolic_	mesh/mesh.hpp	/^  Real new_block_dt_, new_block_dt_hyperbolic_, new_block_dt_parabolic_,$/;"	m	class:MeshBlock
new_block_dt_user_	mesh/mesh.hpp	/^    new_block_dt_user_;$/;"	m	class:MeshBlock
next_phys_id_	mesh/mesh.hpp	/^  int next_phys_id_; \/\/ next unused value for encoding final component of MPI tag bitfield$/;"	m	class:Mesh
next_time	outputs/outputs.hpp	/^  Real next_time, dt;$/;"	m	struct:OutputParameters
next_time	pgen/disk_VSI.cpp	/^prev_time, curr_time, next_time, edt;$/;"	m	namespace:__anon133	file:
nface_	bvals/bvals.hpp	/^  int nface_, nedge_;         \/\/ used only in fc\/flux_correction_fc.cpp calculations$/;"	m	class:BoundaryValues
nfast	fft/plimpton/pack_2d.h	/^  int nfast;                 \/* # of elements in fast index *\/$/;"	m	struct:pack_plan_2d
nfast	fft/plimpton/pack_3d.h	/^  int nfast;                 \/* # of elements in fast index *\/$/;"	m	struct:pack_plan_3d
ng	coordinates/coordinates.hpp	/^  int il, iu, jl, ju, kl, ku, ng;  \/\/ limits of indices of arrays (normal or coarse)$/;"	m	class:Coordinates
ngh_	multigrid/multigrid.hpp	/^  int nlevel_, ngh_, nvar_, current_level_;$/;"	m	class:Multigrid
nhigh	fft/turbulence.hpp	/^  int nlow, nhigh;$/;"	m	class:TurbulenceDriver
ni	bvals/bvals.hpp	/^  static NeighborIndexes ni[56];$/;"	m	class:BoundaryBase
ni	bvals/bvals_base.cpp	/^NeighborIndexes BoundaryBase::ni[56];$/;"	m	class:BoundaryBase	file:
ni	bvals/bvals_interfaces.hpp	/^  NeighborIndexes ni;$/;"	m	struct:NeighborBlock
nint_user_mesh_data_	mesh/mesh.hpp	/^  int nreal_user_mesh_data_, nint_user_mesh_data_;$/;"	m	class:Mesh
nint_user_meshblock_data_	mesh/mesh.hpp	/^  int nreal_user_meshblock_data_, nint_user_meshblock_data_;$/;"	m	class:MeshBlock
njeans	pgen/jeans.cpp	/^Real amp, njeans, lambda, kwave; \/\/ amplitude, Wavelength, 2*PI\/wavelength$/;"	m	namespace:__anon119	file:
nl_	bvals/cc/bvals_cc.hpp	/^  int nl_, nu_;$/;"	m	class:CellCenteredBoundaryVariable
nleaf_	mesh/meshblock_tree.cpp	/^int MeshBlockTree::nleaf_;$/;"	m	class:MeshBlockTree	file:
nleaf_	mesh/meshblock_tree.hpp	/^  static int nleaf_;$/;"	m	class:MeshBlockTree
nlevel_	multigrid/multigrid.hpp	/^  int nlevel_, ngh_, nvar_, current_level_;$/;"	m	class:Multigrid
nlim	mesh/mesh.hpp	/^  int nlim, ncycle, ncycle_out, dt_diagnostics;$/;"	m	class:Mesh
nlow	fft/turbulence.hpp	/^  int nlow, nhigh;$/;"	m	class:TurbulenceDriver
nmb	fft/athena_fft.hpp	/^  int npx1, npx2, npx3, nmb;$/;"	m	class:FFTBlock::FFTDriver
nmblevel_	multigrid/multigrid.hpp	/^  int locrootlevel_, nrootlevel_, nmblevel_, ntotallevel_, nreflevel_, maxreflevel_;$/;"	m	class:MultigridDriver
nmid	fft/plimpton/pack_3d.h	/^  int nmid;                  \/* # of elements in mid index *\/$/;"	m	struct:pack_plan_3d
nneighbor	bvals/bvals.hpp	/^  int nneighbor;$/;"	m	class:BoundaryBase
noctets_	multigrid/multigrid.hpp	/^  int *noctets_, *prevnoct_;$/;"	m	class:MultigridDriver
none	bvals/bvals_interfaces.hpp	/^enum class NeighborConnect {none, face, edge, corner}; \/\/ degenerate\/shared part of block$/;"	m	class:NeighborConnect
none	orbital_advection/orbital_advection.hpp	/^enum class OrbitalTransform {none=0, prim=1, cons=2, all=3};$/;"	m	class:OrbitalTransform
norm	fft/plimpton/fft_2d.h	/^  double norm;                      \/* normalization factor for rescaling *\/$/;"	m	struct:fft_plan_2d
norm	fft/plimpton/fft_3d.h	/^  double norm;                      \/* normalization factor for rescaling *\/$/;"	m	struct:fft_plan_3d
norm_factor_	fft/athena_fft.hpp	/^  Real norm_factor_;$/;"	m	class:FFTBlock::AthenaFFTDirection
normal_bb_	eos/eos.hpp	/^  AthenaArray<Real> normal_bb_;          \/\/ normal-frame fields, used in relativistic MHD$/;"	m	class:EquationOfState
normal_dd_	eos/eos.hpp	/^  AthenaArray<Real> normal_dd_;          \/\/ normal-frame densities, used in relativity$/;"	m	class:EquationOfState
normal_ee_	eos/eos.hpp	/^  AthenaArray<Real> normal_ee_;          \/\/ normal-frame energies, used in relativity$/;"	m	class:EquationOfState
normal_mm_	eos/eos.hpp	/^  AthenaArray<Real> normal_mm_;          \/\/ normal-frame momenta, used in relativity$/;"	m	class:EquationOfState
normal_tt_	eos/eos.hpp	/^  AthenaArray<Real> normal_tt_;          \/\/ normal-frame M.B, used in relativistic MHD$/;"	m	class:EquationOfState
normnum	fft/plimpton/fft_2d.h	/^  int normnum;                      \/* # of values to rescale *\/$/;"	m	struct:fft_plan_2d
normnum	fft/plimpton/fft_3d.h	/^  int normnum;                      \/* # of values to rescale *\/$/;"	m	struct:fft_plan_3d
np	fft/athena_fft.hpp	/^  int np[3], ip[3];$/;"	m	class:AthenaFFTIndex
npermute_	fft/athena_fft.hpp	/^  int npermute_, swap_;$/;"	m	class:AthenaFFTIndex
npx1	fft/athena_fft.hpp	/^  int npx1, npx2, npx3, nmb;$/;"	m	class:FFTBlock::FFTDriver
npx2	fft/athena_fft.hpp	/^  int npx1, npx2, npx3, nmb;$/;"	m	class:FFTBlock::FFTDriver
npx3	fft/athena_fft.hpp	/^  int npx1, npx2, npx3, nmb;$/;"	m	class:FFTBlock::FFTDriver
nqty	fft/plimpton/pack_2d.h	/^  int nqty;                  \/* # of values\/element *\/$/;"	m	struct:pack_plan_2d
nqty	fft/plimpton/pack_3d.h	/^  int nqty;                  \/* # of values\/element *\/$/;"	m	struct:pack_plan_3d
nranks	globals.cpp	/^int nranks;          \/\/ total number of MPI ranks$/;"	m	namespace:Globals	file:
nranks_	fft/athena_fft.hpp	/^  int nranks_, nblocks_;$/;"	m	class:FFTBlock::FFTDriver
nranks_	multigrid/multigrid.hpp	/^  int nranks_, nvar_, mode_;$/;"	m	class:MultigridDriver
nrbx1	mesh/mesh.hpp	/^  int nrbx1, nrbx2, nrbx3;$/;"	m	class:Mesh
nrbx1_	multigrid/multigrid.hpp	/^  int nrbx1_, nrbx2_, nrbx3_;$/;"	m	class:MultigridDriver
nrbx2	mesh/mesh.hpp	/^  int nrbx1, nrbx2, nrbx3;$/;"	m	class:Mesh
nrbx2_	multigrid/multigrid.hpp	/^  int nrbx1_, nrbx2_, nrbx3_;$/;"	m	class:MultigridDriver
nrbx3	mesh/mesh.hpp	/^  int nrbx1, nrbx2, nrbx3;$/;"	m	class:Mesh
nrbx3_	multigrid/multigrid.hpp	/^  int nrbx1_, nrbx2_, nrbx3_;$/;"	m	class:MultigridDriver
nreal_user_mesh_data_	mesh/mesh.hpp	/^  int nreal_user_mesh_data_, nint_user_mesh_data_;$/;"	m	class:Mesh
nreal_user_meshblock_data_	mesh/mesh.hpp	/^  int nreal_user_meshblock_data_, nint_user_meshblock_data_;$/;"	m	class:MeshBlock
nrecv	fft/plimpton/remap_2d.h	/^  int nrecv;                        \/* # of recvs from other procs *\/$/;"	m	struct:remap_plan_2d
nrecv	fft/plimpton/remap_3d.h	/^  int nrecv;                        \/* # of recvs from other procs *\/$/;"	m	struct:remap_plan_3d
nref	mesh/mesh.hpp	/^  int *nref, *nderef;$/;"	m	class:Mesh
nreflevel_	multigrid/multigrid.hpp	/^  int locrootlevel_, nrootlevel_, nmblevel_, ntotallevel_, nreflevel_, maxreflevel_;$/;"	m	class:MultigridDriver
nrootlevel_	multigrid/multigrid.hpp	/^  int locrootlevel_, nrootlevel_, nmblevel_, ntotallevel_, nreflevel_, maxreflevel_;$/;"	m	class:MultigridDriver
nsend	fft/plimpton/remap_2d.h	/^  int nsend;                        \/* # of sends to other procs *\/$/;"	m	struct:remap_plan_2d
nsend	fft/plimpton/remap_3d.h	/^  int nsend;                        \/* # of sends to other procs *\/$/;"	m	struct:remap_plan_3d
nsignal	utils/utils.hpp	/^const int nsignal = 3;$/;"	m	namespace:SignalHandler
nslist	mesh/mesh.hpp	/^  int *nslist, *ranklist, *nblist;$/;"	m	class:Mesh
nslist_	fft/athena_fft.hpp	/^  int *ranklist_, *nslist_, *nblist_;$/;"	m	class:FFTBlock::FFTDriver
nslist_	multigrid/multigrid.hpp	/^  int *nslist_, *nblist_, *nvlist_, *nvslist_, *nvlisti_, *nvslisti_, *ranklist_;$/;"	m	class:MultigridDriver
nslow	fft/plimpton/pack_2d.h	/^  int nslow;                 \/* # of elements in slow index *\/$/;"	m	struct:pack_plan_2d
nslow	fft/plimpton/pack_3d.h	/^  int nslow;                 \/* # of elements in slow index *\/$/;"	m	struct:pack_plan_3d
nstages	task_list/task_list.hpp	/^  int nstages;    \/\/!> number of times the tasklist is repeated per each full timestep$/;"	m	class:TaskList
nstages_main	task_list/task_list.hpp	/^  int nstages_main; \/\/ number of stages labeled main_stage$/;"	m	class:TimeIntegratorTaskList
nstride	fft/plimpton/pack_2d.h	/^  int nstride;               \/* stride between succesive slow indices *\/$/;"	m	struct:pack_plan_2d
nstride_line	fft/plimpton/pack_3d.h	/^  int nstride_line;          \/* stride between successive mid indices *\/$/;"	m	struct:pack_plan_3d
nstride_plane	fft/plimpton/pack_3d.h	/^  int nstride_plane;         \/* stride between successive slow indices *\/$/;"	m	struct:pack_plan_3d
ntasks	task_list/mg_task_list.hpp	/^  int ntasks;     \/\/!> number of tasks in this list$/;"	m	class:MultigridTaskList
ntasks	task_list/task_list.hpp	/^  int ntasks;     \/\/!> number of tasks in this list$/;"	m	class:TaskList
ntotallevel_	multigrid/multigrid.hpp	/^  int locrootlevel_, nrootlevel_, nmblevel_, ntotallevel_, nreflevel_, maxreflevel_;$/;"	m	class:MultigridDriver
nu	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> nu;            \/\/ viscosity array$/;"	m	class:HydroDiffusion
nu_	bvals/cc/bvals_cc.hpp	/^  int nl_, nu_;$/;"	m	class:CellCenteredBoundaryVariable
nu_alpha	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  Real nu_iso, nu_aniso, nu_alpha; \/\/ viscosity coeff$/;"	m	class:HydroDiffusion
nu_alpha	pgen/disk_RWI_2D.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, beta, nu_alpha,$/;"	m	namespace:__anon101	file:
nu_alpha	pgen/disk_VSI.cpp	/^Real gm0, r0, rho0, pvalue, cs2_0, qvalue, beta, nu_alpha, dfloor, dffloor, rho_floor, Omega0,$/;"	m	namespace:__anon133	file:
nu_alpha	pgen/disk_dust_diffusion.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, beta, nu_alpha;$/;"	m	namespace:__anon70	file:
nu_alpha	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^nu_alpha, dfloor, dffloor, Omega0, user_dt, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon68	file:
nu_alpha	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^nu_alpha, dfloor, dffloor, Omega0, user_dt, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon109	file:
nu_alpha	pgen/disk_planet_dust_cylindrical.cpp	/^gm0, r0, rho0, dslope, p0_over_r0, pslope, beta, gMth, nu_alpha,$/;"	m	namespace:__anon99	file:
nu_alpha	pgen/disk_planet_dust_spherical.cpp	/^gm0, r0, rho0, dslope, p0_over_r0, pslope, beta, gMth, nu_alpha,$/;"	m	namespace:__anon113	file:
nu_aniso	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  Real nu_iso, nu_aniso, nu_alpha; \/\/ viscosity coeff$/;"	m	class:HydroDiffusion
nu_dust	pgen/dmr_dust.cpp	/^Real nu_dust;$/;"	m	namespace:__anon148	file:
nu_dust	pgen/dust_diffusion.cpp	/^Real initial_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], nu_dust[NDUSTFLUIDS], Hratio[NDUSTFLUIDS];$/;"	m	namespace:__anon117	file:
nu_dustfluids_array	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> nu_dustfluids_array;   \/\/ Arrays of dust diffusivity array, nu_d$/;"	m	class:DustFluids
nu_dustfluids_array_n	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> nu_dustfluids_array_n; \/\/ Arrays of dust diffusivity array, nu_d at stage n$/;"	m	class:DustFluids
nu_iso	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  Real nu_iso, nu_aniso, nu_alpha; \/\/ viscosity coeff$/;"	m	class:HydroDiffusion
nu_scalar_iso	scalars/scalars.hpp	/^  Real nu_scalar_iso[NSCALARS]; \/\/, nu_scalar_aniso;          \/\/ diffusion coeff$/;"	m	class:PassiveScalars
nu_tot_	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> nu_tot_, kappa_tot_;$/;"	m	class:HydroDiffusion
nuiso	pgen/dust_diffusion.cpp	/^Real nuiso, iso_cs, amp;$/;"	m	namespace:__anon117	file:
nuiso	pgen/visc_dustfluids.cpp	/^Real nuiso, gm0;$/;"	m	namespace:__anon151	file:
nuiso	pgen/visc_scalars.cpp	/^Real nuiso, gm0;$/;"	m	namespace:__anon53	file:
nuj	mesh/mesh.hpp	/^  Real muj, nuj, muj_tilde, gammaj_tilde;$/;"	m	class:Mesh
num_blocks_global	outputs/outputs.hpp	/^  int num_blocks_global;                      \/\/ number of MeshBlocks in simulation$/;"	m	class:ATHDF5Output
num_datasets	outputs/outputs.hpp	/^  int num_datasets;                           \/\/ count of datasets to output$/;"	m	class:ATHDF5Output
num_flux_radii	pgen/gr_torus.cpp	/^int num_flux_radii;                           \/\/ number of spheres to use$/;"	m	namespace:__anon39	file:
num_lines	pgen/gr_mhd_inflow.cpp	/^int num_lines;                    \/\/ number of lines in table$/;"	m	namespace:__anon72	file:
num_mesh_threads_	mesh/mesh.hpp	/^  int num_mesh_threads_;$/;"	m	class:Mesh
num_north_polar_blocks_	bvals/bvals.hpp	/^  int num_north_polar_blocks_, num_south_polar_blocks_;$/;"	m	class:BoundaryBase
num_south_polar_blocks_	bvals/bvals.hpp	/^  int num_north_polar_blocks_, num_south_polar_blocks_;$/;"	m	class:BoundaryBase
num_tasks_left	task_list/task_list.hpp	/^  int indx_first_task, num_tasks_left;$/;"	m	struct:TaskStates
num_variables	outputs/outputs.hpp	/^  int *num_variables;                         \/\/ list of counts of variables per dataset$/;"	m	class:ATHDF5Output
num_vars_	outputs/outputs.hpp	/^  int num_vars_;             \/\/ number of variables in output$/;"	m	class:OutputType
nuser_history_output_	mesh/mesh.hpp	/^  int nuser_history_output_;$/;"	m	class:Mesh
nuser_out_var	mesh/mesh.hpp	/^  int nuser_out_var;$/;"	m	class:MeshBlock
nuser_out_var_1D	mesh/mesh.hpp	/^  int nuser_out_var_1D;$/;"	m	class:MeshBlock
nuser_out_var_2D	mesh/mesh.hpp	/^  int nuser_out_var_2D;$/;"	m	class:MeshBlock
nvar	pgen/disk_VSI.cpp	/^int n0, nvar, dowrite, file_number, out_level;$/;"	m	namespace:__anon133	file:
nvar_	multigrid/multigrid.hpp	/^  int nlevel_, ngh_, nvar_, current_level_;$/;"	m	class:Multigrid
nvar_	multigrid/multigrid.hpp	/^  int nranks_, nvar_, mode_;$/;"	m	class:MultigridDriver
nvar_	utils/interp_table.hpp	/^  int nvar_;$/;"	m	class:InterpTable2D
nvlist_	multigrid/multigrid.hpp	/^  int *nslist_, *nblist_, *nvlist_, *nvslist_, *nvlisti_, *nvslisti_, *ranklist_;$/;"	m	class:MultigridDriver
nvlisti_	multigrid/multigrid.hpp	/^  int *nslist_, *nblist_, *nvlist_, *nvslist_, *nvlisti_, *nvslisti_, *ranklist_;$/;"	m	class:MultigridDriver
nvslist_	multigrid/multigrid.hpp	/^  int *nslist_, *nblist_, *nvlist_, *nvslist_, *nvlisti_, *nvslisti_, *ranklist_;$/;"	m	class:MultigridDriver
nvslisti_	multigrid/multigrid.hpp	/^  int *nslist_, *nblist_, *nvlist_, *nvslist_, *nvlisti_, *nvslisti_, *ranklist_;$/;"	m	class:MultigridDriver
nwx	pgen/dust_NSH.cpp	/^Real amp, nwx, nwy, nwz, rhog0; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon103	file:
nwx	pgen/hb3.cpp	/^Real amp, nwx, nwy; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon58	file:
nwx	pgen/hgb.cpp	/^Real nwx, nwy; \/\/ Wavenumbers$/;"	m	namespace:__anon115	file:
nwx	pgen/jgg.cpp	/^Real nwx, nwy, nwz; \/\/ Wavenumbers$/;"	m	namespace:__anon123	file:
nwx	pgen/ssheet.cpp	/^int nwx, nwy; \/\/ Wavenumbers$/;"	m	namespace:__anon95	file:
nwx	pgen/streaming_eigen.cpp	/^Real amp, nwx, nwy, nwz, rhog0; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon66	file:
nwx	pgen/streaming_eigen_2dust.cpp	/^Real amp, nwx, nwy, nwz, rhog0; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon145	file:
nwx	pgen/streaming_nonlinear.cpp	/^Real amp, nwx, nwy, nwz, rhog0; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon135	file:
nwx	pgen/streaming_stratified.cpp	/^Real amp, nwx, nwy, nwz, sigma_g0; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon154	file:
nwy	pgen/dust_NSH.cpp	/^Real amp, nwx, nwy, nwz, rhog0; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon103	file:
nwy	pgen/hb3.cpp	/^Real amp, nwx, nwy; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon58	file:
nwy	pgen/hgb.cpp	/^Real nwx, nwy; \/\/ Wavenumbers$/;"	m	namespace:__anon115	file:
nwy	pgen/jgg.cpp	/^Real nwx, nwy, nwz; \/\/ Wavenumbers$/;"	m	namespace:__anon123	file:
nwy	pgen/ssheet.cpp	/^int nwx, nwy; \/\/ Wavenumbers$/;"	m	namespace:__anon95	file:
nwy	pgen/streaming_eigen.cpp	/^Real amp, nwx, nwy, nwz, rhog0; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon66	file:
nwy	pgen/streaming_eigen_2dust.cpp	/^Real amp, nwx, nwy, nwz, rhog0; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon145	file:
nwy	pgen/streaming_nonlinear.cpp	/^Real amp, nwx, nwy, nwz, rhog0; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon135	file:
nwy	pgen/streaming_stratified.cpp	/^Real amp, nwx, nwy, nwz, sigma_g0; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon154	file:
nwz	pgen/dust_NSH.cpp	/^Real amp, nwx, nwy, nwz, rhog0; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon103	file:
nwz	pgen/jgg.cpp	/^Real nwx, nwy, nwz; \/\/ Wavenumbers$/;"	m	namespace:__anon123	file:
nwz	pgen/streaming_eigen.cpp	/^Real amp, nwx, nwy, nwz, rhog0; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon66	file:
nwz	pgen/streaming_eigen_2dust.cpp	/^Real amp, nwx, nwy, nwz, rhog0; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon145	file:
nwz	pgen/streaming_nonlinear.cpp	/^Real amp, nwx, nwy, nwz, rhog0; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon135	file:
nwz	pgen/streaming_stratified.cpp	/^Real amp, nwx, nwy, nwz, sigma_g0; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon154	file:
nx	fft/athena_fft.hpp	/^  int Nx[3], nx[3], disp[3];$/;"	m	class:FFTBlock::AthenaFFTDirection
nx	fft/athena_fft.hpp	/^  int nx[3], is[3], ie[3];$/;"	m	class:AthenaFFTIndex
nx1	athena.hpp	/^  int nx1, nx2, nx3;        \/\/ number of active cells (not including ghost zones)$/;"	m	struct:RegionSize
nx1	outputs/outputs.hpp	/^  int nx1, nx2, nx3;                          \/\/ sizes of MeshBlocks$/;"	m	class:ATHDF5Output
nx1	pgen/inject_pebble_3D.cpp	/^int nx1, nx2, nx3;$/;"	m	namespace:__anon62	file:
nx1_	athena_arrays.hpp	/^  int nx1_, nx2_, nx3_, nx4_, nx5_, nx6_;$/;"	m	class:AthenaArray
nx1_	utils/interp_table.hpp	/^  int nx1_;$/;"	m	class:InterpTable2D
nx2	athena.hpp	/^  int nx1, nx2, nx3;        \/\/ number of active cells (not including ghost zones)$/;"	m	struct:RegionSize
nx2	outputs/outputs.hpp	/^  int nx1, nx2, nx3;                          \/\/ sizes of MeshBlocks$/;"	m	class:ATHDF5Output
nx2	pgen/inject_pebble_3D.cpp	/^int nx1, nx2, nx3;$/;"	m	namespace:__anon62	file:
nx2_	athena_arrays.hpp	/^  int nx1_, nx2_, nx3_, nx4_, nx5_, nx6_;$/;"	m	class:AthenaArray
nx2_	utils/interp_table.hpp	/^  int nx2_;$/;"	m	class:InterpTable2D
nx3	athena.hpp	/^  int nx1, nx2, nx3;        \/\/ number of active cells (not including ghost zones)$/;"	m	struct:RegionSize
nx3	outputs/outputs.hpp	/^  int nx1, nx2, nx3;                          \/\/ sizes of MeshBlocks$/;"	m	class:ATHDF5Output
nx3	pgen/inject_pebble_3D.cpp	/^int nx1, nx2, nx3;$/;"	m	namespace:__anon62	file:
nx3_	athena_arrays.hpp	/^  int nx1_, nx2_, nx3_, nx4_, nx5_, nx6_;$/;"	m	class:AthenaArray
nx4_	athena_arrays.hpp	/^  int nx1_, nx2_, nx3_, nx4_, nx5_, nx6_;$/;"	m	class:AthenaArray
nx5_	athena_arrays.hpp	/^  int nx1_, nx2_, nx3_, nx4_, nx5_, nx6_;$/;"	m	class:AthenaArray
nx6_	athena_arrays.hpp	/^  int nx1_, nx2_, nx3_, nx4_, nx5_, nx6_;$/;"	m	class:AthenaArray
octetbflag_	multigrid/multigrid.hpp	/^  std::vector<bool> *octetbflag_;$/;"	m	class:MultigridDriver
octetmap_	multigrid/multigrid.hpp	/^  std::unordered_map<LogicalLocation, int, LogicalLocationHash> *octetmap_;$/;"	m	class:MultigridDriver
octets_	multigrid/multigrid.hpp	/^  std::vector<MGOctet> *octets_;$/;"	m	class:MultigridDriver
oe_	multigrid/multigrid.hpp	/^  int os_, oe_;$/;"	m	class:MultigridDriver
ofc	orbital_advection/orbital_advection.hpp	/^  AthenaArray<int>  ofc, off[2]; \/\/ orbital offset of cell-centered values$/;"	m	class:OrbitalTransform::OrbitalAdvection
ofc_coarse	orbital_advection/orbital_advection.hpp	/^  AthenaArray<int>  ofc_coarse, off_coarse[2];$/;"	m	class:OrbitalTransform::OrbitalAdvection
off	orbital_advection/orbital_advection.hpp	/^  AthenaArray<int>  ofc, off[2]; \/\/ orbital offset of cell-centered values$/;"	m	class:OrbitalTransform::OrbitalAdvection
off_coarse	orbital_advection/orbital_advection.hpp	/^  AthenaArray<int>  ofc_coarse, off_coarse[2];$/;"	m	class:OrbitalTransform::OrbitalAdvection
offset	pgen/dust_diffusion.cpp	/^Real A0, sig_x1, sig_x2, cen1, cen2, offset;$/;"	m	namespace:__anon117	file:
ohmic	field/field_diffusion/field_diffusion.hpp	/^  enum DiffProcess {ohmic=0, hall=1, ambipolar=2};$/;"	e	enum:FieldDiffusion::DiffProcess
omega	pgen/jeans.cpp	/^Real cs2, gam, gm1, omega, omega2, gconst;$/;"	m	namespace:__anon119	file:
omega	pgen/slotted_cylinder.cpp	/^Real radius, omega_x1, omega_x2, omega, iso_cs;$/;"	m	namespace:__anon82	file:
omega2	pgen/jeans.cpp	/^Real cs2, gam, gm1, omega, omega2, gconst;$/;"	m	namespace:__anon119	file:
omega_	gravity/mg_gravity.hpp	/^  static constexpr Real omega_ = 1.15;$/;"	m	class:MGGravity
omega_orbit	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^omega_orbit[10], p_orbit[10], phi_orbit[10],$/;"	m	namespace:__anon68	file:
omega_p	pgen/disk_dust_drift.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon64	file:
omega_p	pgen/disk_streaming_cylindrical.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon54	file:
omega_p	pgen/disk_streaming_spherical.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon75	file:
omega_p	pgen/dust_diffusion.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon117	file:
omega_planet	pgen/disk_dust_diffusion.cpp	/^Real tau_relax, rs, gmstar, gmp, rad_planet, phi_planet_0, z_planet, t0_planet, t_end_planet, vk_planet, omega_planet, inv_omega_planet;$/;"	m	namespace:__anon70	file:
omega_planet	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^omega_planet[10], inv_omega_planet[10], cs_planet[10], a_orbit[10], e_orbit[10],$/;"	m	namespace:__anon68	file:
omega_planet	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^omega_planet[10], inv_omega_planet[10], cs_planet[10],$/;"	m	namespace:__anon109	file:
omega_planet	pgen/disk_planet_dust_cylindrical.cpp	/^t0_planet, time_drag, vk_planet, omega_planet, inv_omega_planet, cs_planet,$/;"	m	namespace:__anon99	file:
omega_planet	pgen/disk_planet_dust_spherical.cpp	/^t0_planet, time_drag, vk_planet, omega_planet, inv_omega_planet, cs_planet,$/;"	m	namespace:__anon113	file:
omega_x1	pgen/slotted_cylinder.cpp	/^Real radius, omega_x1, omega_x2, omega, iso_cs;$/;"	m	namespace:__anon82	file:
omega_x2	pgen/slotted_cylinder.cpp	/^Real radius, omega_x1, omega_x2, omega, iso_cs;$/;"	m	namespace:__anon82	file:
omg_osi	pgen/streaming_eigen.cpp	/^Real Kpar, kx, ky, kz, omg_osi, s_grow;$/;"	m	namespace:__anon66	file:
omg_osi	pgen/streaming_eigen_2dust.cpp	/^Real Kpar, kx, ky, kz, omg_osi, s_grow;$/;"	m	namespace:__anon145	file:
onx	orbital_advection/orbital_advection.hpp	/^  int onx;$/;"	m	class:OrbitalTransform::OrbitalAdvection
op_split_before	athena.hpp	/^enum class TaskType {op_split_before, main_int, op_split_after};$/;"	m	class:TaskType
operator ()	athena_arrays.hpp	/^  T &operator() (const int m, const int n, const int k, const int j, const int i) {$/;"	f	class:AthenaArray
operator ()	athena_arrays.hpp	/^  T &operator() (const int n) {$/;"	f	class:AthenaArray
operator ()	athena_arrays.hpp	/^  T &operator() (const int n, const int i) {$/;"	f	class:AthenaArray
operator ()	athena_arrays.hpp	/^  T &operator() (const int n, const int j, const int i) {$/;"	f	class:AthenaArray
operator ()	athena_arrays.hpp	/^  T &operator() (const int n, const int k, const int j, const int i) {$/;"	f	class:AthenaArray
operator ()	athena_arrays.hpp	/^  T &operator() (const int p, const int m, const int n, const int k, const int j,$/;"	f	class:AthenaArray
operator ()	athena_arrays.hpp	/^  T operator() (const int m, const int n, const int k, const int j, const int i) const {$/;"	f	class:AthenaArray
operator ()	athena_arrays.hpp	/^  T operator() (const int n) const {$/;"	f	class:AthenaArray
operator ()	athena_arrays.hpp	/^  T operator() (const int n, const int i) const {$/;"	f	class:AthenaArray
operator ()	athena_arrays.hpp	/^  T operator() (const int n, const int j, const int i) const {$/;"	f	class:AthenaArray
operator ()	athena_arrays.hpp	/^  T operator() (const int n, const int k, const int j, const int i) const {$/;"	f	class:AthenaArray
operator ()	athena_arrays.hpp	/^  T operator() (const int p, const int m, const int n, const int k, const int j,$/;"	f	class:AthenaArray
operator ()	multigrid/multigrid.hpp	/^  std::size_t operator()(const LogicalLocation &l) const {$/;"	f	struct:LogicalLocationHash
operator =	athena_arrays.hpp	/^AthenaArray<T> &AthenaArray<T>::operator= (AthenaArray<T> &&src) {$/;"	f	class:AthenaArray
operator =	athena_arrays.hpp	/^AthenaArray<T> &AthenaArray<T>::operator= (const AthenaArray<T> &src) {$/;"	f	class:AthenaArray
operator ==	mesh/meshblock_tree.cpp	/^bool operator==(const LogicalLocation &l1, const LogicalLocation &l2) {$/;"	f
operator ==	task_list/task_id.cpp	/^bool TaskID::operator== (const TaskID& rhs) const {$/;"	f	class:TaskID
operator |	task_list/task_id.cpp	/^TaskID TaskID::operator| (const TaskID& rhs) const {$/;"	f	class:TaskID
orb_advection_	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  int         orb_advection_;     \/\/ Orbital Advection$/;"	m	class:DustGasDrag
orb_bc	orbital_advection/orbital_advection.hpp	/^  OrbitalBoundaryCommunication *orb_bc;$/;"	m	class:OrbitalTransform::OrbitalAdvection
orbit1_aHST	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real orbit1_aHST(MeshBlock *pmb, int iout) {$/;"	f
orbit1_eHST	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real orbit1_eHST(MeshBlock *pmb, int iout) {$/;"	f
orbit1_omegaHST	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real orbit1_omegaHST(MeshBlock *pmb, int iout) {$/;"	f
orbit1_phiHST	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real orbit1_phiHST(MeshBlock *pmb, int iout) {$/;"	f
orbital_advection	mesh/mesh.hpp	/^  const int orbital_advection;       \/\/ order of the orbital splitting method$/;"	m	class:Mesh
orbital_advection_active	orbital_advection/orbital_advection.hpp	/^  bool orbital_advection_active;  \/\/!> flag for solving orbital advection$/;"	m	class:OrbitalTransform::OrbitalAdvection
orbital_advection_cc_phys_id_	bvals/orbital/bvals_orbital.hpp	/^  int orbital_advection_cc_phys_id_, orbital_advection_fc_phys_id_;$/;"	m	class:OrbitalBoundaryCommunication
orbital_advection_defined	orbital_advection/orbital_advection.hpp	/^  bool orbital_advection_defined; \/\/!> flag for the orbital advection system$/;"	m	class:OrbitalTransform::OrbitalAdvection
orbital_advection_fc_phys_id_	bvals/orbital/bvals_orbital.hpp	/^  int orbital_advection_cc_phys_id_, orbital_advection_fc_phys_id_;$/;"	m	class:OrbitalBoundaryCommunication
orbital_b1	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> orbital_b1,   orbital_b2;$/;"	m	class:OrbitalTransform::OrbitalAdvection
orbital_b2	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> orbital_b1,   orbital_b2;$/;"	m	class:OrbitalTransform::OrbitalAdvection
orbital_bd_cc_	bvals/orbital/bvals_orbital.hpp	/^  OrbitalBoundaryData orbital_bd_cc_[2], orbital_bd_fc_[2];$/;"	m	class:OrbitalBoundaryCommunication
orbital_bd_fc_	bvals/orbital/bvals_orbital.hpp	/^  OrbitalBoundaryData orbital_bd_cc_[2], orbital_bd_fc_[2];$/;"	m	class:OrbitalBoundaryCommunication
orbital_cc	athena.hpp	/^                             mggrav_f, orbital_cc, orbital_fc};$/;"	m	class:BoundaryQuantity
orbital_cons	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> orbital_cons, orbital_df_cons, orbital_scalar;$/;"	m	class:OrbitalTransform::OrbitalAdvection
orbital_df_cons	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> orbital_cons, orbital_df_cons, orbital_scalar;$/;"	m	class:OrbitalTransform::OrbitalAdvection
orbital_direction	orbital_advection/orbital_advection.hpp	/^  int  orbital_direction;         \/\/!> the direction of orbital motion x2(=1), x3 (=2)$/;"	m	class:OrbitalTransform::OrbitalAdvection
orbital_recv_cc_count_	bvals/orbital/bvals_orbital.hpp	/^  int orbital_send_cc_count_[2][4], orbital_recv_cc_count_[2][4];$/;"	m	class:OrbitalBoundaryCommunication
orbital_recv_fc_count_	bvals/orbital/bvals_orbital.hpp	/^  int orbital_send_fc_count_[2][4], orbital_recv_fc_count_[2][4];$/;"	m	class:OrbitalBoundaryCommunication
orbital_recv_neighbor_	bvals/orbital/bvals_orbital.hpp	/^  SimpleNeighborBlock orbital_send_neighbor_[2][4], orbital_recv_neighbor_[2][4];$/;"	m	class:OrbitalBoundaryCommunication
orbital_refinement	orbital_advection/orbital_advection.hpp	/^  bool orbital_refinement;        \/\/!> flag for refinement in the orbital direction$/;"	m	class:OrbitalTransform::OrbitalAdvection
orbital_scalar	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> orbital_cons, orbital_df_cons, orbital_scalar;$/;"	m	class:OrbitalTransform::OrbitalAdvection
orbital_send_cc_count_	bvals/orbital/bvals_orbital.hpp	/^  int orbital_send_cc_count_[2][4], orbital_recv_cc_count_[2][4];$/;"	m	class:OrbitalBoundaryCommunication
orbital_send_fc_count_	bvals/orbital/bvals_orbital.hpp	/^  int orbital_send_fc_count_[2][4], orbital_recv_fc_count_[2][4];$/;"	m	class:OrbitalBoundaryCommunication
orbital_send_neighbor_	bvals/orbital/bvals_orbital.hpp	/^  SimpleNeighborBlock orbital_send_neighbor_[2][4], orbital_recv_neighbor_[2][4];$/;"	m	class:OrbitalBoundaryCommunication
orbital_splitting_order	orbital_advection/orbital_advection.hpp	/^  int  orbital_splitting_order;   \/\/!> order of the orbital splitting method$/;"	m	class:OrbitalTransform::OrbitalAdvection
orbital_stage	task_list/task_list.hpp	/^    bool main_stage, orbital_stage; \/\/ flag for whether the main calculation is done$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
orbital_system_conversion_done	orbital_advection/orbital_advection.hpp	/^  int orbital_system_conversion_done; \/\/$/;"	m	class:OrbitalTransform::OrbitalAdvection
orbital_system_output	outputs/outputs.hpp	/^  bool orbital_system_output;$/;"	m	struct:OutputParameters
orbital_uniform_mesh	orbital_advection/orbital_advection.hpp	/^  bool orbital_uniform_mesh;      \/\/!> true: uniform grid, false: un-uniform grid$/;"	m	class:OrbitalTransform::OrbitalAdvection
orc	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> orc, orf[2]; \/\/ orbital residual of cell-centered values$/;"	m	class:OrbitalTransform::OrbitalAdvection
orf	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> orc, orf[2]; \/\/ orbital residual of cell-centered values$/;"	m	class:OrbitalTransform::OrbitalAdvection
orig_idx_	fft/athena_fft.hpp	/^  AthenaFFTIndex orig_idx_;$/;"	m	class:FFTBlock::AthenaFFTDirection
os_	multigrid/multigrid.hpp	/^  int os_, oe_;$/;"	m	class:MultigridDriver
out_	fft/athena_fft.hpp	/^  std::complex<Real> *in_, *out_;$/;"	m	class:FFTBlock::AthenaFFTDirection
out_ie	outputs/outputs.hpp	/^  int out_is, out_ie, out_js, out_je, out_ks, out_ke;  \/\/ OutputData array start\/end index$/;"	m	class:OutputType
out_is	outputs/outputs.hpp	/^  int out_is, out_ie, out_js, out_je, out_ks, out_ke;  \/\/ OutputData array start\/end index$/;"	m	class:OutputType
out_je	outputs/outputs.hpp	/^  int out_is, out_ie, out_js, out_je, out_ks, out_ke;  \/\/ OutputData array start\/end index$/;"	m	class:OutputType
out_js	outputs/outputs.hpp	/^  int out_is, out_ie, out_js, out_je, out_ks, out_ke;  \/\/ OutputData array start\/end index$/;"	m	class:OutputType
out_ke	outputs/outputs.hpp	/^  int out_is, out_ie, out_js, out_je, out_ks, out_ke;  \/\/ OutputData array start\/end index$/;"	m	class:OutputType
out_ks	outputs/outputs.hpp	/^  int out_is, out_ie, out_js, out_je, out_ks, out_ke;  \/\/ OutputData array start\/end index$/;"	m	class:OutputType
out_level	pgen/disk_VSI.cpp	/^int n0, nvar, dowrite, file_number, out_level;$/;"	m	namespace:__anon133	file:
outer_ratio_region	pgen/disk_RWI_2D.cpp	/^inner_ratio_region, outer_ratio_region, inner_width_damping, outer_width_damping,$/;"	m	namespace:__anon101	file:
outer_ratio_region	pgen/disk_VSI.cpp	/^inner_ratio_region, outer_ratio_region, inner_width_damping, outer_width_damping,$/;"	m	namespace:__anon133	file:
outer_ratio_region	pgen/disk_dust_diffusion.cpp	/^Real radius_inner_damping, radius_outer_damping, inner_ratio_region, outer_ratio_region,$/;"	m	namespace:__anon70	file:
outer_ratio_region	pgen/disk_dust_drift.cpp	/^Real radius_inner_damping, radius_outer_damping, inner_ratio_region, outer_ratio_region,$/;"	m	namespace:__anon64	file:
outer_ratio_region	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^inner_ratio_region, outer_ratio_region, inner_width_damping, outer_width_damping;$/;"	m	namespace:__anon68	file:
outer_ratio_region	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^inner_ratio_region, outer_ratio_region, inner_width_damping, outer_width_damping;$/;"	m	namespace:__anon109	file:
outer_ratio_region	pgen/disk_planet_dust_cylindrical.cpp	/^outer_ratio_region, inner_width_damping, outer_width_damping,$/;"	m	namespace:__anon99	file:
outer_ratio_region	pgen/disk_planet_dust_spherical.cpp	/^outer_ratio_region, inner_width_damping, outer_width_damping,$/;"	m	namespace:__anon113	file:
outer_ratio_region	pgen/disk_streaming_cylindrical.cpp	/^Real radius_inner_damping, radius_outer_damping, inner_ratio_region, outer_ratio_region,$/;"	m	namespace:__anon54	file:
outer_ratio_region	pgen/disk_streaming_spherical.cpp	/^Real radius_inner_damping, radius_outer_damping, inner_ratio_region, outer_ratio_region,$/;"	m	namespace:__anon75	file:
outer_ratio_region	pgen/dust_diffusion.cpp	/^Real radius_inner_damping, radius_outer_damping, inner_ratio_region, outer_ratio_region,$/;"	m	namespace:__anon117	file:
outer_ratio_region	pgen/ssheet_RWI_dust.cpp	/^inner_ratio_region, outer_ratio_region, inner_width_damping, outer_width_damping;$/;"	m	namespace:__anon90	file:
outer_ratio_region	pgen/ssheet_planet_dust.cpp	/^inner_ratio_region, outer_ratio_region, inner_width_damping, outer_width_damping;$/;"	m	namespace:__anon111	file:
outer_width_damping	pgen/disk_RWI_2D.cpp	/^inner_ratio_region, outer_ratio_region, inner_width_damping, outer_width_damping,$/;"	m	namespace:__anon101	file:
outer_width_damping	pgen/disk_VSI.cpp	/^inner_ratio_region, outer_ratio_region, inner_width_damping, outer_width_damping,$/;"	m	namespace:__anon133	file:
outer_width_damping	pgen/disk_dust_diffusion.cpp	/^    inner_width_damping, outer_width_damping;$/;"	m	namespace:__anon70	file:
outer_width_damping	pgen/disk_dust_drift.cpp	/^     inner_width_damping, outer_width_damping;$/;"	m	namespace:__anon64	file:
outer_width_damping	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^inner_ratio_region, outer_ratio_region, inner_width_damping, outer_width_damping;$/;"	m	namespace:__anon68	file:
outer_width_damping	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^inner_ratio_region, outer_ratio_region, inner_width_damping, outer_width_damping;$/;"	m	namespace:__anon109	file:
outer_width_damping	pgen/disk_planet_dust_cylindrical.cpp	/^outer_ratio_region, inner_width_damping, outer_width_damping,$/;"	m	namespace:__anon99	file:
outer_width_damping	pgen/disk_planet_dust_spherical.cpp	/^outer_ratio_region, inner_width_damping, outer_width_damping,$/;"	m	namespace:__anon113	file:
outer_width_damping	pgen/disk_streaming_cylindrical.cpp	/^     inner_width_damping, outer_width_damping;$/;"	m	namespace:__anon54	file:
outer_width_damping	pgen/disk_streaming_spherical.cpp	/^     inner_width_damping, outer_width_damping;$/;"	m	namespace:__anon75	file:
outer_width_damping	pgen/dust_diffusion.cpp	/^     inner_width_damping, outer_width_damping;$/;"	m	namespace:__anon117	file:
outer_width_damping	pgen/ssheet_RWI_dust.cpp	/^inner_ratio_region, outer_ratio_region, inner_width_damping, outer_width_damping;$/;"	m	namespace:__anon90	file:
outer_width_damping	pgen/ssheet_planet_dust.cpp	/^inner_ratio_region, outer_ratio_region, inner_width_damping, outer_width_damping;$/;"	m	namespace:__anon111	file:
outer_x1	bvals/bvals_interfaces.hpp	/^enum BoundaryFace {undef=-1, inner_x1=0, outer_x1=1, inner_x2=2, outer_x2=3,$/;"	e	enum:BoundaryFace
outer_x2	bvals/bvals_interfaces.hpp	/^enum BoundaryFace {undef=-1, inner_x1=0, outer_x1=1, inner_x2=2, outer_x2=3,$/;"	e	enum:BoundaryFace
outer_x3	bvals/bvals_interfaces.hpp	/^                   inner_x3=4, outer_x3=5};$/;"	e	enum:BoundaryFace
outflow	bvals/bvals_interfaces.hpp	/^enum class BoundaryFlag {block=-1, undef, reflect, outflow, user, periodic,$/;"	m	class:BoundaryFlag
output_params	outputs/outputs.hpp	/^  OutputParameters output_params; \/\/ control data read from <output> block$/;"	m	class:OutputType
output_slicex1	outputs/outputs.hpp	/^  bool output_slicex1, output_slicex2, output_slicex3;$/;"	m	struct:OutputParameters
output_slicex2	outputs/outputs.hpp	/^  bool output_slicex1, output_slicex2, output_slicex3;$/;"	m	struct:OutputParameters
output_slicex3	outputs/outputs.hpp	/^  bool output_slicex1, output_slicex2, output_slicex3;$/;"	m	struct:OutputParameters
output_sumx1	outputs/outputs.hpp	/^  bool output_sumx1, output_sumx2, output_sumx3;$/;"	m	struct:OutputParameters
output_sumx2	outputs/outputs.hpp	/^  bool output_sumx1, output_sumx2, output_sumx3;$/;"	m	struct:OutputParameters
output_sumx3	outputs/outputs.hpp	/^  bool output_sumx1, output_sumx2, output_sumx3;$/;"	m	struct:OutputParameters
override	bvals/bvals_interfaces.hpp	/^  bool ReceiveBoundaryBuffers() override;$/;"	m	class:BoundaryVariable
override	bvals/bvals_interfaces.hpp	/^  void ReceiveAndSetBoundariesWithWait() override;$/;"	m	class:BoundaryVariable
override	bvals/bvals_interfaces.hpp	/^  void SendBoundaryBuffers() override;$/;"	m	class:BoundaryVariable
override	bvals/bvals_interfaces.hpp	/^  void SetBoundaries() override;$/;"	m	class:BoundaryVariable
override	bvals/cc/bvals_cc.hpp	/^                         int il, int iu, int jl, int kl, int ku, int ngh) override;$/;"	m	class:CellCenteredBoundaryVariable
override	bvals/cc/bvals_cc.hpp	/^                         int il, int iu, int ju, int kl, int ku, int ngh) override;$/;"	m	class:CellCenteredBoundaryVariable
override	bvals/cc/bvals_cc.hpp	/^                      int il, int iu, int jl, int ju, int kl, int ngh) override;$/;"	m	class:CellCenteredBoundaryVariable
override	bvals/cc/bvals_cc.hpp	/^                      int il, int iu, int jl, int ju, int ku, int ngh) override;$/;"	m	class:CellCenteredBoundaryVariable
override	bvals/cc/bvals_cc.hpp	/^                      int il, int iu, int jl, int kl, int ku, int ngh) override;$/;"	m	class:CellCenteredBoundaryVariable
override	bvals/cc/bvals_cc.hpp	/^                      int il, int iu, int ju, int kl, int ku, int ngh) override;$/;"	m	class:CellCenteredBoundaryVariable
override	bvals/cc/bvals_cc.hpp	/^                      int il, int jl, int ju, int kl, int ku, int ngh) override;$/;"	m	class:CellCenteredBoundaryVariable
override	bvals/cc/bvals_cc.hpp	/^                      int iu, int jl, int ju, int kl, int ku, int ngh) override;$/;"	m	class:CellCenteredBoundaryVariable
override	bvals/cc/bvals_cc.hpp	/^  bool ReceiveFluxCorrection() override;$/;"	m	class:CellCenteredBoundaryVariable
override	bvals/cc/bvals_cc.hpp	/^  int ComputeFluxCorrectionBufferSize(const NeighborIndexes& ni, int cng) override;$/;"	m	class:CellCenteredBoundaryVariable
override	bvals/cc/bvals_cc.hpp	/^  int ComputeVariableBufferSize(const NeighborIndexes& ni, int cng) override;$/;"	m	class:CellCenteredBoundaryVariable
override	bvals/cc/bvals_cc.hpp	/^  int LoadBoundaryBufferSameLevel(Real *buf, const NeighborBlock& nb) override;$/;"	m	class:CellCenteredBoundaryVariable
override	bvals/cc/bvals_cc.hpp	/^  int LoadBoundaryBufferToCoarser(Real *buf, const NeighborBlock& nb) override;$/;"	m	class:CellCenteredBoundaryVariable
override	bvals/cc/bvals_cc.hpp	/^  int LoadBoundaryBufferToFiner(Real *buf, const NeighborBlock& nb) override;$/;"	m	class:CellCenteredBoundaryVariable
override	bvals/cc/bvals_cc.hpp	/^  void ClearBoundary(BoundaryCommSubset phase) override;$/;"	m	class:CellCenteredBoundaryVariable
override	bvals/cc/bvals_cc.hpp	/^  void PolarBoundarySingleAzimuthalBlock() override;$/;"	m	class:CellCenteredBoundaryVariable
override	bvals/cc/bvals_cc.hpp	/^  void SendFluxCorrection() override;$/;"	m	class:CellCenteredBoundaryVariable
override	bvals/cc/bvals_cc.hpp	/^  void SetBoundaryFromCoarser(Real *buf, const NeighborBlock& nb) override;$/;"	m	class:CellCenteredBoundaryVariable
override	bvals/cc/bvals_cc.hpp	/^  void SetBoundaryFromFiner(Real *buf, const NeighborBlock& nb) override;$/;"	m	class:CellCenteredBoundaryVariable
override	bvals/cc/bvals_cc.hpp	/^  void SetBoundarySameLevel(Real *buf, const NeighborBlock& nb) override;$/;"	m	class:CellCenteredBoundaryVariable
override	bvals/cc/bvals_cc.hpp	/^  void SetupPersistentMPI() override;$/;"	m	class:CellCenteredBoundaryVariable
override	bvals/cc/bvals_cc.hpp	/^  void StartReceiving(BoundaryCommSubset phase) override;$/;"	m	class:CellCenteredBoundaryVariable
override	bvals/cc/bvals_cc.hpp	/^  void StartReceivingShear(BoundaryCommSubset phase) override;$/;"	m	class:CellCenteredBoundaryVariable
override	bvals/cc/dustdiffusion/bvals_dustdiffusion.hpp	/^                      int il, int iu, int jl, int ju, int kl, int ngh) override;$/;"	m	class:DustDiffusionBoundaryVariable
override	bvals/cc/dustdiffusion/bvals_dustdiffusion.hpp	/^                      int il, int iu, int jl, int ju, int ku, int ngh) override;$/;"	m	class:DustDiffusionBoundaryVariable
override	bvals/cc/dustdiffusion/bvals_dustdiffusion.hpp	/^                      int il, int iu, int jl, int kl, int ku, int ngh) override;$/;"	m	class:DustDiffusionBoundaryVariable
override	bvals/cc/dustdiffusion/bvals_dustdiffusion.hpp	/^                      int il, int iu, int ju, int kl, int ku, int ngh) override;$/;"	m	class:DustDiffusionBoundaryVariable
override	bvals/cc/dustdiffusion/bvals_dustdiffusion.hpp	/^                      int il, int jl, int ju, int kl, int ku, int ngh) override;$/;"	m	class:DustDiffusionBoundaryVariable
override	bvals/cc/dustdiffusion/bvals_dustdiffusion.hpp	/^                      int iu, int jl, int ju, int kl, int ku, int ngh) override;$/;"	m	class:DustDiffusionBoundaryVariable
override	bvals/cc/dustdiffusion/bvals_dustdiffusion.hpp	/^  void SetBoundarySameLevel(Real *buf, const NeighborBlock& nb) override;$/;"	m	class:DustDiffusionBoundaryVariable
override	bvals/cc/dustdiffusion/bvals_dustdiffusion.hpp	/^  void ShearQuantities(AthenaArray<Real> &shear_cc_, bool upper) override;$/;"	m	class:DustDiffusionBoundaryVariable
override	bvals/cc/dustfluids/bvals_dustfluids.hpp	/^                      int il, int iu, int jl, int ju, int kl, int ngh) override;$/;"	m	class:DustFluidsBoundaryVariable
override	bvals/cc/dustfluids/bvals_dustfluids.hpp	/^                      int il, int iu, int jl, int ju, int ku, int ngh) override;$/;"	m	class:DustFluidsBoundaryVariable
override	bvals/cc/dustfluids/bvals_dustfluids.hpp	/^                      int il, int iu, int jl, int kl, int ku, int ngh) override;$/;"	m	class:DustFluidsBoundaryVariable
override	bvals/cc/dustfluids/bvals_dustfluids.hpp	/^                      int il, int iu, int ju, int kl, int ku, int ngh) override;$/;"	m	class:DustFluidsBoundaryVariable
override	bvals/cc/dustfluids/bvals_dustfluids.hpp	/^                      int il, int jl, int ju, int kl, int ku, int ngh) override;$/;"	m	class:DustFluidsBoundaryVariable
override	bvals/cc/dustfluids/bvals_dustfluids.hpp	/^                      int iu, int jl, int ju, int kl, int ku, int ngh) override;$/;"	m	class:DustFluidsBoundaryVariable
override	bvals/cc/dustfluids/bvals_dustfluids.hpp	/^  void SetBoundarySameLevel(Real *buf, const NeighborBlock& nb) override;$/;"	m	class:DustFluidsBoundaryVariable
override	bvals/cc/dustfluids/bvals_dustfluids.hpp	/^  void ShearQuantities(AthenaArray<Real> &shear_cc_, bool upper) override;$/;"	m	class:DustFluidsBoundaryVariable
override	bvals/cc/hydro/bvals_hydro.hpp	/^                      int il, int iu, int jl, int ju, int kl, int ngh) override;$/;"	m	class:HydroBoundaryVariable
override	bvals/cc/hydro/bvals_hydro.hpp	/^                      int il, int iu, int jl, int ju, int ku, int ngh) override;$/;"	m	class:HydroBoundaryVariable
override	bvals/cc/hydro/bvals_hydro.hpp	/^                      int il, int iu, int jl, int kl, int ku, int ngh) override;$/;"	m	class:HydroBoundaryVariable
override	bvals/cc/hydro/bvals_hydro.hpp	/^                      int il, int iu, int ju, int kl, int ku, int ngh) override;$/;"	m	class:HydroBoundaryVariable
override	bvals/cc/hydro/bvals_hydro.hpp	/^                      int il, int jl, int ju, int kl, int ku, int ngh) override;$/;"	m	class:HydroBoundaryVariable
override	bvals/cc/hydro/bvals_hydro.hpp	/^                      int iu, int jl, int ju, int kl, int ku, int ngh) override;$/;"	m	class:HydroBoundaryVariable
override	bvals/cc/hydro/bvals_hydro.hpp	/^  void SetBoundarySameLevel(Real *buf, const NeighborBlock& nb) override;$/;"	m	class:HydroBoundaryVariable
override	bvals/cc/hydro/bvals_hydro.hpp	/^  void ShearQuantities(AthenaArray<Real> &shear_cc_, bool upper) override;$/;"	m	class:HydroBoundaryVariable
override	bvals/fc/bvals_fc.hpp	/^                         int il, int iu, int jl, int kl, int ku, int ngh) override;$/;"	m	class:FaceCenteredBoundaryVariable
override	bvals/fc/bvals_fc.hpp	/^                         int il, int iu, int ju, int kl, int ku, int ngh) override;$/;"	m	class:FaceCenteredBoundaryVariable
override	bvals/fc/bvals_fc.hpp	/^                      int il, int iu, int jl, int ju, int kl, int ngh) override;$/;"	m	class:FaceCenteredBoundaryVariable
override	bvals/fc/bvals_fc.hpp	/^                      int il, int iu, int jl, int ju, int ku, int ngh) override;$/;"	m	class:FaceCenteredBoundaryVariable
override	bvals/fc/bvals_fc.hpp	/^                      int il, int iu, int jl, int kl, int ku, int ngh) override;$/;"	m	class:FaceCenteredBoundaryVariable
override	bvals/fc/bvals_fc.hpp	/^                      int il, int iu, int ju, int kl, int ku, int ngh) override;$/;"	m	class:FaceCenteredBoundaryVariable
override	bvals/fc/bvals_fc.hpp	/^                      int il, int jl, int ju, int kl, int ku, int ngh) override;$/;"	m	class:FaceCenteredBoundaryVariable
override	bvals/fc/bvals_fc.hpp	/^                      int iu, int jl, int ju, int kl, int ku, int ngh) override;$/;"	m	class:FaceCenteredBoundaryVariable
override	bvals/fc/bvals_fc.hpp	/^  bool ReceiveFluxCorrection() override;$/;"	m	class:FaceCenteredBoundaryVariable
override	bvals/fc/bvals_fc.hpp	/^  int ComputeFluxCorrectionBufferSize(const NeighborIndexes& ni, int cng) override;$/;"	m	class:FaceCenteredBoundaryVariable
override	bvals/fc/bvals_fc.hpp	/^  int ComputeVariableBufferSize(const NeighborIndexes& ni, int cng) override;$/;"	m	class:FaceCenteredBoundaryVariable
override	bvals/fc/bvals_fc.hpp	/^  int LoadBoundaryBufferSameLevel(Real *buf, const NeighborBlock& nb) override;$/;"	m	class:FaceCenteredBoundaryVariable
override	bvals/fc/bvals_fc.hpp	/^  int LoadBoundaryBufferToCoarser(Real *buf, const NeighborBlock& nb) override;$/;"	m	class:FaceCenteredBoundaryVariable
override	bvals/fc/bvals_fc.hpp	/^  int LoadBoundaryBufferToFiner(Real *buf, const NeighborBlock& nb) override;$/;"	m	class:FaceCenteredBoundaryVariable
override	bvals/fc/bvals_fc.hpp	/^  void ClearBoundary(BoundaryCommSubset phase) override;$/;"	m	class:FaceCenteredBoundaryVariable
override	bvals/fc/bvals_fc.hpp	/^  void PolarBoundarySingleAzimuthalBlock() override;$/;"	m	class:FaceCenteredBoundaryVariable
override	bvals/fc/bvals_fc.hpp	/^  void ReceiveAndSetBoundariesWithWait() override;$/;"	m	class:FaceCenteredBoundaryVariable
override	bvals/fc/bvals_fc.hpp	/^  void SendFluxCorrection() override;$/;"	m	class:FaceCenteredBoundaryVariable
override	bvals/fc/bvals_fc.hpp	/^  void SetBoundaries() override;$/;"	m	class:FaceCenteredBoundaryVariable
override	bvals/fc/bvals_fc.hpp	/^  void SetBoundaryFromCoarser(Real *buf, const NeighborBlock& nb) override;$/;"	m	class:FaceCenteredBoundaryVariable
override	bvals/fc/bvals_fc.hpp	/^  void SetBoundaryFromFiner(Real *buf, const NeighborBlock& nb) override;$/;"	m	class:FaceCenteredBoundaryVariable
override	bvals/fc/bvals_fc.hpp	/^  void SetBoundarySameLevel(Real *buf, const NeighborBlock& nb) override;$/;"	m	class:FaceCenteredBoundaryVariable
override	bvals/fc/bvals_fc.hpp	/^  void SetupPersistentMPI() override;$/;"	m	class:FaceCenteredBoundaryVariable
override	bvals/fc/bvals_fc.hpp	/^  void StartReceiving(BoundaryCommSubset phase) override;$/;"	m	class:FaceCenteredBoundaryVariable
override	bvals/fc/bvals_fc.hpp	/^  void StartReceivingShear(BoundaryCommSubset phase) override;$/;"	m	class:FaceCenteredBoundaryVariable
override	outputs/outputs.hpp	/^  void WriteOutputFile(Mesh *pm, ParameterInput *pin, bool flag) override;$/;"	m	class:ATHDF5Output
override	outputs/outputs.hpp	/^  void WriteOutputFile(Mesh *pm, ParameterInput *pin, bool flag) override;$/;"	m	class:FormattedTableOutput
override	outputs/outputs.hpp	/^  void WriteOutputFile(Mesh *pm, ParameterInput *pin, bool flag) override;$/;"	m	class:HistoryOutput
override	outputs/outputs.hpp	/^  void WriteOutputFile(Mesh *pm, ParameterInput *pin, bool flag) override;$/;"	m	class:RestartOutput
override	outputs/outputs.hpp	/^  void WriteOutputFile(Mesh *pm, ParameterInput *pin, bool flag) override;$/;"	m	class:VTKOutput
override	task_list/fft_grav_task_list.hpp	/^  void AddTask(const TaskID& id, const TaskID& dep) override;$/;"	m	class:FFTGravitySolverTaskList
override	task_list/fft_grav_task_list.hpp	/^  void StartupTaskList(MeshBlock *pmb, int stage) override;$/;"	m	class:FFTGravitySolverTaskList
override	task_list/task_list.hpp	/^  void AddTask(const TaskID& id, const TaskID& dep) override;$/;"	m	class:TimeIntegratorTaskList
override	task_list/task_list.hpp	/^  void AddTask(const TaskID&, const TaskID& dep) override;$/;"	m	class:SuperTimeStepTaskList
override	task_list/task_list.hpp	/^  void StartupTaskList(MeshBlock *pmb, int stage) override;$/;"	m	class:SuperTimeStepTaskList
override	task_list/task_list.hpp	/^  void StartupTaskList(MeshBlock *pmb, int stage) override;$/;"	m	class:TimeIntegratorTaskList
ox1	bvals/bvals_interfaces.hpp	/^  int ox1, ox2, ox3; \/\/ 3-vec of offsets in {-1,0,+1} relative to this block's (i,j,k)$/;"	m	struct:NeighborIndexes
ox2	bvals/bvals_interfaces.hpp	/^  int ox1, ox2, ox3; \/\/ 3-vec of offsets in {-1,0,+1} relative to this block's (i,j,k)$/;"	m	struct:NeighborIndexes
ox3	bvals/bvals_interfaces.hpp	/^  int ox1, ox2, ox3; \/\/ 3-vec of offsets in {-1,0,+1} relative to this block's (i,j,k)$/;"	m	struct:NeighborIndexes
p0	pgen/dusty_soundwave.cpp	/^Real rho_g0, p0, u0, v0, w0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon105	file:
p0	pgen/dusty_wave.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon86	file:
p0	pgen/dusty_wave_1d.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon137	file:
p0	pgen/hgb.cpp	/^Real iso_cs, gm1, d0, p0;$/;"	m	namespace:__anon115	file:
p0	pgen/jeans.cpp	/^Real d0, p0, v0, u0, w0, va, b0;$/;"	m	namespace:__anon119	file:
p0	pgen/jgg.cpp	/^Real iso_cs, gm1, d0, p0;$/;"	m	namespace:__anon123	file:
p0	pgen/linear_wave.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon125	file:
p0	pgen/ssheet.cpp	/^Real iso_cs, gm1, d0, p0;$/;"	m	namespace:__anon95	file:
p0_over_r0	pgen/disk.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas;$/;"	m	namespace:__anon36	file:
p0_over_r0	pgen/disk_RWI_2D.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, beta, nu_alpha,$/;"	m	namespace:__anon101	file:
p0_over_r0	pgen/disk_dust_diffusion.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, beta, nu_alpha;$/;"	m	namespace:__anon70	file:
p0_over_r0	pgen/disk_dust_drift.cpp	/^Real gm0, r0, rho_0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, user_dt, iso_cs2_r0;$/;"	m	namespace:__anon64	file:
p0_over_r0	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real x1min, x1max, damping_rate, gm0, r0, rho0, dslope, p0_over_r0, pslope, beta,$/;"	m	namespace:__anon68	file:
p0_over_r0	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real x1min, x1max, damping_rate, gm0, r0, rho0, dslope, p0_over_r0, pslope, beta,$/;"	m	namespace:__anon109	file:
p0_over_r0	pgen/disk_planet_dust_cylindrical.cpp	/^gm0, r0, rho0, dslope, p0_over_r0, pslope, beta, gMth, nu_alpha,$/;"	m	namespace:__anon99	file:
p0_over_r0	pgen/disk_planet_dust_spherical.cpp	/^gm0, r0, rho0, dslope, p0_over_r0, pslope, beta, gMth, nu_alpha,$/;"	m	namespace:__anon113	file:
p0_over_r0	pgen/disk_streaming_cylindrical.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, amp;$/;"	m	namespace:__anon54	file:
p0_over_r0	pgen/disk_streaming_spherical.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, amp;$/;"	m	namespace:__anon75	file:
p0_over_r0	pgen/dust_diffusion.cpp	/^Real gm0, r0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, iso_cs2_r0;$/;"	m	namespace:__anon117	file:
p_amb	pgen/jet.cpp	/^Real d_amb, p_amb, vx_amb, vy_amb, vz_amb, bx_amb, by_amb, bz_amb;$/;"	m	namespace:__anon77	file:
p_jet	pgen/jet.cpp	/^Real r_jet, d_jet, p_jet, vx_jet, vy_jet, vz_jet, bx_jet, by_jet, bz_jet;$/;"	m	namespace:__anon77	file:
p_orbit	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^omega_orbit[10], p_orbit[10], phi_orbit[10],$/;"	m	namespace:__anon68	file:
pack	fft/plimpton/remap_2d.h	/^  void (*pack)(double *, double *, struct pack_plan_2d *);                   \/* which pack function to use *\/$/;"	m	struct:remap_plan_2d
pack	fft/plimpton/remap_3d.h	/^  void (*pack)(double *, double *, struct pack_plan_3d *);                   \/* which pack function to use *\/$/;"	m	struct:remap_plan_3d
pack_2d	fft/plimpton/pack_2d.cpp	/^void pack_2d(double *data, double *buf, struct pack_plan_2d *plan)$/;"	f
pack_3d	fft/plimpton/pack_3d.cpp	/^void pack_3d(double *data, double *buf, struct pack_plan_3d *plan)$/;"	f
pack_plan_2d	fft/plimpton/pack_2d.h	/^struct pack_plan_2d {$/;"	s
pack_plan_3d	fft/plimpton/pack_3d.h	/^struct pack_plan_3d {$/;"	s
packplan	fft/plimpton/remap_2d.h	/^  struct pack_plan_2d *packplan;    \/* pack plan for each send message *\/$/;"	m	struct:remap_plan_2d	typeref:struct:remap_plan_2d::pack_plan_2d
packplan	fft/plimpton/remap_3d.h	/^  struct pack_plan_3d *packplan;    \/* pack plan for each send message *\/$/;"	m	struct:remap_plan_3d	typeref:struct:remap_plan_3d::pack_plan_3d
param_comment	parameter_input.hpp	/^  std::string param_comment;$/;"	m	struct:InputLine
param_name	parameter_input.hpp	/^  std::string param_name;$/;"	m	struct:InputLine
param_value	parameter_input.hpp	/^  std::string param_value;   \/\/ value of the parameter is stored as a string!$/;"	m	struct:InputLine
pbuf	bvals/cc/bvals_cc.hpp	/^  AthenaArray<Real> pbuf;$/;"	m	class:CellCenteredBoundaryVariable
pbuf	bvals/fc/bvals_fc.hpp	/^  AthenaArray<Real> pbuf;$/;"	m	class:FaceCenteredBoundaryVariable
pbval	mesh/mesh.hpp	/^  BoundaryValues *pbval;$/;"	m	class:MeshBlock
pbval_	bvals/bvals_interfaces.hpp	/^  BoundaryValues *pbval_;  \/\/ ptr to BoundaryValues that aggregates these$/;"	m	class:BoundaryVariable
pbval_	bvals/orbital/bvals_orbital.hpp	/^  BoundaryValues *pbval_;$/;"	m	class:OrbitalBoundaryCommunication
pbval_	orbital_advection/orbital_advection.hpp	/^  BoundaryValues *pbval_; \/\/ ptr to Boundaryvalues$/;"	m	class:OrbitalTransform::OrbitalAdvection
pco_	dustfluids/dustfluids.hpp	/^  Coordinates *pco_;$/;"	m	class:DustFluids
pco_	dustfluids/dustfluids_diffusion/dustfluids_diffusion.hpp	/^  Coordinates       *pco_;            \/\/ ptr to coordinates class$/;"	m	class:DustFluidsDiffusion
pco_	dustfluids/dustfluids_diffusion_cc/cell_center_diffusions.hpp	/^  Coordinates *pco_;            \/\/ ptr to coordinates class$/;"	m	class:DustFluidsCellCenterDiffusion
pco_	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  Coordinates *pco_;              \/\/ ptr to coordinates class$/;"	m	class:DustGasDrag
pco_	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  Coordinates *pco_;  \/\/ ptr to coordinates class$/;"	m	class:HydroDiffusion
pco_	orbital_advection/orbital_advection.hpp	/^  Coordinates    *pco_;   \/\/ ptr to Coordinates$/;"	m	class:OrbitalTransform::OrbitalAdvection
pcoarsec	mesh/mesh_refinement.hpp	/^  Coordinates *pcoarsec;$/;"	m	class:MeshRefinement
pcoeff	pgen/magnoh.cpp	/^Real alpha, beta, rho0, P0, pcoeff, vr, perturb, mphi;$/;"	m	namespace:__anon92	file:
pcoord	mesh/mesh.hpp	/^  Coordinates *pcoord;$/;"	m	class:MeshBlock
pdata_	athena_arrays.hpp	/^  T *pdata_;$/;"	m	class:AthenaArray
pdf	dustfluids/dustfluids_diffusion_cc/cell_center_diffusions.cpp	/^  pmy_dustfluids_(pdf), pmb_(pmb), pco_(pmb->pcoord),$/;"	v
pdf_	orbital_advection/orbital_advection.hpp	/^  DustFluids     *pdf_;   \/\/ ptr to DustFluids$/;"	m	class:OrbitalTransform::OrbitalAdvection
pdim_	fft/athena_fft.hpp	/^  int decomp_, pdim_;$/;"	m	class:FFTBlock::AthenaFFTDirection
pdim_	fft/athena_fft.hpp	/^  int decomp_, pdim_;$/;"	m	class:FFTBlock::FFTDriver
pdustfluids	mesh/mesh.hpp	/^  DustFluids *pdustfluids;$/;"	m	class:MeshBlock
peos	mesh/mesh.hpp	/^  EquationOfState *peos;$/;"	m	class:MeshBlock
peos_table	mesh/mesh.hpp	/^  EosTable *peos_table;$/;"	m	class:Mesh
periodic	bvals/bvals_interfaces.hpp	/^enum class BoundaryFlag {block=-1, undef, reflect, outflow, user, periodic,$/;"	m	class:BoundaryFlag
permute0_	fft/athena_fft.hpp	/^  int permute0_, permute1_, permute2_;$/;"	m	class:FFTBlock::AthenaFFTDirection
permute1_	fft/athena_fft.hpp	/^  int permute0_, permute1_, permute2_;$/;"	m	class:FFTBlock::AthenaFFTDirection
permute2_	fft/athena_fft.hpp	/^  int permute0_, permute1_, permute2_;$/;"	m	class:FFTBlock::AthenaFFTDirection
pert_amp	pgen/gr_torus.cpp	/^Real pert_amp, pert_kr, pert_kz;              \/\/ initial perturbations parameters$/;"	m	namespace:__anon39	file:
pert_kr	pgen/gr_torus.cpp	/^Real pert_amp, pert_kr, pert_kz;              \/\/ initial perturbations parameters$/;"	m	namespace:__anon39	file:
pert_kz	pgen/gr_torus.cpp	/^Real pert_amp, pert_kr, pert_kz;              \/\/ initial perturbations parameters$/;"	m	namespace:__anon39	file:
perturb	pgen/magnoh.cpp	/^Real alpha, beta, rho0, P0, pcoeff, vr, perturb, mphi;$/;"	m	namespace:__anon92	file:
pf_	orbital_advection/orbital_advection.hpp	/^  Field          *pf_;    \/\/ ptr to Field$/;"	m	class:OrbitalTransform::OrbitalAdvection
pfgrd	mesh/mesh.hpp	/^  FFTGravityDriver *pfgrd;$/;"	m	class:Mesh
pfield	mesh/mesh.hpp	/^  Field *pfield;$/;"	m	class:MeshBlock
pfirst_block	parameter_input.hpp	/^  InputBlock* pfirst_block;   \/\/ pointer to head node in singly linked list of InputBlock$/;"	m	class:ParameterInput
pfirst_data_	outputs/outputs.hpp	/^  OutputData *pfirst_data_;  \/\/ ptr to head OutputData node in doubly linked list$/;"	m	class:OutputType
pfirst_type_	outputs/outputs.hpp	/^  OutputType *pfirst_type_; \/\/ ptr to head OutputType node in singly linked list$/;"	m	class:Outputs
pfloor	pgen/inject_pebble_3D.cpp	/^Real dfloor, pfloor, float_min;$/;"	m	namespace:__anon62	file:
pfloor	pgen/strat.cpp	/^Real dfloor, pfloor;$/;"	m	namespace:__anon127	file:
pflux	field/field_diffusion/field_diffusion.hpp	/^  FaceField pflux;        \/\/ face-centered energy (Poynting) flux$/;"	m	class:FieldDiffusion
pflux	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> pflux;    \/\/ pencil buffer for flux$/;"	m	class:OrbitalTransform::OrbitalAdvection
pflux_	bvals/bvals.hpp	/^  AthenaArray<Real> pflux_;    \/\/ pencil buffer for remapping$/;"	m	class:BoundaryValues
pflux_df	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> pflux_df; \/\/ pencil buffer for flux (dust fluids)$/;"	m	class:OrbitalTransform::OrbitalAdvection
pgas	pgen/gr_linear_wave.cpp	/^Real rho, pgas;               \/\/ thermodynamic quantities$/;"	m	namespace:__anon84	file:
pgas_min	pgen/gr_torus.cpp	/^Real rho_min, rho_pow, pgas_min, pgas_pow;    \/\/ background parameters$/;"	m	namespace:__anon39	file:
pgas_min_	eos/eos.hpp	/^  Real pgas_min_, pgas_pow_;             \/\/ variables to control power-law pressure floor$/;"	m	class:EquationOfState
pgas_over_rho_peak	pgen/gr_torus.cpp	/^Real pgas_over_rho_peak, rho_amp;             \/\/ calculated torus parameters$/;"	m	namespace:__anon39	file:
pgas_pow	pgen/gr_torus.cpp	/^Real rho_min, rho_pow, pgas_min, pgas_pow;    \/\/ background parameters$/;"	m	namespace:__anon39	file:
pgas_pow_	eos/eos.hpp	/^  Real pgas_min_, pgas_pow_;             \/\/ variables to control power-law pressure floor$/;"	m	class:EquationOfState
pgrav	mesh/mesh.hpp	/^  Gravity *pgrav;$/;"	m	class:MeshBlock
ph_	orbital_advection/orbital_advection.hpp	/^  Hydro          *ph_;    \/\/ ptr to Hydro$/;"	m	class:OrbitalTransform::OrbitalAdvection
phase_trans	pgen/inject_pebble_3D.cpp	/^void phase_trans(Real rhoe, Real rho_g, AthenaArray<Real> rho_I, Real rho_v, Real &drho){$/;"	f	namespace:__anon63
phi	gravity/gravity.hpp	/^  AthenaArray<Real> phi;   \/\/ gravitational potential$/;"	m	class:Gravity
phi_orbit	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^omega_orbit[10], p_orbit[10], phi_orbit[10],$/;"	m	namespace:__anon68	file:
phi_planet	pgen/disk_dust_drift.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon64	file:
phi_planet	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^phi_planet[10], z_planet[10], t0_planet[10], time_drag, vk_planet[10],$/;"	m	namespace:__anon68	file:
phi_planet	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^phi_planet[10], z_planet[10], t0_planet[10], time_drag, vk_planet[10],$/;"	m	namespace:__anon109	file:
phi_planet	pgen/disk_streaming_cylindrical.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon54	file:
phi_planet	pgen/disk_streaming_spherical.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon75	file:
phi_planet	pgen/dust_diffusion.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon117	file:
phi_planet_0	pgen/disk_dust_diffusion.cpp	/^Real tau_relax, rs, gmstar, gmp, rad_planet, phi_planet_0, z_planet, t0_planet, t_end_planet, vk_planet, omega_planet, inv_omega_planet;$/;"	m	namespace:__anon70	file:
phi_planet_0	pgen/disk_planet_dust_cylindrical.cpp	/^Real rad_soft, gmp, inv_sqrt2gmp, rad_planet, phi_planet_0, z_planet,$/;"	m	namespace:__anon99	file:
phi_planet_0	pgen/disk_planet_dust_spherical.cpp	/^Real rad_soft, gmp, inv_sqrt2gmp, rad_planet, phi_planet_0, z_planet,$/;"	m	namespace:__anon113	file:
phi_vortex	pgen/disk_RWI_2D.cpp	/^dfloor, dffloor, Omega0, user_dt, phi_vortex,$/;"	m	namespace:__anon101	file:
phy_src1_i_	coordinates/coordinates.hpp	/^  AthenaArray<Real> phy_src1_i_, phy_src2_i_;$/;"	m	class:Coordinates
phy_src2_i_	coordinates/coordinates.hpp	/^  AthenaArray<Real> phy_src1_i_, phy_src2_i_;$/;"	m	class:Coordinates
phyd	hydro/hydro_diffusion/hydro_diffusion.cpp	/^  pmy_hydro_(phyd), pmb_(pmy_hydro_->pmy_block), pco_(pmb_->pcoord) {$/;"	v
phydro	mesh/mesh.hpp	/^  Hydro *phydro;$/;"	m	class:MeshBlock
pl	pgen/shk_cloud.cpp	/^Real gmma1, dl, pl, ul;$/;"	m	namespace:__anon74	file:
plan	fft/athena_fft.hpp	/^  fftw_plan plan;$/;"	m	struct:AthenaFFTPlan
plan	fft/athena_fft.hpp	/^  void *plan;$/;"	m	struct:AthenaFFTPlan
plan2d	fft/athena_fft.hpp	/^  struct fft_plan_2d *plan2d;$/;"	m	struct:AthenaFFTPlan	typeref:struct:AthenaFFTPlan::fft_plan_2d
plan3d	fft/athena_fft.hpp	/^  struct fft_plan_3d *plan3d;$/;"	m	struct:AthenaFFTPlan	typeref:struct:AthenaFFTPlan::fft_plan_3d
plan_fast_backward	fft/plimpton/fft_2d.h	/^  fftw_plan plan_fast_backward;$/;"	m	struct:fft_plan_2d
plan_fast_backward	fft/plimpton/fft_3d.h	/^  fftw_plan plan_fast_backward;$/;"	m	struct:fft_plan_3d
plan_fast_forward	fft/plimpton/fft_2d.h	/^  fftw_plan plan_fast_forward;$/;"	m	struct:fft_plan_2d
plan_fast_forward	fft/plimpton/fft_3d.h	/^  fftw_plan plan_fast_forward;$/;"	m	struct:fft_plan_3d
plan_mid_backward	fft/plimpton/fft_3d.h	/^  fftw_plan plan_mid_backward;$/;"	m	struct:fft_plan_3d
plan_mid_forward	fft/plimpton/fft_3d.h	/^  fftw_plan plan_mid_forward;$/;"	m	struct:fft_plan_3d
plan_slow_backward	fft/plimpton/fft_2d.h	/^  fftw_plan plan_slow_backward;$/;"	m	struct:fft_plan_2d
plan_slow_backward	fft/plimpton/fft_3d.h	/^  fftw_plan plan_slow_backward;$/;"	m	struct:fft_plan_3d
plan_slow_forward	fft/plimpton/fft_2d.h	/^  fftw_plan plan_slow_forward;$/;"	m	struct:fft_plan_2d
plan_slow_forward	fft/plimpton/fft_3d.h	/^  fftw_plan plan_slow_forward;$/;"	m	struct:fft_plan_3d
planets_number	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^vy_planet[10], vz_planet[10], gm_cur[11], rad_cor[10], planets_number;$/;"	m	namespace:__anon68	file:
planets_number	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^vy_planet[10], vz_planet[10], gm_cur[11], rad_cor[10], planets_number;$/;"	m	namespace:__anon109	file:
plast_data_	outputs/outputs.hpp	/^  OutputData *plast_data_;   \/\/ ptr to tail OutputData node in doubly linked list$/;"	m	class:OutputType
pleaf_	mesh/meshblock_tree.hpp	/^  MeshBlockTree** pleaf_;$/;"	m	class:MeshBlockTree
pline	parameter_input.hpp	/^  InputLine *pline;   \/\/ pointer to head node in nested singly linked list (in this block)$/;"	m	class:InputBlock
ploc	fft/athena_fft.hpp	/^  int iloc[3],ploc[3];$/;"	m	class:AthenaFFTIndex
pm	coordinates/coordinates.hpp	/^  Mesh *pm;$/;"	m	class:Coordinates
pm_	orbital_advection/orbital_advection.hpp	/^  Mesh           *pm_;    \/\/ ptr to Mesh$/;"	m	class:OrbitalTransform::OrbitalAdvection
pmb_	dustfluids/dustfluids_diffusion/dustfluids_diffusion.hpp	/^  MeshBlock         *pmb_;            \/\/ ptr to meshblock containing this DustFluidsDiffusion$/;"	m	class:DustFluidsDiffusion
pmb_	dustfluids/dustfluids_diffusion_cc/cell_center_diffusions.hpp	/^  MeshBlock   *pmb_;            \/\/ ptr to meshblock containing this DustFluidsDiffusion$/;"	m	class:DustFluidsCellCenterDiffusion
pmb_	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  MeshBlock   *pmb_;              \/\/ ptr to meshblock containing this DustGasDrag$/;"	m	class:DustGasDrag
pmb_	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  MeshBlock *pmb_;    \/\/ ptr to meshblock containing this HydroDiffusion$/;"	m	class:HydroDiffusion
pmb_	orbital_advection/orbital_advection.hpp	/^  MeshBlock      *pmb_;   \/\/ ptr to this meshblock$/;"	m	class:OrbitalTransform::OrbitalAdvection
pmesh_	mesh/meshblock_tree.cpp	/^Mesh* MeshBlockTree::pmesh_;$/;"	m	class:MeshBlockTree	file:
pmesh_	mesh/meshblock_tree.hpp	/^  static Mesh* pmesh_;$/;"	m	class:MeshBlockTree
pmg	mesh/mesh.hpp	/^  MGGravity* pmg;$/;"	m	class:MeshBlock
pmgbval	multigrid/multigrid.hpp	/^  MGBoundaryValues *pmgbval;$/;"	m	class:Multigrid
pmgrd	mesh/mesh.hpp	/^  MGGravityDriver *pmgrd;$/;"	m	class:Mesh
pmr	mesh/mesh.hpp	/^  MeshRefinement *pmr;$/;"	m	class:MeshBlock
pmy_block	coordinates/coordinates.hpp	/^  MeshBlock *pmy_block;  \/\/ ptr to MeshBlock containing this Coordinates$/;"	m	class:Coordinates
pmy_block	dustfluids/dustfluids.hpp	/^  MeshBlock* pmy_block;$/;"	m	class:DustFluids
pmy_block	field/field.hpp	/^  MeshBlock* pmy_block;  \/\/!> ptr to MeshBlock containing this Field$/;"	m	class:Field
pmy_block	field/field_diffusion/field_diffusion.hpp	/^  MeshBlock* pmy_block;$/;"	m	class:FieldDiffusion
pmy_block	gravity/gravity.hpp	/^  MeshBlock* pmy_block;  \/\/ ptr to MeshBlock containing this Field$/;"	m	class:Gravity
pmy_block	hydro/hydro.hpp	/^  MeshBlock* pmy_block;    \/\/ ptr to MeshBlock containing this Hydro$/;"	m	class:Hydro
pmy_block	scalars/scalars.cpp	/^    pmy_block(pmb) {$/;"	f
pmy_block	scalars/scalars.hpp	/^  MeshBlock* pmy_block;$/;"	m	class:PassiveScalars
pmy_block_	bvals/bvals.hpp	/^  MeshBlock *pmy_block_;      \/\/ ptr to MeshBlock containing this BoundaryValues$/;"	m	class:BoundaryValues
pmy_block_	bvals/bvals_interfaces.hpp	/^  MeshBlock *pmy_block_;   \/\/ ptr to MeshBlock containing this BoundaryVariable$/;"	m	class:BoundaryVariable
pmy_block_	bvals/orbital/bvals_orbital.hpp	/^  MeshBlock *pmy_block_;$/;"	m	class:OrbitalBoundaryCommunication
pmy_block_	eos/eos.hpp	/^  MeshBlock *pmy_block_;                 \/\/ ptr to MeshBlock containing this EOS$/;"	m	class:EquationOfState
pmy_block_	mesh/mesh_refinement.hpp	/^  MeshBlock *pmy_block_;$/;"	m	class:MeshRefinement
pmy_block_	multigrid/multigrid.hpp	/^  MeshBlock *pmy_block_;$/;"	m	class:Multigrid
pmy_block_	reconstruct/reconstruction.hpp	/^  MeshBlock* pmy_block_;  \/\/ ptr to MeshBlock containing this Reconstruction$/;"	m	class:Reconstruction
pmy_driver_	fft/athena_fft.hpp	/^  FFTDriver *pmy_driver_;$/;"	m	class:FFTBlock::AthenaFFTDirection
pmy_driver_	multigrid/multigrid.hpp	/^  MultigridDriver *pmy_driver_;$/;"	m	class:Multigrid
pmy_dustfluids_	dustfluids/dustfluids_diffusion/dustfluids_diffusion.hpp	/^  DustFluids        *pmy_dustfluids_; \/\/ ptr to DustFluids containing this DustFluidsDiffusion$/;"	m	class:DustFluidsDiffusion
pmy_dustfluids_	dustfluids/dustfluids_diffusion_cc/cell_center_diffusions.hpp	/^  DustFluids  *pmy_dustfluids_; \/\/ ptr to DustFluids containing this DustFluidsDiffusion$/;"	m	class:DustFluidsCellCenterDiffusion
pmy_dustfluids_	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  DustFluids  *pmy_dustfluids_;   \/\/ ptr to DustFluids containing this DustGasDrag$/;"	m	class:DustGasDrag
pmy_dustfluids_	dustfluids/srcterms/dustfluids_srcterms.hpp	/^  DustFluids *pmy_dustfluids_;      \/\/ ptr to DustFluids containing this DustFluidsSourceTerms$/;"	m	class:DustFluidsSourceTerms
pmy_fb	fft/athena_fft.hpp	/^  FFTBlock *pmy_fb;$/;"	m	class:FFTBlock::FFTDriver
pmy_hydro_	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  Hydro       *pmy_hydro_;        \/\/ ptr to hydro class$/;"	m	class:DustGasDrag
pmy_hydro_	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  Hydro *pmy_hydro_;  \/\/ ptr to Hydro containing this HydroDiffusion$/;"	m	class:HydroDiffusion
pmy_hydro_	hydro/srcterms/hydro_srcterms.hpp	/^  Hydro *pmy_hydro_;  \/\/ ptr to Hydro containing this HydroSourceTerms$/;"	m	class:HydroSourceTerms
pmy_mesh	mesh/mesh.hpp	/^  Mesh *pmy_mesh;  \/\/ ptr to Mesh containing this MeshBlock$/;"	m	class:MeshBlock
pmy_mesh_	bvals/bvals.hpp	/^  Mesh *pmy_mesh_;$/;"	m	class:BoundaryBase
pmy_mesh_	bvals/bvals_interfaces.hpp	/^  Mesh *pmy_mesh_;$/;"	m	class:BoundaryVariable
pmy_mesh_	bvals/orbital/bvals_orbital.hpp	/^  Mesh *pmy_mesh_;$/;"	m	class:OrbitalBoundaryCommunication
pmy_mesh_	fft/athena_fft.hpp	/^  Mesh *pmy_mesh_;$/;"	m	class:FFTBlock::FFTDriver
pmy_mesh_	multigrid/multigrid.hpp	/^  Mesh *pmy_mesh_;$/;"	m	class:MultigridDriver
pmy_mg_	bvals/cc/mg/bvals_mg.hpp	/^  Multigrid *pmy_mg_;$/;"	m	class:MGBoundaryValues
pmy_mgdriver_	task_list/mg_task_list.hpp	/^  MultigridDriver* pmy_mgdriver_;$/;"	m	class:MultigridTaskList
pmy_orbital_	bvals/orbital/bvals_orbital.hpp	/^  OrbitalAdvection *pmy_orbital_;$/;"	m	class:OrbitalBoundaryCommunication
pnext	outputs/outputs.hpp	/^  OutputData *pnext, *pprev;$/;"	m	struct:OutputData
pnext	parameter_input.hpp	/^  InputBlock *pnext;  \/\/ pointer to the next node in InputBlock singly linked list$/;"	m	class:InputBlock
pnext	parameter_input.hpp	/^  InputLine *pnext;   \/\/ pointer to the next node in this nested singly linked list$/;"	m	struct:InputLine
pnext_type	outputs/outputs.hpp	/^  OutputType *pnext_type;         \/\/ ptr to next node in singly linked list of OutputTypes$/;"	m	class:OutputType
polar	bvals/bvals_interfaces.hpp	/^                         polar, polar_wedge, shear_periodic};$/;"	m	class:BoundaryFlag
polar	bvals/bvals_interfaces.hpp	/^  bool polar; \/\/!> flag indicating boundary is across a pole$/;"	m	struct:NeighborBlock
polar_neighbor_north_	bvals/bvals.hpp	/^  SimpleNeighborBlock *polar_neighbor_north_, *polar_neighbor_south_;$/;"	m	class:BoundaryBase
polar_neighbor_south_	bvals/bvals.hpp	/^  SimpleNeighborBlock *polar_neighbor_north_, *polar_neighbor_south_;$/;"	m	class:BoundaryBase
polar_wedge	bvals/bvals_interfaces.hpp	/^                         polar, polar_wedge, shear_periodic};$/;"	m	class:BoundaryFlag
porb	mesh/mesh.hpp	/^  OrbitalAdvection *porb;$/;"	m	class:MeshBlock
post_plan	fft/plimpton/fft_2d.h	/^  struct remap_plan_2d *post_plan;      \/* remap from 2nd FFTs -> output *\/$/;"	m	struct:fft_plan_2d	typeref:struct:fft_plan_2d::remap_plan_2d
post_plan	fft/plimpton/fft_3d.h	/^  struct remap_plan_3d *post_plan;      \/* remap from 3rd FFTs -> output *\/$/;"	m	struct:fft_plan_3d	typeref:struct:fft_plan_3d::remap_plan_3d
pot_amp	pgen/gr_torus.cpp	/^Real pot_amp;                                 \/\/ vector potential amplitude$/;"	m	namespace:__anon39	file:
pot_pgas_cutoff	pgen/gr_torus.cpp	/^Real pot_pgas_pow, pot_pgas_cutoff;           \/\/ loops vector potential parameters$/;"	m	namespace:__anon39	file:
pot_pgas_pow	pgen/gr_torus.cpp	/^Real pot_pgas_pow, pot_pgas_cutoff;           \/\/ loops vector potential parameters$/;"	m	namespace:__anon39	file:
pot_r_max	pgen/gr_torus.cpp	/^Real pot_r_min, pot_r_max, pot_r_num;         \/\/ loops vector potential parameters$/;"	m	namespace:__anon39	file:
pot_r_min	pgen/gr_torus.cpp	/^Real pot_r_min, pot_r_max, pot_r_num;         \/\/ loops vector potential parameters$/;"	m	namespace:__anon39	file:
pot_r_num	pgen/gr_torus.cpp	/^Real pot_r_min, pot_r_max, pot_r_num;         \/\/ loops vector potential parameters$/;"	m	namespace:__anon39	file:
pot_r_pow	pgen/gr_torus.cpp	/^Real pot_r_pow;                               \/\/ density vector potential parameters$/;"	m	namespace:__anon39	file:
pot_rho_cutoff	pgen/gr_torus.cpp	/^Real pot_rho_pow, pot_rho_cutoff;             \/\/ density vector potential parameters$/;"	m	namespace:__anon39	file:
pot_rho_pow	pgen/gr_torus.cpp	/^Real pot_rho_pow, pot_rho_cutoff;             \/\/ density vector potential parameters$/;"	m	namespace:__anon39	file:
pot_samples	pgen/gr_torus.cpp	/^Real pot_samples;                             \/\/ number of sample points for integrating$/;"	m	namespace:__anon39	file:
pot_theta_min	pgen/gr_torus.cpp	/^Real pot_theta_min, pot_theta_num;            \/\/ loops vector potential parameters$/;"	m	namespace:__anon39	file:
pot_theta_num	pgen/gr_torus.cpp	/^Real pot_theta_min, pot_theta_num;            \/\/ loops vector potential parameters$/;"	m	namespace:__anon39	file:
pprev	outputs/outputs.hpp	/^  OutputData *pnext, *pprev;$/;"	m	struct:OutputData
pre_plan	fft/plimpton/fft_2d.h	/^  struct remap_plan_2d *pre_plan;       \/* remap from input -> 1st FFTs *\/$/;"	m	struct:fft_plan_2d	typeref:struct:fft_plan_2d::remap_plan_2d
pre_plan	fft/plimpton/fft_3d.h	/^  struct remap_plan_3d *pre_plan;       \/* remap from input -> 1st FFTs *\/$/;"	m	struct:fft_plan_3d	typeref:struct:fft_plan_3d::remap_plan_3d
pre_target	fft/plimpton/fft_2d.h	/^  int pre_target,mid_target;        \/* where to put remap results *\/$/;"	m	struct:fft_plan_2d
pre_target	fft/plimpton/fft_3d.h	/^  int pre_target;                   \/* where to put remap results *\/$/;"	m	struct:fft_plan_3d
prec	eos/general/hydrogen.cpp	/^Real prec = 1e-12;$/;"	m	namespace:__anon11	file:
precon	mesh/mesh.hpp	/^  Reconstruction *precon;$/;"	m	class:MeshBlock
pres	pgen/cpaw.cpp	/^Real den, pres, gm1, b_par, b_perp, v_perp, v_par;$/;"	m	namespace:__anon88	file:
press	pgen/dust_inelastic_collision.cpp	/^Real v0, t0, x0, user_dt, iso_cs, press, gamma_gas;$/;"	m	namespace:__anon143	file:
press	pgen/dusty_shock.cpp	/^Real press(Real rho, Real T) {$/;"	f
press	pgen/shock_tube.cpp	/^Real press(Real rho, Real T) {$/;"	f
pressure_floor_	eos/eos.hpp	/^  Real density_floor_, pressure_floor_;  \/\/ density and pressure floors$/;"	m	class:EquationOfState
prev_time	pgen/disk_VSI.cpp	/^prev_time, curr_time, next_time, edt;$/;"	m	namespace:__anon133	file:
prevnoct_	multigrid/multigrid.hpp	/^  int *noctets_, *prevnoct_;$/;"	m	class:MultigridDriver
prim	orbital_advection/orbital_advection.hpp	/^enum class OrbitalTransform {none=0, prim=1, cons=2, all=3};$/;"	m	class:OrbitalTransform
product	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> jacobi, jacobi_n, product, lambda, lambda_inv;$/;"	m	class:DustGasDrag
prograde	pgen/gr_torus.cpp	/^bool prograde;                                \/\/ flag indicating disk is prograde$/;"	m	namespace:__anon39	file:
proot_	mesh/meshblock_tree.cpp	/^MeshBlockTree* MeshBlockTree::proot_;$/;"	m	class:MeshBlockTree	file:
proot_	mesh/meshblock_tree.hpp	/^  static MeshBlockTree* proot_;$/;"	m	class:MeshBlockTree
ps_	orbital_advection/orbital_advection.hpp	/^  PassiveScalars *ps_;    \/\/ ptr to PassiveScalars$/;"	m	class:OrbitalTransform::OrbitalAdvection
pscalars	mesh/mesh.hpp	/^  PassiveScalars *pscalars;$/;"	m	class:MeshBlock
pslope	pgen/disk.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas;$/;"	m	namespace:__anon36	file:
pslope	pgen/disk_RWI_2D.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, beta, nu_alpha,$/;"	m	namespace:__anon101	file:
pslope	pgen/disk_dust_diffusion.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, beta, nu_alpha;$/;"	m	namespace:__anon70	file:
pslope	pgen/disk_dust_drift.cpp	/^Real gm0, r0, rho_0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, user_dt, iso_cs2_r0;$/;"	m	namespace:__anon64	file:
pslope	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real x1min, x1max, damping_rate, gm0, r0, rho0, dslope, p0_over_r0, pslope, beta,$/;"	m	namespace:__anon68	file:
pslope	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real x1min, x1max, damping_rate, gm0, r0, rho0, dslope, p0_over_r0, pslope, beta,$/;"	m	namespace:__anon109	file:
pslope	pgen/disk_planet_dust_cylindrical.cpp	/^gm0, r0, rho0, dslope, p0_over_r0, pslope, beta, gMth, nu_alpha,$/;"	m	namespace:__anon99	file:
pslope	pgen/disk_planet_dust_spherical.cpp	/^gm0, r0, rho0, dslope, p0_over_r0, pslope, beta, gMth, nu_alpha,$/;"	m	namespace:__anon113	file:
pslope	pgen/disk_streaming_cylindrical.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, amp;$/;"	m	namespace:__anon54	file:
pslope	pgen/disk_streaming_spherical.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, amp;$/;"	m	namespace:__anon75	file:
pslope	pgen/dust_NSH.cpp	/^Real pslope;$/;"	m	namespace:__anon103	file:
pslope	pgen/dust_diffusion.cpp	/^Real gm0, r0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, iso_cs2_r0;$/;"	m	namespace:__anon117	file:
pslope	pgen/streaming_eigen.cpp	/^Real pslope;$/;"	m	namespace:__anon66	file:
pslope	pgen/streaming_eigen_2dust.cpp	/^Real pslope;$/;"	m	namespace:__anon145	file:
pslope	pgen/streaming_nonlinear.cpp	/^Real pslope;$/;"	m	namespace:__anon135	file:
pslope	pgen/streaming_stratified.cpp	/^Real pslope;$/;"	m	namespace:__anon154	file:
ptable	eos/eos.hpp	/^  EosTable* ptable; \/\/ pointer to EOS table data$/;"	m	class:EquationOfState
ptlist_	task_list/task_list.hpp	/^  TimeIntegratorTaskList *ptlist_;$/;"	m	class:SuperTimeStepTaskList
ptrbd	mesh/mesh.hpp	/^  TurbulenceDriver *ptrbd;$/;"	m	class:Mesh
pvalue	pgen/disk_VSI.cpp	/^Real gm0, r0, rho0, pvalue, cs2_0, qvalue, beta, nu_alpha, dfloor, dffloor, rho_floor, Omega0,$/;"	m	namespace:__anon133	file:
pvars_cc_	mesh/mesh_refinement.hpp	/^  std::vector<std::tuple<AthenaArray<Real> *, AthenaArray<Real> *>> pvars_cc_;$/;"	m	class:MeshRefinement
pvars_fc_	mesh/mesh_refinement.hpp	/^  std::vector<std::tuple<FaceField *, FaceField *>> pvars_fc_;$/;"	m	class:MeshRefinement
q0	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^static Real q0[60], q1[60], Dist[60], k1[60], k2[60], k3[60], k4[60];\/\/RK4 parameters$/;"	m	namespace:__anon68	file:
q0	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^static Real q0[60], q1[60], Dist[60], k1[60], k2[60], k3[60], k4[60];\/\/RK4 parameters$/;"	m	namespace:__anon109	file:
q1	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^static Real q0[60], q1[60], Dist[60], k1[60], k2[60], k3[60], k4[60];\/\/RK4 parameters$/;"	m	namespace:__anon68	file:
q1	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^static Real q0[60], q1[60], Dist[60], k1[60], k2[60], k3[60], k4[60];\/\/RK4 parameters$/;"	m	namespace:__anon109	file:
qomL_	bvals/bvals.hpp	/^  Real qomL_;$/;"	m	class:BoundaryValues
qshear	orbital_advection/orbital_advection.hpp	/^  Real Omega0, qshear, shboxcoord; \/\/ parameters for shearing box in cartesian$/;"	m	class:OrbitalTransform::OrbitalAdvection
qshear	pgen/dust_NSH.cpp	/^Real Omega_0, qshear;$/;"	m	namespace:__anon103	file:
qshear	pgen/hb3.cpp	/^Real Omega_0, qshear;$/;"	m	namespace:__anon58	file:
qshear	pgen/hgb.cpp	/^Real Omega_0, qshear;$/;"	m	namespace:__anon115	file:
qshear	pgen/jgg.cpp	/^Real qshear, Omega0;$/;"	m	namespace:__anon123	file:
qshear	pgen/ssheet.cpp	/^Real qshear, Omega0;$/;"	m	namespace:__anon95	file:
qshear	pgen/ssheet_RWI_dust.cpp	/^Real sound_speed, gamma1, inv_gm1, d0, amp, x1size, x2size, x3size, qshear, Omega0,$/;"	m	namespace:__anon90	file:
qshear	pgen/ssheet_planet_dust.cpp	/^Real x1size, x2size, x3size, sound_speed, gm1, inv_gm1, d0, qshear, Omega0, beta,$/;"	m	namespace:__anon111	file:
qshear	pgen/strat.cpp	/^Real Omega_0, qshear;$/;"	m	namespace:__anon127	file:
qshear	pgen/streaming_eigen.cpp	/^Real Omega_0, qshear;$/;"	m	namespace:__anon66	file:
qshear	pgen/streaming_eigen_2dust.cpp	/^Real Omega_0, qshear;$/;"	m	namespace:__anon145	file:
qshear	pgen/streaming_nonlinear.cpp	/^Real Omega_0, qshear;$/;"	m	namespace:__anon135	file:
qshear	pgen/streaming_stratified.cpp	/^Real Omega_0, qshear;$/;"	m	namespace:__anon154	file:
qshear_	dustfluids/srcterms/dustfluids_srcterms.hpp	/^  Real Omega_0_, qshear_;           \/\/ Orbital freq and shear rate in shearing box$/;"	m	class:DustFluidsSourceTerms
qshear_	hydro/srcterms/hydro_srcterms.hpp	/^  Real Omega_0_, qshear_; \/\/ Orbital freq and shear rate$/;"	m	class:HydroSourceTerms
qvalue	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> qvalue, weight_gas, weight_dust;$/;"	m	class:DustGasDrag
qvalue	pgen/disk_VSI.cpp	/^Real gm0, r0, rho0, pvalue, cs2_0, qvalue, beta, nu_alpha, dfloor, dffloor, rho_floor, Omega0,$/;"	m	namespace:__anon133	file:
r	scalars/scalars.hpp	/^  AthenaArray<Real> r;  \/\/ , r1;$/;"	m	class:PassiveScalars
r0	pgen/disk.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas;$/;"	m	namespace:__anon36	file:
r0	pgen/disk_RWI_2D.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, beta, nu_alpha,$/;"	m	namespace:__anon101	file:
r0	pgen/disk_VSI.cpp	/^Real gm0, r0, rho0, pvalue, cs2_0, qvalue, beta, nu_alpha, dfloor, dffloor, rho_floor, Omega0,$/;"	m	namespace:__anon133	file:
r0	pgen/disk_dust_diffusion.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, beta, nu_alpha;$/;"	m	namespace:__anon70	file:
r0	pgen/disk_dust_drift.cpp	/^Real gm0, r0, rho_0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, user_dt, iso_cs2_r0;$/;"	m	namespace:__anon64	file:
r0	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real x1min, x1max, damping_rate, gm0, r0, rho0, dslope, p0_over_r0, pslope, beta,$/;"	m	namespace:__anon68	file:
r0	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real x1min, x1max, damping_rate, gm0, r0, rho0, dslope, p0_over_r0, pslope, beta,$/;"	m	namespace:__anon109	file:
r0	pgen/disk_planet_dust_cylindrical.cpp	/^gm0, r0, rho0, dslope, p0_over_r0, pslope, beta, gMth, nu_alpha,$/;"	m	namespace:__anon99	file:
r0	pgen/disk_planet_dust_spherical.cpp	/^gm0, r0, rho0, dslope, p0_over_r0, pslope, beta, gMth, nu_alpha,$/;"	m	namespace:__anon113	file:
r0	pgen/disk_streaming_cylindrical.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, amp;$/;"	m	namespace:__anon54	file:
r0	pgen/disk_streaming_spherical.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, amp;$/;"	m	namespace:__anon75	file:
r0	pgen/dust_diffusion.cpp	/^Real gm0, r0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, iso_cs2_r0;$/;"	m	namespace:__anon117	file:
r0_	dustfluids/dustfluids_diffusion/dustfluids_diffusion.hpp	/^  Real              r0_;              \/\/ The length unit of radial direction in disk problem$/;"	m	class:DustFluidsDiffusion
r0_bump	pgen/disk_RWI_2D.cpp	/^A_bump, sigma_bump, r0_bump, width_vortex, eta_gas, beta_gas, ks_gas,$/;"	m	namespace:__anon101	file:
r0_bump	pgen/disk_dust_diffusion.cpp	/^Real A_bump, sigma_bump, r0_bump;$/;"	m	namespace:__anon70	file:
r0_vortex	pgen/disk_RWI_2D.cpp	/^vel_vortex, r0_vortex, x0_vortex, y0_vortex, amp, time_drag, x1min, x1max,$/;"	m	namespace:__anon101	file:
r_cc	scalars/scalars.hpp	/^  AthenaArray<Real> s_cc, r_cc;       \/\/ cell-centered approximations$/;"	m	class:PassiveScalars
r_crit	pgen/gr_bondi.cpp	/^Real r_crit;        \/\/ sonic point radius$/;"	m	namespace:__anon80	file:
r_edge	pgen/gr_torus.cpp	/^Real r_edge, r_peak, l, r_peak_max, rho_max;  \/\/ torus parameters$/;"	m	namespace:__anon39	file:
r_jet	pgen/jet.cpp	/^Real r_jet, d_jet, p_jet, vx_jet, vy_jet, vz_jet, bx_jet, by_jet, bz_jet;$/;"	m	namespace:__anon77	file:
r_peak	pgen/gr_torus.cpp	/^Real r_edge, r_peak, l, r_peak_max, rho_max;  \/\/ torus parameters$/;"	m	namespace:__anon39	file:
r_peak_max	pgen/gr_torus.cpp	/^Real r_edge, r_peak, l, r_peak_max, rho_max;  \/\/ torus parameters$/;"	m	namespace:__anon39	file:
rad_cor	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^vy_planet[10], vz_planet[10], gm_cur[11], rad_cor[10], planets_number;$/;"	m	namespace:__anon68	file:
rad_cor	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^vy_planet[10], vz_planet[10], gm_cur[11], rad_cor[10], planets_number;$/;"	m	namespace:__anon109	file:
rad_planet	pgen/disk_dust_diffusion.cpp	/^Real tau_relax, rs, gmstar, gmp, rad_planet, phi_planet_0, z_planet, t0_planet, t_end_planet, vk_planet, omega_planet, inv_omega_planet;$/;"	m	namespace:__anon70	file:
rad_planet	pgen/disk_dust_drift.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon64	file:
rad_planet	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real tau_relax[10], rad_soft[10], gmp[10], inv_sqrt2gmp[10], rad_planet[10],$/;"	m	namespace:__anon68	file:
rad_planet	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real tau_relax[10], rad_soft[10], gmp[10], inv_sqrt2gmp[10], rad_planet[10],$/;"	m	namespace:__anon109	file:
rad_planet	pgen/disk_planet_dust_cylindrical.cpp	/^Real rad_soft, gmp, inv_sqrt2gmp, rad_planet, phi_planet_0, z_planet,$/;"	m	namespace:__anon99	file:
rad_planet	pgen/disk_planet_dust_spherical.cpp	/^Real rad_soft, gmp, inv_sqrt2gmp, rad_planet, phi_planet_0, z_planet,$/;"	m	namespace:__anon113	file:
rad_planet	pgen/disk_streaming_cylindrical.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon54	file:
rad_planet	pgen/disk_streaming_spherical.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon75	file:
rad_planet	pgen/dust_diffusion.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon117	file:
rad_soft	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real tau_relax[10], rad_soft[10], gmp[10], inv_sqrt2gmp[10], rad_planet[10],$/;"	m	namespace:__anon68	file:
rad_soft	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real tau_relax[10], rad_soft[10], gmp[10], inv_sqrt2gmp[10], rad_planet[10],$/;"	m	namespace:__anon109	file:
rad_soft	pgen/disk_planet_dust_cylindrical.cpp	/^Real rad_soft, gmp, inv_sqrt2gmp, rad_planet, phi_planet_0, z_planet,$/;"	m	namespace:__anon99	file:
rad_soft	pgen/disk_planet_dust_spherical.cpp	/^Real rad_soft, gmp, inv_sqrt2gmp, rad_planet, phi_planet_0, z_planet,$/;"	m	namespace:__anon113	file:
radius	pgen/slotted_cylinder.cpp	/^Real radius, omega_x1, omega_x2, omega, iso_cs;$/;"	m	namespace:__anon82	file:
radius_inner_damping	pgen/disk_RWI_2D.cpp	/^tau_damping, damping_rate, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon101	file:
radius_inner_damping	pgen/disk_VSI.cpp	/^x1min, x1max, x2min, x2max, damping_rate, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon133	file:
radius_inner_damping	pgen/disk_dust_diffusion.cpp	/^Real radius_inner_damping, radius_outer_damping, inner_ratio_region, outer_ratio_region,$/;"	m	namespace:__anon70	file:
radius_inner_damping	pgen/disk_dust_drift.cpp	/^Real radius_inner_damping, radius_outer_damping, inner_ratio_region, outer_ratio_region,$/;"	m	namespace:__anon64	file:
radius_inner_damping	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^nu_alpha, dfloor, dffloor, Omega0, user_dt, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon68	file:
radius_inner_damping	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^nu_alpha, dfloor, dffloor, Omega0, user_dt, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon109	file:
radius_inner_damping	pgen/disk_planet_dust_cylindrical.cpp	/^radius_inner_damping, radius_outer_damping, inner_ratio_region,$/;"	m	namespace:__anon99	file:
radius_inner_damping	pgen/disk_planet_dust_spherical.cpp	/^radius_inner_damping, radius_outer_damping, inner_ratio_region,$/;"	m	namespace:__anon113	file:
radius_inner_damping	pgen/disk_streaming_cylindrical.cpp	/^Real radius_inner_damping, radius_outer_damping, inner_ratio_region, outer_ratio_region,$/;"	m	namespace:__anon54	file:
radius_inner_damping	pgen/disk_streaming_spherical.cpp	/^Real radius_inner_damping, radius_outer_damping, inner_ratio_region, outer_ratio_region,$/;"	m	namespace:__anon75	file:
radius_inner_damping	pgen/dust_diffusion.cpp	/^Real radius_inner_damping, radius_outer_damping, inner_ratio_region, outer_ratio_region,$/;"	m	namespace:__anon117	file:
radius_inner_damping	pgen/ssheet_RWI_dust.cpp	/^A_bump, sigma_bump, x1min, x1max, damping_rate, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon90	file:
radius_inner_damping	pgen/ssheet_planet_dust.cpp	/^x1min, x1max, damping_rate, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon111	file:
radius_outer_damping	pgen/disk_RWI_2D.cpp	/^tau_damping, damping_rate, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon101	file:
radius_outer_damping	pgen/disk_VSI.cpp	/^x1min, x1max, x2min, x2max, damping_rate, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon133	file:
radius_outer_damping	pgen/disk_dust_diffusion.cpp	/^Real radius_inner_damping, radius_outer_damping, inner_ratio_region, outer_ratio_region,$/;"	m	namespace:__anon70	file:
radius_outer_damping	pgen/disk_dust_drift.cpp	/^Real radius_inner_damping, radius_outer_damping, inner_ratio_region, outer_ratio_region,$/;"	m	namespace:__anon64	file:
radius_outer_damping	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^nu_alpha, dfloor, dffloor, Omega0, user_dt, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon68	file:
radius_outer_damping	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^nu_alpha, dfloor, dffloor, Omega0, user_dt, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon109	file:
radius_outer_damping	pgen/disk_planet_dust_cylindrical.cpp	/^radius_inner_damping, radius_outer_damping, inner_ratio_region,$/;"	m	namespace:__anon99	file:
radius_outer_damping	pgen/disk_planet_dust_spherical.cpp	/^radius_inner_damping, radius_outer_damping, inner_ratio_region,$/;"	m	namespace:__anon113	file:
radius_outer_damping	pgen/disk_streaming_cylindrical.cpp	/^Real radius_inner_damping, radius_outer_damping, inner_ratio_region, outer_ratio_region,$/;"	m	namespace:__anon54	file:
radius_outer_damping	pgen/disk_streaming_spherical.cpp	/^Real radius_inner_damping, radius_outer_damping, inner_ratio_region, outer_ratio_region,$/;"	m	namespace:__anon75	file:
radius_outer_damping	pgen/dust_diffusion.cpp	/^Real radius_inner_damping, radius_outer_damping, inner_ratio_region, outer_ratio_region,$/;"	m	namespace:__anon117	file:
radius_outer_damping	pgen/ssheet_RWI_dust.cpp	/^A_bump, sigma_bump, x1min, x1max, damping_rate, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon90	file:
radius_outer_damping	pgen/ssheet_planet_dust.cpp	/^x1min, x1max, damping_rate, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon111	file:
ran2	utils/ran2.cpp	/^double ran2(std::int64_t *idum) {$/;"	f
rand_amp	pgen/disk_dust_drift.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon64	file:
rand_amp	pgen/disk_streaming_cylindrical.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon54	file:
rand_amp	pgen/disk_streaming_spherical.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon75	file:
rand_amp	pgen/dust_diffusion.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon117	file:
rank	bvals/bvals_interfaces.hpp	/^  int rank;    \/\/!< MPI rank of neighbor$/;"	m	struct:SimpleNeighborBlock
ranklist	mesh/mesh.hpp	/^  int *nslist, *ranklist, *nblist;$/;"	m	class:Mesh
ranklist_	fft/athena_fft.hpp	/^  int *ranklist_, *nslist_, *nblist_;$/;"	m	class:FFTBlock::FFTDriver
ranklist_	multigrid/multigrid.hpp	/^  int *nslist_, *nblist_, *nvlist_, *nvslist_, *nvlisti_, *nvslisti_, *ranklist_;$/;"	m	class:MultigridDriver
rdisp	mesh/mesh.hpp	/^  int *rdisp, *ddisp;$/;"	m	class:Mesh
rdx_	multigrid/multigrid.hpp	/^  Real rdx_, rdy_, rdz_;$/;"	m	class:Multigrid
rdy_	multigrid/multigrid.hpp	/^  Real rdx_, rdy_, rdz_;$/;"	m	class:Multigrid
rdz_	multigrid/multigrid.hpp	/^  Real rdx_, rdy_, rdz_;$/;"	m	class:Multigrid
read	outputs/io_wrapper.hpp	/^  enum class FileMode {read, write};$/;"	m	class:IOWrapper::FileMode
recv	bvals/bvals_interfaces.hpp	/^  Real *send[kMaxNeighbor], *recv[kMaxNeighbor];$/;"	m	struct:BoundaryData
recv_bufloc	fft/plimpton/remap_2d.h	/^  int *recv_bufloc;                 \/* offset in scratch buf for each recv *\/$/;"	m	struct:remap_plan_2d
recv_bufloc	fft/plimpton/remap_3d.h	/^  int *recv_bufloc;                 \/* offset in scratch buf for each recv *\/$/;"	m	struct:remap_plan_3d
recv_count	bvals/bvals_interfaces.hpp	/^  int send_count[kMaxNeighbor], recv_count[kMaxNeighbor];$/;"	m	struct:ShearNeighborData
recv_flx_same_lvl_	bvals/fc/bvals_fc.hpp	/^  bool recv_flx_same_lvl_;$/;"	m	class:FaceCenteredBoundaryVariable
recv_neighbor	bvals/bvals_interfaces.hpp	/^  SimpleNeighborBlock send_neighbor[kMaxNeighbor], recv_neighbor[kMaxNeighbor];$/;"	m	struct:ShearNeighborData
recv_offset	fft/plimpton/remap_2d.h	/^  int *recv_offset;                 \/* insertion loc for each recv *\/$/;"	m	struct:remap_plan_2d
recv_offset	fft/plimpton/remap_3d.h	/^  int *recv_offset;                 \/* insertion loc for each recv *\/$/;"	m	struct:remap_plan_3d
recv_proc	fft/plimpton/remap_2d.h	/^  int *recv_proc;                   \/* proc to recv each message from *\/$/;"	m	struct:remap_plan_2d
recv_proc	fft/plimpton/remap_3d.h	/^  int *recv_proc;                   \/* proc to recv each message from *\/$/;"	m	struct:remap_plan_3d
recv_size	fft/plimpton/remap_2d.h	/^  int *recv_size;                   \/* size of each recv message *\/$/;"	m	struct:remap_plan_2d
recv_size	fft/plimpton/remap_3d.h	/^  int *recv_size;                   \/* size of each recv message *\/$/;"	m	struct:remap_plan_3d
refine_factor	pgen/disk_RWI_2D.cpp	/^refine_factor, derefine_factor, refine_rad_min, refine_rad_max;$/;"	m	namespace:__anon101	file:
refine_factor	pgen/disk_planet_dust_cylindrical.cpp	/^refine_factor, derefine_factor, refine_rad_min, refine_rad_max;$/;"	m	namespace:__anon99	file:
refine_factor	pgen/disk_planet_dust_spherical.cpp	/^refine_factor, derefine_factor, refine_rad_min, refine_rad_max;$/;"	m	namespace:__anon113	file:
refine_flag_	mesh/mesh_refinement.hpp	/^  int refine_flag_, neighbor_rflag_, deref_count_, deref_threshold_;$/;"	m	class:MeshRefinement
refine_r_max	pgen/disk_VSI.cpp	/^amp, time_drag, time_refine, refine_theta_upper, refine_theta_lower, refine_r_min, refine_r_max,$/;"	m	namespace:__anon133	file:
refine_r_min	pgen/disk_VSI.cpp	/^amp, time_drag, time_refine, refine_theta_upper, refine_theta_lower, refine_r_min, refine_r_max,$/;"	m	namespace:__anon133	file:
refine_rad_max	pgen/disk_RWI_2D.cpp	/^refine_factor, derefine_factor, refine_rad_min, refine_rad_max;$/;"	m	namespace:__anon101	file:
refine_rad_max	pgen/disk_planet_dust_cylindrical.cpp	/^refine_factor, derefine_factor, refine_rad_min, refine_rad_max;$/;"	m	namespace:__anon99	file:
refine_rad_max	pgen/disk_planet_dust_spherical.cpp	/^refine_factor, derefine_factor, refine_rad_min, refine_rad_max;$/;"	m	namespace:__anon113	file:
refine_rad_min	pgen/disk_RWI_2D.cpp	/^refine_factor, derefine_factor, refine_rad_min, refine_rad_max;$/;"	m	namespace:__anon101	file:
refine_rad_min	pgen/disk_planet_dust_cylindrical.cpp	/^refine_factor, derefine_factor, refine_rad_min, refine_rad_max;$/;"	m	namespace:__anon99	file:
refine_rad_min	pgen/disk_planet_dust_spherical.cpp	/^refine_factor, derefine_factor, refine_rad_min, refine_rad_max;$/;"	m	namespace:__anon113	file:
refine_theta_lower	pgen/disk_VSI.cpp	/^amp, time_drag, time_refine, refine_theta_upper, refine_theta_lower, refine_r_min, refine_r_max,$/;"	m	namespace:__anon133	file:
refine_theta_upper	pgen/disk_VSI.cpp	/^amp, time_drag, time_refine, refine_theta_upper, refine_theta_lower, refine_r_min, refine_r_max,$/;"	m	namespace:__anon133	file:
reflect	bvals/bvals_interfaces.hpp	/^enum class BoundaryFlag {block=-1, undef, reflect, outflow, user, periodic,$/;"	m	class:BoundaryFlag
rem	pgen/dusty_wave.cpp	/^Real ev[NWAVE], rem[NWAVE][NWAVE], lem[NWAVE][NWAVE];$/;"	m	namespace:__anon86	file:
rem	pgen/linear_wave.cpp	/^Real ev[NWAVE], rem[NWAVE][NWAVE], lem[NWAVE][NWAVE];$/;"	m	namespace:__anon125	file:
remap_2d	fft/plimpton/remap_2d.cpp	/^void remap_2d(double *in, double *out, double *buf,$/;"	f
remap_2d_	fft/plimpton/remap_2d.h	/^#define remap_2d_ /;"	d
remap_2d_collide	fft/plimpton/remap_2d.cpp	/^int remap_2d_collide(struct extent_2d *block1, struct extent_2d *block2,$/;"	f
remap_2d_create_plan	fft/plimpton/remap_2d.cpp	/^struct remap_plan_2d *remap_2d_create_plan($/;"	f
remap_2d_create_plan_	fft/plimpton/remap_2d.h	/^#define remap_2d_create_plan_ /;"	d
remap_2d_destroy_plan	fft/plimpton/remap_2d.cpp	/^void remap_2d_destroy_plan(struct remap_plan_2d *plan)$/;"	f
remap_2d_destroy_plan_	fft/plimpton/remap_2d.h	/^#define remap_2d_destroy_plan_ /;"	d
remap_3d	fft/plimpton/remap_3d.cpp	/^void remap_3d(double *in, double *out, double *buf,$/;"	f
remap_3d_	fft/plimpton/remap_3d.h	/^#define remap_3d_ /;"	d
remap_3d_collide	fft/plimpton/remap_3d.cpp	/^int remap_3d_collide(struct extent_3d *block1, struct extent_3d *block2,$/;"	f
remap_3d_create_plan	fft/plimpton/remap_3d.cpp	/^struct remap_plan_3d *remap_3d_create_plan($/;"	f
remap_3d_create_plan_	fft/plimpton/remap_3d.h	/^#define remap_3d_create_plan_ /;"	d
remap_3d_destroy_plan	fft/plimpton/remap_3d.cpp	/^void remap_3d_destroy_plan(struct remap_plan_3d *plan)$/;"	f
remap_3d_destroy_plan_	fft/plimpton/remap_3d.h	/^#define remap_3d_destroy_plan_ /;"	d
remap_plan_2d	fft/plimpton/remap_2d.h	/^struct remap_plan_2d {$/;"	s
remap_plan_3d	fft/plimpton/remap_3d.h	/^struct remap_plan_3d {$/;"	s
req_flux_north_recv_	bvals/fc/bvals_fc.hpp	/^  MPI_Request *req_flux_north_send_, *req_flux_north_recv_;$/;"	m	class:FaceCenteredBoundaryVariable
req_flux_north_send_	bvals/fc/bvals_fc.hpp	/^  MPI_Request *req_flux_north_send_, *req_flux_north_recv_;$/;"	m	class:FaceCenteredBoundaryVariable
req_flux_south_recv_	bvals/fc/bvals_fc.hpp	/^  MPI_Request *req_flux_south_send_, *req_flux_south_recv_;$/;"	m	class:FaceCenteredBoundaryVariable
req_flux_south_send_	bvals/fc/bvals_fc.hpp	/^  MPI_Request *req_flux_south_send_, *req_flux_south_recv_;$/;"	m	class:FaceCenteredBoundaryVariable
req_recv	bvals/bvals_interfaces.hpp	/^  MPI_Request req_send[kMaxNeighbor], req_recv[kMaxNeighbor];$/;"	m	struct:BoundaryData
req_send	bvals/bvals_interfaces.hpp	/^  MPI_Request req_send[kMaxNeighbor], req_recv[kMaxNeighbor];$/;"	m	struct:BoundaryData
request	fft/plimpton/remap_2d.h	/^  MPI_Request *request;             \/* MPI request for each posted recv *\/$/;"	m	struct:remap_plan_2d
request	fft/plimpton/remap_3d.h	/^  MPI_Request *request;             \/* MPI request for each posted recv *\/$/;"	m	struct:remap_plan_3d
rho	pgen/gr_linear_wave.cpp	/^Real rho, pgas;               \/\/ thermodynamic quantities$/;"	m	namespace:__anon84	file:
rho0	pgen/disk.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas;$/;"	m	namespace:__anon36	file:
rho0	pgen/disk_3d_mhd_dust.cpp	/^Real rho0, alpha, HoR0, HoRc, theta_trans;$/;"	m	namespace:__anon60	file:
rho0	pgen/disk_RWI_2D.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, beta, nu_alpha,$/;"	m	namespace:__anon101	file:
rho0	pgen/disk_VSI.cpp	/^Real gm0, r0, rho0, pvalue, cs2_0, qvalue, beta, nu_alpha, dfloor, dffloor, rho_floor, Omega0,$/;"	m	namespace:__anon133	file:
rho0	pgen/disk_dust_diffusion.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, beta, nu_alpha;$/;"	m	namespace:__anon70	file:
rho0	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real x1min, x1max, damping_rate, gm0, r0, rho0, dslope, p0_over_r0, pslope, beta,$/;"	m	namespace:__anon68	file:
rho0	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real x1min, x1max, damping_rate, gm0, r0, rho0, dslope, p0_over_r0, pslope, beta,$/;"	m	namespace:__anon109	file:
rho0	pgen/disk_planet_dust_cylindrical.cpp	/^gm0, r0, rho0, dslope, p0_over_r0, pslope, beta, gMth, nu_alpha,$/;"	m	namespace:__anon99	file:
rho0	pgen/disk_planet_dust_spherical.cpp	/^gm0, r0, rho0, dslope, p0_over_r0, pslope, beta, gMth, nu_alpha,$/;"	m	namespace:__anon113	file:
rho0	pgen/disk_streaming_cylindrical.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, amp;$/;"	m	namespace:__anon54	file:
rho0	pgen/disk_streaming_spherical.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, amp;$/;"	m	namespace:__anon75	file:
rho0	pgen/dust_diffusion.cpp	/^Real v0, t0, x0, d0, rho0, v1, v2, v3;$/;"	m	namespace:__anon117	file:
rho0	pgen/field_loop_poles.cpp	/^Real vy0, rho0, isocs2, gamma_gas;$/;"	m	namespace:__anon56	file:
rho0	pgen/magnoh.cpp	/^Real alpha, beta, rho0, P0, pcoeff, vr, perturb, mphi;$/;"	m	namespace:__anon92	file:
rhoUnit	utils/interp_table.hpp	/^  Real rhoUnit, eUnit, hUnit;$/;"	m	class:EosTable
rho_0	pgen/disk_dust_drift.cpp	/^Real gm0, r0, rho_0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, user_dt, iso_cs2_r0;$/;"	m	namespace:__anon64	file:
rho_amp	pgen/gr_torus.cpp	/^Real pgas_over_rho_peak, rho_amp;             \/\/ calculated torus parameters$/;"	m	namespace:__anon39	file:
rho_dust_imag	pgen/streaming_eigen.cpp	/^Real rho_dust_real[NDUSTFLUIDS],  rho_dust_imag[NDUSTFLUIDS];$/;"	m	namespace:__anon66	file:
rho_dust_imag	pgen/streaming_eigen_2dust.cpp	/^Real rho_dust_real[NDUSTFLUIDS],  rho_dust_imag[NDUSTFLUIDS];$/;"	m	namespace:__anon145	file:
rho_dust_real	pgen/streaming_eigen.cpp	/^Real rho_dust_real[NDUSTFLUIDS],  rho_dust_imag[NDUSTFLUIDS];$/;"	m	namespace:__anon66	file:
rho_dust_real	pgen/streaming_eigen_2dust.cpp	/^Real rho_dust_real[NDUSTFLUIDS],  rho_dust_imag[NDUSTFLUIDS];$/;"	m	namespace:__anon145	file:
rho_floor	pgen/disk_3d_mhd_dust.cpp	/^Real Rbuf, rho_floor, time_drag;$/;"	m	namespace:__anon60	file:
rho_floor	pgen/disk_VSI.cpp	/^Real gm0, r0, rho0, pvalue, cs2_0, qvalue, beta, nu_alpha, dfloor, dffloor, rho_floor, Omega0,$/;"	m	namespace:__anon133	file:
rho_g0	pgen/dusty_soundwave.cpp	/^Real rho_g0, p0, u0, v0, w0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon105	file:
rho_gas_imag	pgen/streaming_eigen.cpp	/^Real rho_gas_real,  rho_gas_imag,  velx_gas_real, velx_gas_imag;$/;"	m	namespace:__anon66	file:
rho_gas_imag	pgen/streaming_eigen_2dust.cpp	/^Real rho_gas_real,  rho_gas_imag,  velx_gas_real, velx_gas_imag;$/;"	m	namespace:__anon145	file:
rho_gas_real	pgen/streaming_eigen.cpp	/^Real rho_gas_real,  rho_gas_imag,  velx_gas_real, velx_gas_imag;$/;"	m	namespace:__anon66	file:
rho_gas_real	pgen/streaming_eigen_2dust.cpp	/^Real rho_gas_real,  rho_gas_imag,  velx_gas_real, velx_gas_imag;$/;"	m	namespace:__anon145	file:
rho_ice_inter	pgen/inject_pebble_3D.cpp	/^Real f_ICE_inter0, m_p0, rho_sil_inter, rho_ice_inter;$/;"	m	namespace:__anon62	file:
rho_max	pgen/gr_torus.cpp	/^Real r_edge, r_peak, l, r_peak_max, rho_max;  \/\/ torus parameters$/;"	m	namespace:__anon39	file:
rho_min	pgen/gr_torus.cpp	/^Real rho_min, rho_pow, pgas_min, pgas_pow;    \/\/ background parameters$/;"	m	namespace:__anon39	file:
rho_min_	eos/eos.hpp	/^  Real rho_min_, rho_pow_;               \/\/ variables to control power-law denity floor$/;"	m	class:EquationOfState
rho_pow	pgen/gr_torus.cpp	/^Real rho_min, rho_pow, pgas_min, pgas_pow;    \/\/ background parameters$/;"	m	namespace:__anon39	file:
rho_pow_	eos/eos.hpp	/^  Real rho_min_, rho_pow_;               \/\/ variables to control power-law denity floor$/;"	m	class:EquationOfState
rho_sil_inter	pgen/inject_pebble_3D.cpp	/^Real f_ICE_inter0, m_p0, rho_sil_inter, rho_ice_inter;$/;"	m	namespace:__anon62	file:
rho_unit_	eos/eos.hpp	/^  Real rho_unit_, inv_rho_unit_;         \/\/ physical unit\/sim unit for mass density$/;"	m	class:EquationOfState
rhog0	pgen/dust_NSH.cpp	/^Real amp, nwx, nwy, nwz, rhog0; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon103	file:
rhog0	pgen/streaming_eigen.cpp	/^Real amp, nwx, nwy, nwz, rhog0; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon66	file:
rhog0	pgen/streaming_eigen_2dust.cpp	/^Real amp, nwx, nwy, nwz, rhog0; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon145	file:
rhog0	pgen/streaming_nonlinear.cpp	/^Real amp, nwx, nwy, nwz, rhog0; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon135	file:
ring_D2G	pgen/disk_RWI_2D.cpp	/^Real initial_D2G[NDUSTFLUIDS], ring_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS], weight_dust[NDUSTFLUIDS];$/;"	m	namespace:__anon101	file:
ring_D2G	pgen/disk_dust_diffusion.cpp	/^Real initial_D2G[NDUSTFLUIDS], ring_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS],$/;"	m	namespace:__anon70	file:
rl3d_	scalars/scalars.hpp	/^  AthenaArray<Real> rl3d_, rr3d_;$/;"	m	class:PassiveScalars
rl_	scalars/scalars.hpp	/^  AthenaArray<Real> rl_, rr_, rlb_;$/;"	m	class:PassiveScalars
rlb_	scalars/scalars.hpp	/^  AthenaArray<Real> rl_, rr_, rlb_;$/;"	m	class:PassiveScalars
rn	pgen/disk_dust_drift.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon64	file:
rn	pgen/disk_streaming_cylindrical.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon54	file:
rn	pgen/disk_streaming_spherical.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon75	file:
rn	pgen/dust_diffusion.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon117	file:
rng_generator	fft/turbulence.hpp	/^  std::mt19937_64 rng_generator;$/;"	m	class:TurbulenceDriver
root_level	mesh/mesh.hpp	/^  int root_level, max_level, current_level;$/;"	m	class:Mesh
rootbuf_	multigrid/multigrid.hpp	/^  Real *rootbuf_;$/;"	m	class:MultigridDriver
rotl	multigrid/multigrid.hpp	/^inline std::int64_t rotl(std::int64_t i, int s) {$/;"	f
rr3d_	scalars/scalars.hpp	/^  AthenaArray<Real> rl3d_, rr3d_;$/;"	m	class:PassiveScalars
rr_	scalars/scalars.hpp	/^  AthenaArray<Real> rl_, rr_, rlb_;$/;"	m	class:PassiveScalars
rs	pgen/disk_dust_diffusion.cpp	/^Real tau_relax, rs, gmstar, gmp, rad_planet, phi_planet_0, z_planet, t0_planet, t_end_planet, vk_planet, omega_planet, inv_omega_planet;$/;"	m	namespace:__anon70	file:
rs	pgen/disk_dust_drift.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon64	file:
rs	pgen/disk_streaming_cylindrical.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon54	file:
rs	pgen/disk_streaming_spherical.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon75	file:
rs	pgen/dust_diffusion.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon117	file:
rs	pgen/ssheet_planet_dust.cpp	/^kappap, kappap2, Kai0, etaVk, AN, BN, Psi, time_drag, user_dt, rs, gmp, gMth, t_planet_growth,$/;"	m	namespace:__anon111	file:
rseed	fft/turbulence.hpp	/^  std::int64_t rseed;$/;"	m	class:TurbulenceDriver
rsoft	pgen/inject_pebble_3D.cpp	/^Real mplanet, tsoft, rsoft, gamma_gas, x1min, x1max;$/;"	m	namespace:__anon62	file:
running	task_list/task_list.hpp	/^enum class TaskListStatus {running, stuck, complete, nothing_to_do};$/;"	m	class:TaskListStatus
ruser_mesh_data	mesh/mesh.hpp	/^  AthenaArray<Real> *ruser_mesh_data;$/;"	m	class:Mesh
ruser_meshblock_data	mesh/mesh.hpp	/^  AthenaArray<Real> *ruser_meshblock_data;$/;"	m	class:MeshBlock
s	scalars/scalars.hpp	/^  AthenaArray<Real> s, s1, s2;  \/\/ (no more than MAX_NREGISTER allowed)$/;"	m	class:PassiveScalars
s0	scalars/scalars.hpp	/^  AthenaArray<Real> s0, s_fl_div;  \/\/ rkl2 STS memory registers;$/;"	m	class:PassiveScalars
s1	scalars/scalars.hpp	/^  AthenaArray<Real> s, s1, s2;  \/\/ (no more than MAX_NREGISTER allowed)$/;"	m	class:PassiveScalars
s2	scalars/scalars.hpp	/^  AthenaArray<Real> s, s1, s2;  \/\/ (no more than MAX_NREGISTER allowed)$/;"	m	class:PassiveScalars
s_cc	scalars/scalars.hpp	/^  AthenaArray<Real> s_cc, r_cc;       \/\/ cell-centered approximations$/;"	m	class:PassiveScalars
s_coarse_recv	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> s_coarse_send, s_coarse_recv, s_temp;$/;"	m	class:OrbitalTransform::OrbitalAdvection
s_coarse_send	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> s_coarse_send, s_coarse_recv, s_temp;$/;"	m	class:OrbitalTransform::OrbitalAdvection
s_fl_div	scalars/scalars.hpp	/^  AthenaArray<Real> s0, s_fl_div;  \/\/ rkl2 STS memory registers;$/;"	m	class:PassiveScalars
s_flux	scalars/scalars.hpp	/^  AthenaArray<Real> s_flux[3];  \/\/ face-averaged flux vector$/;"	m	class:PassiveScalars
s_grow	pgen/streaming_eigen.cpp	/^Real Kpar, kx, ky, kz, omg_osi, s_grow;$/;"	m	namespace:__anon66	file:
s_grow	pgen/streaming_eigen_2dust.cpp	/^Real Kpar, kx, ky, kz, omg_osi, s_grow;$/;"	m	namespace:__anon145	file:
s_height	pgen/slotted_cylinder.cpp	/^Real s_width, s_height, center_x1, center_x2;$/;"	m	namespace:__anon82	file:
s_src	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> s_src[5], d_src[13]; \/\/ s_src for deep copy, d_src for shallow copy$/;"	m	class:OrbitalTransform::OrbitalAdvection
s_temp	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> s_coarse_send, s_coarse_recv, s_temp;$/;"	m	class:OrbitalTransform::OrbitalAdvection
s_width	pgen/slotted_cylinder.cpp	/^Real s_width, s_height, center_x1, center_x2;$/;"	m	namespace:__anon82	file:
sarea_	bvals/bvals.hpp	/^  AthenaArray<Real> sarea_[2];$/;"	m	class:BoundaryBase
sarea_x1_	mesh/mesh_refinement.hpp	/^  AthenaArray<Real> fvol_[2][2], sarea_x1_[2][2], sarea_x2_[2][3], sarea_x3_[3][2];$/;"	m	class:MeshRefinement
sarea_x2_	mesh/mesh_refinement.hpp	/^  AthenaArray<Real> fvol_[2][2], sarea_x1_[2][2], sarea_x2_[2][3], sarea_x3_[3][2];$/;"	m	class:MeshRefinement
sarea_x3_	mesh/mesh_refinement.hpp	/^  AthenaArray<Real> fvol_[2][2], sarea_x1_[2][2], sarea_x2_[2][3], sarea_x3_[3][2];$/;"	m	class:MeshRefinement
sb_data_	bvals/bvals.hpp	/^  ShearNeighborData<4> sb_data_[2];$/;"	m	class:BoundaryValues
sb_flux_data_	bvals/bvals.hpp	/^  ShearNeighborData<3> sb_flux_data_[2];$/;"	m	class:BoundaryValues
sbeta	task_list/task_list.hpp	/^    Real sbeta, ebeta; \/\/ time coeff describing start\/end time of each stage$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
sbvar	scalars/scalars.hpp	/^  CellCenteredBoundaryVariable sbvar;$/;"	m	class:PassiveScalars
scalar_diffusion_defined	scalars/scalars.hpp	/^  bool scalar_diffusion_defined;$/;"	m	class:PassiveScalars
scalar_floor_	eos/eos.hpp	/^  Real scalar_floor_;                    \/\/ dimensionless concentration floor$/;"	m	class:EquationOfState
scale_arr	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> det_arr, scale_arr;$/;"	m	class:DustGasDrag
scaled	fft/plimpton/fft_2d.h	/^  int scaled;                       \/* whether to scale FFT results *\/$/;"	m	struct:fft_plan_2d
scaled	fft/plimpton/fft_3d.h	/^  int scaled;                       \/* whether to scale FFT results *\/$/;"	m	struct:fft_plan_3d
scr01_i_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr01_i_, scr02_i_, scr03_i_, scr04_i_, scr05_i_;$/;"	m	class:Reconstruction
scr01_i_df_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr01_i_df_, scr02_i_df_, scr03_i_df_, scr04_i_df_, scr05_i_df_;$/;"	m	class:Reconstruction
scr02_i_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr01_i_, scr02_i_, scr03_i_, scr04_i_, scr05_i_;$/;"	m	class:Reconstruction
scr02_i_df_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr01_i_df_, scr02_i_df_, scr03_i_df_, scr04_i_df_, scr05_i_df_;$/;"	m	class:Reconstruction
scr03_i_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr01_i_, scr02_i_, scr03_i_, scr04_i_, scr05_i_;$/;"	m	class:Reconstruction
scr03_i_df_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr01_i_df_, scr02_i_df_, scr03_i_df_, scr04_i_df_, scr05_i_df_;$/;"	m	class:Reconstruction
scr04_i_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr01_i_, scr02_i_, scr03_i_, scr04_i_, scr05_i_;$/;"	m	class:Reconstruction
scr04_i_df_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr01_i_df_, scr02_i_df_, scr03_i_df_, scr04_i_df_, scr05_i_df_;$/;"	m	class:Reconstruction
scr05_i_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr01_i_, scr02_i_, scr03_i_, scr04_i_, scr05_i_;$/;"	m	class:Reconstruction
scr05_i_df_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr01_i_df_, scr02_i_df_, scr03_i_df_, scr04_i_df_, scr05_i_df_;$/;"	m	class:Reconstruction
scr06_i_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr06_i_, scr07_i_, scr08_i_, scr09_i_, scr10_i_;$/;"	m	class:Reconstruction
scr06_i_df_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr06_i_df_, scr07_i_df_, scr08_i_df_, scr09_i_df_, scr10_i_df_;$/;"	m	class:Reconstruction
scr07_i_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr06_i_, scr07_i_, scr08_i_, scr09_i_, scr10_i_;$/;"	m	class:Reconstruction
scr07_i_df_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr06_i_df_, scr07_i_df_, scr08_i_df_, scr09_i_df_, scr10_i_df_;$/;"	m	class:Reconstruction
scr08_i_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr06_i_, scr07_i_, scr08_i_, scr09_i_, scr10_i_;$/;"	m	class:Reconstruction
scr08_i_df_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr06_i_df_, scr07_i_df_, scr08_i_df_, scr09_i_df_, scr10_i_df_;$/;"	m	class:Reconstruction
scr09_i_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr06_i_, scr07_i_, scr08_i_, scr09_i_, scr10_i_;$/;"	m	class:Reconstruction
scr09_i_df_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr06_i_df_, scr07_i_df_, scr08_i_df_, scr09_i_df_, scr10_i_df_;$/;"	m	class:Reconstruction
scr10_i_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr06_i_, scr07_i_, scr08_i_, scr09_i_, scr10_i_;$/;"	m	class:Reconstruction
scr10_i_df_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr06_i_df_, scr07_i_df_, scr08_i_df_, scr09_i_df_, scr10_i_df_;$/;"	m	class:Reconstruction
scr11_i_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr11_i_, scr12_i_, scr13_i_, scr14_i_;$/;"	m	class:Reconstruction
scr11_i_df_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr11_i_df_, scr12_i_df_, scr13_i_df_, scr14_i_df_;$/;"	m	class:Reconstruction
scr12_i_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr11_i_, scr12_i_, scr13_i_, scr14_i_;$/;"	m	class:Reconstruction
scr12_i_df_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr11_i_df_, scr12_i_df_, scr13_i_df_, scr14_i_df_;$/;"	m	class:Reconstruction
scr13_i_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr11_i_, scr12_i_, scr13_i_, scr14_i_;$/;"	m	class:Reconstruction
scr13_i_df_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr11_i_df_, scr12_i_df_, scr13_i_df_, scr14_i_df_;$/;"	m	class:Reconstruction
scr14_i_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr11_i_, scr12_i_, scr13_i_, scr14_i_;$/;"	m	class:Reconstruction
scr14_i_df_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr11_i_df_, scr12_i_df_, scr13_i_df_, scr14_i_df_;$/;"	m	class:Reconstruction
scr1_ni_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr1_ni_, scr2_ni_, scr3_ni_, scr4_ni_, scr5_ni_;$/;"	m	class:Reconstruction
scr1_ni_df_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr1_ni_df_, scr2_ni_df_, scr3_ni_df_, scr4_ni_df_, scr5_ni_df_;$/;"	m	class:Reconstruction
scr1_nkji_	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> scr1_nkji_, scr2_nkji_;$/;"	m	class:DustFluids
scr1_nkji_	hydro/hydro.hpp	/^  AthenaArray<Real> scr1_nkji_, scr2_nkji_;$/;"	m	class:Hydro
scr1_nkji_	scalars/scalars.hpp	/^  AthenaArray<Real> scr1_nkji_, scr2_nkji_;$/;"	m	class:PassiveScalars
scr2_ni_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr1_ni_, scr2_ni_, scr3_ni_, scr4_ni_, scr5_ni_;$/;"	m	class:Reconstruction
scr2_ni_df_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr1_ni_df_, scr2_ni_df_, scr3_ni_df_, scr4_ni_df_, scr5_ni_df_;$/;"	m	class:Reconstruction
scr2_nkji_	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> scr1_nkji_, scr2_nkji_;$/;"	m	class:DustFluids
scr2_nkji_	hydro/hydro.hpp	/^  AthenaArray<Real> scr1_nkji_, scr2_nkji_;$/;"	m	class:Hydro
scr2_nkji_	scalars/scalars.hpp	/^  AthenaArray<Real> scr1_nkji_, scr2_nkji_;$/;"	m	class:PassiveScalars
scr3_ni_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr1_ni_, scr2_ni_, scr3_ni_, scr4_ni_, scr5_ni_;$/;"	m	class:Reconstruction
scr3_ni_df_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr1_ni_df_, scr2_ni_df_, scr3_ni_df_, scr4_ni_df_, scr5_ni_df_;$/;"	m	class:Reconstruction
scr4_ni_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr1_ni_, scr2_ni_, scr3_ni_, scr4_ni_, scr5_ni_;$/;"	m	class:Reconstruction
scr4_ni_df_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr1_ni_df_, scr2_ni_df_, scr3_ni_df_, scr4_ni_df_, scr5_ni_df_;$/;"	m	class:Reconstruction
scr5_ni_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr1_ni_, scr2_ni_, scr3_ni_, scr4_ni_, scr5_ni_;$/;"	m	class:Reconstruction
scr5_ni_df_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr1_ni_df_, scr2_ni_df_, scr3_ni_df_, scr4_ni_df_, scr5_ni_df_;$/;"	m	class:Reconstruction
scr6_ni_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr6_ni_, scr7_ni_, scr8_ni_;$/;"	m	class:Reconstruction
scr6_ni_df_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr6_ni_df_, scr7_ni_df_, scr8_ni_df_;$/;"	m	class:Reconstruction
scr7_ni_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr6_ni_, scr7_ni_, scr8_ni_;$/;"	m	class:Reconstruction
scr7_ni_df_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr6_ni_df_, scr7_ni_df_, scr8_ni_df_;$/;"	m	class:Reconstruction
scr8_ni_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr6_ni_, scr7_ni_, scr8_ni_;$/;"	m	class:Reconstruction
scr8_ni_df_	reconstruct/reconstruction.hpp	/^  AthenaArray<Real> scr6_ni_df_, scr7_ni_df_, scr8_ni_df_;$/;"	m	class:Reconstruction
scratch	fft/plimpton/fft_2d.h	/^  FFT_DATA *scratch;                \/* scratch space for remaps *\/$/;"	m	struct:fft_plan_2d
scratch	fft/plimpton/fft_3d.h	/^  FFT_DATA *scratch;                \/* scratch space for remaps *\/$/;"	m	struct:fft_plan_3d
scratch	fft/plimpton/remap_2d.h	/^  double *scratch;                  \/* scratch buffer for MPI recvs *\/$/;"	m	struct:remap_plan_2d
scratch	fft/plimpton/remap_3d.h	/^  double *scratch;                  \/* scratch buffer for MPI recvs *\/$/;"	m	struct:remap_plan_3d
self	fft/plimpton/remap_2d.h	/^  int self;                         \/* whether I send\/recv with myself *\/$/;"	m	struct:remap_plan_2d
self	fft/plimpton/remap_3d.h	/^  int self;                         \/* whether I send\/recv with myself *\/$/;"	m	struct:remap_plan_3d
send	bvals/bvals_interfaces.hpp	/^  Real *send[kMaxNeighbor], *recv[kMaxNeighbor];$/;"	m	struct:BoundaryData
send_count	bvals/bvals_interfaces.hpp	/^  int send_count[kMaxNeighbor], recv_count[kMaxNeighbor];$/;"	m	struct:ShearNeighborData
send_neighbor	bvals/bvals_interfaces.hpp	/^  SimpleNeighborBlock send_neighbor[kMaxNeighbor], recv_neighbor[kMaxNeighbor];$/;"	m	struct:ShearNeighborData
send_offset	fft/plimpton/remap_2d.h	/^  int *send_offset;                 \/* extraction loc for each send *\/$/;"	m	struct:remap_plan_2d
send_offset	fft/plimpton/remap_3d.h	/^  int *send_offset;                 \/* extraction loc for each send *\/$/;"	m	struct:remap_plan_3d
send_proc	fft/plimpton/remap_2d.h	/^  int *send_proc;                   \/* proc to send each message to *\/$/;"	m	struct:remap_plan_2d
send_proc	fft/plimpton/remap_3d.h	/^  int *send_proc;                   \/* proc to send each message to *\/$/;"	m	struct:remap_plan_3d
send_size	fft/plimpton/remap_2d.h	/^  int *send_size;                   \/* size of each send message *\/$/;"	m	struct:remap_plan_2d
send_size	fft/plimpton/remap_3d.h	/^  int *send_size;                   \/* size of each send message *\/$/;"	m	struct:remap_plan_3d
sendbuf	fft/plimpton/remap_2d.h	/^  double *sendbuf;                  \/* buffer for MPI sends *\/$/;"	m	struct:remap_plan_2d
sendbuf	fft/plimpton/remap_3d.h	/^  double *sendbuf;                  \/* buffer for MPI sends *\/$/;"	m	struct:remap_plan_3d
sflag	bvals/bvals_interfaces.hpp	/^  BoundaryStatus flag[kMaxNeighbor], sflag[kMaxNeighbor];$/;"	m	struct:BoundaryData
shallow_slice	athena_arrays.hpp	/^  enum class DataStatus {empty, shallow_slice, allocated};  \/\/ formerly, "bool scopy_"$/;"	m	class:AthenaArray::DataStatus
shbb_	bvals/bvals.hpp	/^  SimpleNeighborBlock *shbb_[2];$/;"	m	class:BoundaryValues
shboxcoord	orbital_advection/orbital_advection.hpp	/^  Real Omega0, qshear, shboxcoord; \/\/ parameters for shearing box in cartesian$/;"	m	class:OrbitalTransform::OrbitalAdvection
shear	bvals/bvals_interfaces.hpp	/^  bool shear; \/\/!> flag indicating boundary is attaching shearing periodic boundaries.$/;"	m	struct:NeighborBlock
shear_bd_flux_	bvals/bvals_interfaces.hpp	/^  ShearingFluxBoundaryData shear_bd_flux_[2];$/;"	m	class:BoundaryVariable
shear_bd_var_	bvals/bvals_interfaces.hpp	/^  ShearingBoundaryData shear_bd_var_[2];$/;"	m	class:BoundaryVariable
shear_cc_	bvals/cc/bvals_cc.hpp	/^  AthenaArray<Real>  shear_cc_[2];$/;"	m	class:CellCenteredBoundaryVariable
shear_cc_phys_id_	bvals/cc/bvals_cc.hpp	/^  int shear_cc_phys_id_;$/;"	m	class:CellCenteredBoundaryVariable
shear_emf_phys_id_	bvals/fc/bvals_fc.hpp	/^  int shear_emf_phys_id_;$/;"	m	class:FaceCenteredBoundaryVariable
shear_fc_	bvals/fc/bvals_fc.hpp	/^  FaceField shear_fc_[2];$/;"	m	class:FaceCenteredBoundaryVariable
shear_fc_phys_id_	bvals/fc/bvals_fc.hpp	/^  int shear_fc_phys_id_;$/;"	m	class:FaceCenteredBoundaryVariable
shear_flx_phys_id_	bvals/cc/bvals_cc.hpp	/^  int shear_flx_phys_id_;$/;"	m	class:CellCenteredBoundaryVariable
shear_map_emf_	bvals/fc/bvals_fc.hpp	/^  EdgeField shear_map_emf_[2];$/;"	m	class:FaceCenteredBoundaryVariable
shear_map_flx_	bvals/cc/bvals_cc.hpp	/^  AthenaArray<Real> shear_map_flx_[2];$/;"	m	class:CellCenteredBoundaryVariable
shear_periodic	mesh/mesh.hpp	/^  const bool shear_periodic;         \/\/ flag of shear periodic b.c.$/;"	m	class:Mesh
shear_recv_count_cc_	bvals/cc/bvals_cc.hpp	/^  int shear_send_count_cc_[2][4], shear_recv_count_cc_[2][4]; \/\/ buffer sizes$/;"	m	class:CellCenteredBoundaryVariable
shear_recv_count_emf_	bvals/fc/bvals_fc.hpp	/^  int shear_send_count_emf_[2][3], shear_recv_count_emf_[2][3];$/;"	m	class:FaceCenteredBoundaryVariable
shear_recv_count_fc_	bvals/fc/bvals_fc.hpp	/^  int shear_send_count_fc_[2][4], shear_recv_count_fc_[2][4];$/;"	m	class:FaceCenteredBoundaryVariable
shear_recv_count_flx_	bvals/cc/bvals_cc.hpp	/^  int shear_send_count_flx_[2][3], shear_recv_count_flx_[2][3];$/;"	m	class:CellCenteredBoundaryVariable
shear_send_count_cc_	bvals/cc/bvals_cc.hpp	/^  int shear_send_count_cc_[2][4], shear_recv_count_cc_[2][4]; \/\/ buffer sizes$/;"	m	class:CellCenteredBoundaryVariable
shear_send_count_emf_	bvals/fc/bvals_fc.hpp	/^  int shear_send_count_emf_[2][3], shear_recv_count_emf_[2][3];$/;"	m	class:FaceCenteredBoundaryVariable
shear_send_count_fc_	bvals/fc/bvals_fc.hpp	/^  int shear_send_count_fc_[2][4], shear_recv_count_fc_[2][4];$/;"	m	class:FaceCenteredBoundaryVariable
shear_send_count_flx_	bvals/cc/bvals_cc.hpp	/^  int shear_send_count_flx_[2][3], shear_recv_count_flx_[2][3];$/;"	m	class:CellCenteredBoundaryVariable
shear_var_emf_	bvals/fc/bvals_fc.hpp	/^  EdgeField shear_var_emf_[2];$/;"	m	class:FaceCenteredBoundaryVariable
shear_var_flx_	bvals/cc/bvals_cc.hpp	/^  AthenaArray<Real> shear_var_flx_[2];$/;"	m	class:CellCenteredBoundaryVariable
shearing_box	bvals/bvals.hpp	/^  int shearing_box; \/\/ flag for shearing box: 0 = none, 1: xy, 2: xz$/;"	m	class:BoundaryValues
sig	pgen/visc_scalars.cpp	/^Real A0, sig;$/;"	m	namespace:__anon53	file:
sig_x1	pgen/dust_diffusion.cpp	/^Real A0, sig_x1, sig_x2, cen1, cen2, offset;$/;"	m	namespace:__anon117	file:
sig_x1	pgen/visc_dustfluids.cpp	/^Real A0, sig_x1, sig_x2, cen1, cen2;$/;"	m	namespace:__anon151	file:
sig_x2	pgen/dust_diffusion.cpp	/^Real A0, sig_x1, sig_x2, cen1, cen2, offset;$/;"	m	namespace:__anon117	file:
sig_x2	pgen/visc_dustfluids.cpp	/^Real A0, sig_x1, sig_x2, cen1, cen2;$/;"	m	namespace:__anon151	file:
sigma_bump	pgen/disk_RWI_2D.cpp	/^A_bump, sigma_bump, r0_bump, width_vortex, eta_gas, beta_gas, ks_gas,$/;"	m	namespace:__anon101	file:
sigma_bump	pgen/disk_dust_diffusion.cpp	/^Real A_bump, sigma_bump, r0_bump;$/;"	m	namespace:__anon70	file:
sigma_bump	pgen/ssheet_RWI_dust.cpp	/^A_bump, sigma_bump, x1min, x1max, damping_rate, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon90	file:
sigma_g0	pgen/streaming_stratified.cpp	/^Real amp, nwx, nwy, nwz, sigma_g0; \/\/ amplitude, Wavenumbers$/;"	m	namespace:__anon154	file:
sigma_max_	eos/eos.hpp	/^  Real sigma_max_, beta_min_;            \/\/ limits on ratios of gas quantities to pmag$/;"	m	class:EquationOfState
signalflag	utils/utils.hpp	/^static volatile int signalflag[nsignal];$/;"	m	namespace:SignalHandler
sin_a2	pgen/cpaw.cpp	/^Real fac, sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon88	file:
sin_a2	pgen/dusty_wave.cpp	/^Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon86	file:
sin_a2	pgen/jeans.cpp	/^Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon119	file:
sin_a2	pgen/linear_wave.cpp	/^Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon125	file:
sin_a3	pgen/cpaw.cpp	/^Real fac, sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon88	file:
sin_a3	pgen/dusty_wave.cpp	/^Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon86	file:
sin_a3	pgen/jeans.cpp	/^Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon119	file:
sin_a3	pgen/linear_wave.cpp	/^Real sin_a2, cos_a2, sin_a3, cos_a3;$/;"	m	namespace:__anon125	file:
sin_tilt	pgen/gr_torus.cpp	/^Real sin_tilt, cos_tilt;                      \/\/ calculated tilt parameters$/;"	m	namespace:__anon39	file:
size_	multigrid/multigrid.hpp	/^  RegionSize size_;$/;"	m	class:Multigrid
size_cc_recv	bvals/orbital/bvals_orbital.hpp	/^  int *size_cc_recv[2];  \/\/same, coarser, fine*4$/;"	m	class:OrbitalBoundaryCommunication
size_cc_send	bvals/orbital/bvals_orbital.hpp	/^  int *size_cc_send[2];  \/\/same, coarser, fine*4$/;"	m	class:OrbitalBoundaryCommunication
size_change	pgen/inject_pebble_3D.cpp	/^bool size_change, mom_correct_Flag;$/;"	m	namespace:__anon62	file:
size_fc_recv	bvals/orbital/bvals_orbital.hpp	/^  int *size_fc_recv[2];  \/\/same, coarser, fine*4$/;"	m	class:OrbitalBoundaryCommunication
size_fc_send	bvals/orbital/bvals_orbital.hpp	/^  int *size_fc_send[2];  \/\/same, coarser, fine*4$/;"	m	class:OrbitalBoundaryCommunication
snb	bvals/bvals_interfaces.hpp	/^  SimpleNeighborBlock snb;$/;"	m	struct:NeighborBlock
solver_id	dustfluids/dustfluids.hpp	/^  int solver_id;        \/\/ 0 for penetration, 1 for non-penetration, 2 for hlle without cs, 3 for hlle without cs$/;"	m	class:DustFluids
sound_speed	pgen/ssheet_RWI_dust.cpp	/^Real sound_speed, gamma1, inv_gm1, d0, amp, x1size, x2size, x3size, qshear, Omega0,$/;"	m	namespace:__anon90	file:
sound_speed	pgen/ssheet_planet_dust.cpp	/^Real x1size, x2size, x3size, sound_speed, gm1, inv_gm1, d0, qshear, Omega0, beta,$/;"	m	namespace:__anon111	file:
src	multigrid/multigrid.hpp	/^  AthenaArray<Real> u, def, src, uold;$/;"	m	struct:MGOctet
src	multigrid/multigrid.hpp	/^enum class MGVariable {src, u};$/;"	m	class:MGVariable
src_	multigrid/multigrid.hpp	/^  AthenaArray<Real> *u_, *def_, *src_, *uold_;$/;"	m	class:Multigrid
srcterm	gravity/gravity.hpp	/^  bool srcterm;$/;"	m	class:Gravity
ssize_	bvals/bvals.hpp	/^  Real ssize_;                   \/\/ # of ghost cells in x-z plane$/;"	m	class:BoundaryValues
stage_wghts	task_list/task_list.hpp	/^  IntegratorWeight stage_wghts[MAX_NSTAGE];$/;"	m	class:TimeIntegratorTaskList
start_time	mesh/mesh.cpp	/^    start_time(pin->GetOrAddReal("time", "start_time", 0.0)), time(start_time),$/;"	v
start_time	mesh/mesh.hpp	/^  Real start_time, time, tlim, dt, dt_hyperbolic, dt_parabolic, dt_user, cfl_number;$/;"	m	class:Mesh
state_	athena_arrays.hpp	/^  DataStatus state_;  \/\/ describe what "pdata_" points to and ownership of allocated data$/;"	m	class:AthenaArray
step_since_lb	mesh/mesh.hpp	/^  int step_since_lb;$/;"	m	class:Mesh
stopping_time_array	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> stopping_time_array;   \/\/ Arrays of stopping time of dust$/;"	m	class:DustFluids
stopping_time_array_n	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> stopping_time_array_n; \/\/ Arrays of stopping time of dust at stage n$/;"	m	class:DustFluids
sts_idx_subset	task_list/task_list.hpp	/^  std::vector<int> sts_idx_subset;$/;"	m	class:SuperTimeStepTaskList
sts_integrator	mesh/mesh.hpp	/^  std::string sts_integrator;$/;"	m	class:Mesh
sts_loc	mesh/mesh.hpp	/^  TaskType sts_loc;$/;"	m	class:Mesh
sts_max_dt_ratio	mesh/mesh.hpp	/^  Real sts_max_dt_ratio;$/;"	m	class:Mesh
sts_max_dt_ratio	task_list/task_list.hpp	/^  const Real sts_max_dt_ratio;$/;"	m	class:SuperTimeStepTaskList
stuck	task_list/task_list.hpp	/^enum class TaskListStatus {running, stuck, complete, nothing_to_do};$/;"	m	class:TaskListStatus
success	task_list/task_list.hpp	/^enum class TaskStatus {fail, success, next};$/;"	m	class:TaskStatus
sum	athena.hpp	/^enum class UserHistoryOperation {sum, max, min};$/;"	m	class:UserHistoryOperation
sum_arr	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> sum_arr, xx_arr;$/;"	m	class:DustGasDrag
swap1_	fft/athena_fft.hpp	/^  bool swap1_, swap2_;$/;"	m	class:FFTBlock::AthenaFFTDirection
swap2_	fft/athena_fft.hpp	/^  bool swap1_, swap2_;$/;"	m	class:FFTBlock::AthenaFFTDirection
swap_	fft/athena_fft.hpp	/^  int npermute_, swap_;$/;"	m	class:AthenaFFTIndex
t0	pgen/dust_collision.cpp	/^Real v0, t0, x0, user_dt, iso_cs, gamma_gas;$/;"	m	namespace:__anon152	file:
t0	pgen/dust_collision_different_Ts.cpp	/^Real v0, t0, x0, user_dt, iso_cs, gamma_gas;$/;"	m	namespace:__anon131	file:
t0	pgen/dust_diffusion.cpp	/^Real v0, t0, x0, d0, rho0, v1, v2, v3;$/;"	m	namespace:__anon117	file:
t0	pgen/dust_inelastic_collision.cpp	/^Real v0, t0, x0, user_dt, iso_cs, press, gamma_gas;$/;"	m	namespace:__anon143	file:
t0	pgen/dust_squaredrag.cpp	/^Real v0, t0, x0, user_dt, iso_cs, gamma_gas;$/;"	m	namespace:__anon141	file:
t0	pgen/visc_dustfluids.cpp	/^Real v0, t0, x0;$/;"	m	namespace:__anon151	file:
t0	pgen/visc_scalars.cpp	/^Real v0, t0, x0;$/;"	m	namespace:__anon53	file:
t0_planet	pgen/disk_dust_diffusion.cpp	/^Real tau_relax, rs, gmstar, gmp, rad_planet, phi_planet_0, z_planet, t0_planet, t_end_planet, vk_planet, omega_planet, inv_omega_planet;$/;"	m	namespace:__anon70	file:
t0_planet	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^phi_planet[10], z_planet[10], t0_planet[10], time_drag, vk_planet[10],$/;"	m	namespace:__anon68	file:
t0_planet	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^phi_planet[10], z_planet[10], t0_planet[10], time_drag, vk_planet[10],$/;"	m	namespace:__anon109	file:
t0_planet	pgen/disk_planet_dust_cylindrical.cpp	/^t0_planet, time_drag, vk_planet, omega_planet, inv_omega_planet, cs_planet,$/;"	m	namespace:__anon99	file:
t0_planet	pgen/disk_planet_dust_spherical.cpp	/^t0_planet, time_drag, vk_planet, omega_planet, inv_omega_planet, cs_planet,$/;"	m	namespace:__anon113	file:
t0pot	pgen/disk_dust_drift.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon64	file:
t0pot	pgen/disk_streaming_cylindrical.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon54	file:
t0pot	pgen/disk_streaming_spherical.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon75	file:
t0pot	pgen/dust_diffusion.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon117	file:
t_end_planet	pgen/disk_dust_diffusion.cpp	/^Real tau_relax, rs, gmstar, gmp, rad_planet, phi_planet_0, z_planet, t0_planet, t_end_planet, vk_planet, omega_planet, inv_omega_planet;$/;"	m	namespace:__anon70	file:
t_final	pgen/mignone_advection.cpp	/^Real t_final;$/;"	m	namespace:__anon149	file:
t_planet_growth	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^gMth[10], t_planet_growth[10], Hill_radius[10], accretion_radius[10],$/;"	m	namespace:__anon68	file:
t_planet_growth	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^gMth[10], t_planet_growth[10], Hill_radius[10], accretion_radius[10],$/;"	m	namespace:__anon109	file:
t_planet_growth	pgen/disk_planet_dust_cylindrical.cpp	/^t_planet_growth, dfloor, dffloor, Omega0, user_dt, A_gap,$/;"	m	namespace:__anon99	file:
t_planet_growth	pgen/disk_planet_dust_spherical.cpp	/^t_planet_growth, dfloor, dffloor, Omega0, user_dt, A_gap,$/;"	m	namespace:__anon113	file:
t_planet_growth	pgen/ssheet_planet_dust.cpp	/^kappap, kappap2, Kai0, etaVk, AN, BN, Psi, time_drag, user_dt, rs, gmp, gMth, t_planet_growth,$/;"	m	namespace:__anon111	file:
table	utils/interp_table.hpp	/^  InterpTable2D table;$/;"	m	class:EosTable
taddBp	pgen/disk_3d_mhd_dust.cpp	/^Real beta, mu, Am_in, Am0, Bz0, A30, RBmin, taddBp;$/;"	m	namespace:__anon60	file:
targetid	bvals/bvals_interfaces.hpp	/^  int bufid, eid, targetid;$/;"	m	struct:NeighborBlock
task_id	task_list/mg_task_list.hpp	/^  TaskID task_id;      \/\/!> encodes task using bit positions in MultigridTaskNames$/;"	m	struct:MGTask
task_id	task_list/task_list.hpp	/^  TaskID task_id;    \/\/!> encodes task with bit positions in HydroIntegratorTaskNames$/;"	m	struct:Task
task_list_	task_list/mg_task_list.hpp	/^  MGTask task_list_[64*TaskID::kNField_];$/;"	m	class:MultigridTaskList
task_list_	task_list/task_list.hpp	/^  Task task_list_[64*TaskID::kNField_];$/;"	m	class:TaskList
tasks	mesh/mesh.hpp	/^  TaskStates tasks;$/;"	m	class:MeshBlock
tau_damping	pgen/disk_RWI_2D.cpp	/^tau_damping, damping_rate, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon101	file:
tau_damping	pgen/disk_dust_diffusion.cpp	/^Real x1min, x1max, tau_damping, damping_rate;$/;"	m	namespace:__anon70	file:
tau_damping	pgen/disk_dust_drift.cpp	/^Real x1min, x1max, tau_damping, damping_rate;$/;"	m	namespace:__anon64	file:
tau_damping	pgen/disk_streaming_cylindrical.cpp	/^Real x1min, x1max, tau_damping, damping_rate;$/;"	m	namespace:__anon54	file:
tau_damping	pgen/disk_streaming_spherical.cpp	/^Real x1min, x1max, tau_damping, damping_rate;$/;"	m	namespace:__anon75	file:
tau_damping	pgen/dust_diffusion.cpp	/^Real x1min, x1max, tau_damping, damping_rate;$/;"	m	namespace:__anon117	file:
tau_relax	pgen/disk_dust_diffusion.cpp	/^Real tau_relax, rs, gmstar, gmp, rad_planet, phi_planet_0, z_planet, t0_planet, t_end_planet, vk_planet, omega_planet, inv_omega_planet;$/;"	m	namespace:__anon70	file:
tau_relax	pgen/disk_dust_drift.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon64	file:
tau_relax	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real tau_relax[10], rad_soft[10], gmp[10], inv_sqrt2gmp[10], rad_planet[10],$/;"	m	namespace:__anon68	file:
tau_relax	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real tau_relax[10], rad_soft[10], gmp[10], inv_sqrt2gmp[10], rad_planet[10],$/;"	m	namespace:__anon109	file:
tau_relax	pgen/disk_streaming_cylindrical.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon54	file:
tau_relax	pgen/disk_streaming_spherical.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, A0, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon75	file:
tau_relax	pgen/dust_diffusion.cpp	/^Real tau_relax, rs, gmp, rad_planet, phi_planet, t0pot, omega_p, Bump_flag, dwidth, rn, rand_amp, dust_dens_slope;$/;"	m	namespace:__anon117	file:
tcorr	fft/turbulence.hpp	/^  Real tdrive, dtdrive, tcorr, f_shear;$/;"	m	class:TurbulenceDriver
tdrive	fft/turbulence.hpp	/^  Real tdrive, dtdrive, tcorr, f_shear;$/;"	m	class:TurbulenceDriver
temp_A	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> temp_A, temp_B, temp_C, temp_D;$/;"	m	class:DustGasDrag
temp_B	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> temp_A, temp_B, temp_C, temp_D;$/;"	m	class:DustGasDrag
temp_C	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> temp_A, temp_B, temp_C, temp_D;$/;"	m	class:DustGasDrag
temp_D	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> temp_A, temp_B, temp_C, temp_D;$/;"	m	class:DustGasDrag
temp_arr	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> biggest_arr, temp_arr;$/;"	m	class:DustGasDrag
temp_inv_rho	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> temp_rho, temp_inv_rho;$/;"	m	class:DustGasDrag
temp_mom1	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> temp_mom1, temp_mom2, temp_mom3;$/;"	m	class:DustGasDrag
temp_mom2	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> temp_mom1, temp_mom2, temp_mom3;$/;"	m	class:DustGasDrag
temp_mom3	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> temp_mom1, temp_mom2, temp_mom3;$/;"	m	class:DustGasDrag
temp_rho	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> temp_rho, temp_inv_rho;$/;"	m	class:DustGasDrag
temp_total_vel1	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> temp_total_vel1, temp_total_vel2, temp_total_vel3;$/;"	m	class:DustGasDrag
temp_total_vel2	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> temp_total_vel1, temp_total_vel2, temp_total_vel3;$/;"	m	class:DustGasDrag
temp_total_vel3	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> temp_total_vel1, temp_total_vel2, temp_total_vel3;$/;"	m	class:DustGasDrag
temperature	pgen/gr_mhd_inflow.cpp	/^Real temperature;                 \/\/ temperature pgas\/rho$/;"	m	namespace:__anon72	file:
theta_Rin	pgen/disk_3d_mhd_dust.cpp	/^Real eta_ofac_in, eta_ofac_mid, theta_Rin, theta_Rout, fcool;$/;"	m	namespace:__anon60	file:
theta_Rout	pgen/disk_3d_mhd_dust.cpp	/^Real eta_ofac_in, eta_ofac_mid, theta_Rin, theta_Rout, fcool;$/;"	m	namespace:__anon60	file:
theta_lower_damping	pgen/disk_VSI.cpp	/^theta_upper_damping, theta_lower_damping, upper_altitude_damping, lower_altitude_damping,$/;"	m	namespace:__anon133	file:
theta_trans	pgen/disk_3d_mhd_dust.cpp	/^Real rho0, alpha, HoR0, HoRc, theta_trans;$/;"	m	namespace:__anon60	file:
theta_upper_damping	pgen/disk_VSI.cpp	/^theta_upper_damping, theta_lower_damping, upper_altitude_damping, lower_altitude_damping,$/;"	m	namespace:__anon133	file:
threshold	pgen/blast.cpp	/^Real threshold;$/;"	v
threshold	pgen/resist.cpp	/^Real threshold;$/;"	v
threshold	pgen/scalar_diff.cpp	/^Real threshold;$/;"	v
threshold	pgen/visc.cpp	/^Real threshold;$/;"	v
tilt	pgen/gr_torus.cpp	/^Real tilt;                                    \/\/ tilt angle$/;"	m	namespace:__anon39	file:
time	mesh/mesh.hpp	/^  Real start_time, time, tlim, dt, dt_hyperbolic, dt_parabolic, dt_user, cfl_number;$/;"	m	class:Mesh
time_drag	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  Real time_drag;          \/\/ The time echo when the drags are active$/;"	m	class:DustGasDrag
time_drag	pgen/disk_3d_mhd_dust.cpp	/^Real Rbuf, rho_floor, time_drag;$/;"	m	namespace:__anon60	file:
time_drag	pgen/disk_RWI_2D.cpp	/^vel_vortex, r0_vortex, x0_vortex, y0_vortex, amp, time_drag, x1min, x1max,$/;"	m	namespace:__anon101	file:
time_drag	pgen/disk_VSI.cpp	/^amp, time_drag, time_refine, refine_theta_upper, refine_theta_lower, refine_r_min, refine_r_max,$/;"	m	namespace:__anon133	file:
time_drag	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^phi_planet[10], z_planet[10], t0_planet[10], time_drag, vk_planet[10],$/;"	m	namespace:__anon68	file:
time_drag	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^phi_planet[10], z_planet[10], t0_planet[10], time_drag, vk_planet[10],$/;"	m	namespace:__anon109	file:
time_drag	pgen/disk_planet_dust_cylindrical.cpp	/^t0_planet, time_drag, vk_planet, omega_planet, inv_omega_planet, cs_planet,$/;"	m	namespace:__anon99	file:
time_drag	pgen/disk_planet_dust_spherical.cpp	/^t0_planet, time_drag, vk_planet, omega_planet, inv_omega_planet, cs_planet,$/;"	m	namespace:__anon113	file:
time_drag	pgen/ssheet_RWI_dust.cpp	/^kappap, kappap2, Kai0, etaVk, AN(0.0), BN(0.0), Psi(0.0), user_dt, time_drag, beta,$/;"	m	namespace:__anon90	file:
time_drag	pgen/ssheet_planet_dust.cpp	/^kappap, kappap2, Kai0, etaVk, AN, BN, Psi, time_drag, user_dt, rs, gmp, gMth, t_planet_growth,$/;"	m	namespace:__anon111	file:
time_refine	pgen/disk_VSI.cpp	/^amp, time_drag, time_refine, refine_theta_upper, refine_theta_lower, refine_r_min, refine_r_max,$/;"	m	namespace:__anon133	file:
tlim	mesh/mesh.hpp	/^  Real start_time, time, tlim, dt, dt_hyperbolic, dt_parabolic, dt_user, cfl_number;$/;"	m	class:Mesh
total1	fft/plimpton/fft_2d.h	/^  int total1,total2;                \/* # of 1st and 2nd FFTs (times length) *\/$/;"	m	struct:fft_plan_2d
total1	fft/plimpton/fft_3d.h	/^  int total1,total2,total3;         \/* # of 1st,2nd,3rd FFTs (times length) *\/$/;"	m	struct:fft_plan_3d
total2	fft/plimpton/fft_2d.h	/^  int total1,total2;                \/* # of 1st and 2nd FFTs (times length) *\/$/;"	m	struct:fft_plan_2d
total2	fft/plimpton/fft_3d.h	/^  int total1,total2,total3;         \/* # of 1st,2nd,3rd FFTs (times length) *\/$/;"	m	struct:fft_plan_3d
total3	fft/plimpton/fft_3d.h	/^  int total1,total2,total3;         \/* # of 1st,2nd,3rd FFTs (times length) *\/$/;"	m	struct:fft_plan_3d
trans_face1_i1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face1_i1_, trans_face1_i2_;$/;"	m	class:Coordinates
trans_face1_i2_	coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face1_i1_, trans_face1_i2_;$/;"	m	class:Coordinates
trans_face1_j1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face1_j1_;$/;"	m	class:Coordinates
trans_face1_ji1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face1_ji1_, trans_face1_ji2_, trans_face1_ji3_,$/;"	m	class:Coordinates
trans_face1_ji2_	coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face1_ji1_, trans_face1_ji2_, trans_face1_ji3_,$/;"	m	class:Coordinates
trans_face1_ji3_	coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face1_ji1_, trans_face1_ji2_, trans_face1_ji3_,$/;"	m	class:Coordinates
trans_face1_ji4_	coordinates/coordinates.hpp	/^    trans_face1_ji4_, trans_face1_ji5_, trans_face1_ji6_, trans_face1_ji7_;$/;"	m	class:Coordinates
trans_face1_ji5_	coordinates/coordinates.hpp	/^    trans_face1_ji4_, trans_face1_ji5_, trans_face1_ji6_, trans_face1_ji7_;$/;"	m	class:Coordinates
trans_face1_ji6_	coordinates/coordinates.hpp	/^    trans_face1_ji4_, trans_face1_ji5_, trans_face1_ji6_, trans_face1_ji7_;$/;"	m	class:Coordinates
trans_face1_ji7_	coordinates/coordinates.hpp	/^    trans_face1_ji4_, trans_face1_ji5_, trans_face1_ji6_, trans_face1_ji7_;$/;"	m	class:Coordinates
trans_face1_kji_	coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face1_kji_;$/;"	m	class:Coordinates
trans_face2_i1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face2_i1_, trans_face2_i2_;$/;"	m	class:Coordinates
trans_face2_i2_	coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face2_i1_, trans_face2_i2_;$/;"	m	class:Coordinates
trans_face2_j1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face2_j1_;$/;"	m	class:Coordinates
trans_face2_ji1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face2_ji1_, trans_face2_ji2_, trans_face2_ji3_,$/;"	m	class:Coordinates
trans_face2_ji2_	coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face2_ji1_, trans_face2_ji2_, trans_face2_ji3_,$/;"	m	class:Coordinates
trans_face2_ji3_	coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face2_ji1_, trans_face2_ji2_, trans_face2_ji3_,$/;"	m	class:Coordinates
trans_face2_ji4_	coordinates/coordinates.hpp	/^    trans_face2_ji4_, trans_face2_ji5_, trans_face2_ji6_;$/;"	m	class:Coordinates
trans_face2_ji5_	coordinates/coordinates.hpp	/^    trans_face2_ji4_, trans_face2_ji5_, trans_face2_ji6_;$/;"	m	class:Coordinates
trans_face2_ji6_	coordinates/coordinates.hpp	/^    trans_face2_ji4_, trans_face2_ji5_, trans_face2_ji6_;$/;"	m	class:Coordinates
trans_face2_kji_	coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face2_kji_;$/;"	m	class:Coordinates
trans_face3_i1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face3_i1_, trans_face3_i2_;$/;"	m	class:Coordinates
trans_face3_i2_	coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face3_i1_, trans_face3_i2_;$/;"	m	class:Coordinates
trans_face3_j1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face3_j1_;$/;"	m	class:Coordinates
trans_face3_ji1_	coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face3_ji1_, trans_face3_ji2_, trans_face3_ji3_,$/;"	m	class:Coordinates
trans_face3_ji2_	coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face3_ji1_, trans_face3_ji2_, trans_face3_ji3_,$/;"	m	class:Coordinates
trans_face3_ji3_	coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face3_ji1_, trans_face3_ji2_, trans_face3_ji3_,$/;"	m	class:Coordinates
trans_face3_ji4_	coordinates/coordinates.hpp	/^    trans_face3_ji4_, trans_face3_ji5_, trans_face3_ji6_;$/;"	m	class:Coordinates
trans_face3_ji5_	coordinates/coordinates.hpp	/^    trans_face3_ji4_, trans_face3_ji5_, trans_face3_ji6_;$/;"	m	class:Coordinates
trans_face3_ji6_	coordinates/coordinates.hpp	/^    trans_face3_ji4_, trans_face3_ji5_, trans_face3_ji6_;$/;"	m	class:Coordinates
trans_face3_kji_	coordinates/coordinates.hpp	/^  AthenaArray<Real> trans_face3_kji_;$/;"	m	class:Coordinates
tree	mesh/mesh.hpp	/^  MeshBlockTree tree;$/;"	m	class:Mesh
true	mesh/mesh.cpp	/^    lb_flag_(true), lb_automatic_(), lb_manual_(),$/;"	v
ts_	multigrid/multigrid.hpp	/^  TaskStates ts_;$/;"	m	class:Multigrid
tsoft	pgen/inject_pebble_3D.cpp	/^Real mplanet, tsoft, rsoft, gamma_gas, x1min, x1max;$/;"	m	namespace:__anon62	file:
turb_flag	mesh/mesh.hpp	/^  int turb_flag; \/\/ turbulence flag$/;"	m	class:Mesh
type	bvals/bvals_interfaces.hpp	/^  NeighborConnect type;$/;"	m	struct:NeighborIndexes
type	outputs/outputs.hpp	/^  std::string type;        \/\/ one of (SCALARS,VECTORS) used for vtk outputs$/;"	m	struct:OutputData
u	hydro/hydro.hpp	/^  AthenaArray<Real> u, w;           \/\/ time-integrator memory register #1$/;"	m	class:Hydro
u	multigrid/multigrid.hpp	/^  AthenaArray<Real> u, def, src, uold;$/;"	m	struct:MGOctet
u	pgen/gr_linear_wave.cpp	/^Real u[4], b[4];              \/\/ contravariant quantities$/;"	m	namespace:__anon84	file:
u0	hydro/hydro.hpp	/^  AthenaArray<Real> u0, fl_div;     \/\/ rkl2 STS memory registers;$/;"	m	class:Hydro
u0	pgen/dusty_soundwave.cpp	/^Real rho_g0, p0, u0, v0, w0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon105	file:
u0	pgen/dusty_wave.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon86	file:
u0	pgen/dusty_wave_1d.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon137	file:
u0	pgen/jeans.cpp	/^Real d0, p0, v0, u0, w0, va, b0;$/;"	m	namespace:__anon119	file:
u0	pgen/linear_wave.cpp	/^Real d0, p0, u0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon125	file:
u1	hydro/hydro.hpp	/^  AthenaArray<Real> u1, w1;         \/\/ time-integrator memory register #2$/;"	m	class:Hydro
u2	hydro/hydro.hpp	/^  AthenaArray<Real> u2;             \/\/ time-integrator memory register #3$/;"	m	class:Hydro
u_	multigrid/multigrid.hpp	/^  AthenaArray<Real> *u_, *def_, *src_, *uold_;$/;"	m	class:Multigrid
u_af_src	hydro/hydro.hpp	/^  AthenaArray<Real> u_af_src;       \/\/ conservatives after explicit source terms$/;"	m	class:Hydro
u_cc	hydro/hydro.hpp	/^  AthenaArray<Real> u_cc, w_cc;      \/\/ cell-centered approximations$/;"	m	class:Hydro
u_coarse_recv	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> u_coarse_send, u_coarse_recv, u_temp;$/;"	m	class:OrbitalTransform::OrbitalAdvection
u_coarse_send	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> u_coarse_send, u_coarse_recv, u_temp;$/;"	m	class:OrbitalTransform::OrbitalAdvection
u_orb	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> w_orb,       u_orb;       \/\/ buffer for orbital advection system output$/;"	m	class:OrbitalTransform::OrbitalAdvection
u_temp	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> u_coarse_send, u_coarse_recv, u_temp;$/;"	m	class:OrbitalTransform::OrbitalAdvection
ul	pgen/shk_cloud.cpp	/^Real gmma1, dl, pl, ul;$/;"	m	namespace:__anon74	file:
undef	bvals/bvals_interfaces.hpp	/^enum BoundaryFace {undef=-1, inner_x1=0, outer_x1=1, inner_x2=2, outer_x2=3,$/;"	e	enum:BoundaryFace
undef	bvals/bvals_interfaces.hpp	/^enum class BoundaryFlag {block=-1, undef, reflect, outflow, user, periodic,$/;"	m	class:BoundaryFlag
uniform	reconstruct/reconstruction.hpp	/^  bool uniform[3], curvilinear[2];$/;"	m	class:Reconstruction
unpack	fft/plimpton/remap_2d.h	/^  void (*unpack)(double *, double *, struct pack_plan_2d *);                 \/* which unpack function to use *\/$/;"	m	struct:remap_plan_2d
unpack	fft/plimpton/remap_3d.h	/^  void (*unpack)(double *, double *, struct pack_plan_3d *);                 \/* which unpack function to use *\/$/;"	m	struct:remap_plan_3d
unpack_2d	fft/plimpton/pack_2d.cpp	/^void unpack_2d(double *buf, double *data, struct pack_plan_2d *plan)$/;"	f
unpack_2d_permute_1	fft/plimpton/pack_2d.cpp	/^void unpack_2d_permute_1(double *buf, double *data, struct pack_plan_2d *plan)$/;"	f
unpack_2d_permute_2	fft/plimpton/pack_2d.cpp	/^void unpack_2d_permute_2(double *buf, double *data, struct pack_plan_2d *plan)$/;"	f
unpack_2d_permute_n	fft/plimpton/pack_2d.cpp	/^void unpack_2d_permute_n(double *buf, double *data, struct pack_plan_2d *plan)$/;"	f
unpack_3d	fft/plimpton/pack_3d.cpp	/^void unpack_3d(double *buf, double *data, struct pack_plan_3d *plan)$/;"	f
unpack_3d_permute1_1	fft/plimpton/pack_3d.cpp	/^void unpack_3d_permute1_1(double *buf, double *data, struct pack_plan_3d *plan)$/;"	f
unpack_3d_permute1_2	fft/plimpton/pack_3d.cpp	/^void unpack_3d_permute1_2(double *buf, double *data, struct pack_plan_3d *plan)$/;"	f
unpack_3d_permute1_n	fft/plimpton/pack_3d.cpp	/^void unpack_3d_permute1_n(double *buf, double *data, struct pack_plan_3d *plan)$/;"	f
unpack_3d_permute2_1	fft/plimpton/pack_3d.cpp	/^void unpack_3d_permute2_1(double *buf, double *data, struct pack_plan_3d *plan)$/;"	f
unpack_3d_permute2_2	fft/plimpton/pack_3d.cpp	/^void unpack_3d_permute2_2(double *buf, double *data, struct pack_plan_3d *plan)$/;"	f
unpack_3d_permute2_n	fft/plimpton/pack_3d.cpp	/^void unpack_3d_permute2_n(double *buf, double *data, struct pack_plan_3d *plan)$/;"	f
unpackplan	fft/plimpton/remap_2d.h	/^  struct pack_plan_2d *unpackplan;  \/* unpack plan for each recv message *\/$/;"	m	struct:remap_plan_2d	typeref:struct:remap_plan_2d::pack_plan_2d
unpackplan	fft/plimpton/remap_3d.h	/^  struct pack_plan_3d *unpackplan;  \/* unpack plan for each recv message *\/$/;"	m	struct:remap_plan_3d	typeref:struct:remap_plan_3d::pack_plan_3d
uold	multigrid/multigrid.hpp	/^  AthenaArray<Real> u, def, src, uold;$/;"	m	struct:MGOctet
uold_	multigrid/multigrid.hpp	/^  AthenaArray<Real> *u_, *def_, *src_, *uold_;$/;"	m	class:Multigrid
upper_altitude_damping	pgen/disk_VSI.cpp	/^theta_upper_damping, theta_lower_damping, upper_altitude_damping, lower_altitude_damping,$/;"	m	namespace:__anon133	file:
use_gl_quadrature	pgen/mignone_advection.cpp	/^constexpr bool use_gl_quadrature = true;$/;"	m	namespace:__anon149	file:
use_gl_quadrature	pgen/slotted_cylinder.cpp	/^constexpr bool use_gl_quadrature = true;$/;"	m	namespace:__anon82	file:
use_uniform_meshgen_fn_	mesh/mesh.hpp	/^  bool use_uniform_meshgen_fn_[3];$/;"	m	class:Mesh
user	bvals/bvals_interfaces.hpp	/^enum class BoundaryFlag {block=-1, undef, reflect, outflow, user, periodic,$/;"	m	class:BoundaryFlag
user_dt	pgen/disk_3d_mhd_dust.cpp	/^Real user_dt;$/;"	m	namespace:__anon60	file:
user_dt	pgen/disk_RWI_2D.cpp	/^dfloor, dffloor, Omega0, user_dt, phi_vortex,$/;"	m	namespace:__anon101	file:
user_dt	pgen/disk_dust_diffusion.cpp	/^Real dfloor, dffloor, Omega0, user_dt;$/;"	m	namespace:__anon70	file:
user_dt	pgen/disk_dust_drift.cpp	/^Real gm0, r0, rho_0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, user_dt, iso_cs2_r0;$/;"	m	namespace:__anon64	file:
user_dt	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^nu_alpha, dfloor, dffloor, Omega0, user_dt, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon68	file:
user_dt	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^nu_alpha, dfloor, dffloor, Omega0, user_dt, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon109	file:
user_dt	pgen/disk_planet_dust_cylindrical.cpp	/^t_planet_growth, dfloor, dffloor, Omega0, user_dt, A_gap,$/;"	m	namespace:__anon99	file:
user_dt	pgen/disk_planet_dust_spherical.cpp	/^t_planet_growth, dfloor, dffloor, Omega0, user_dt, A_gap,$/;"	m	namespace:__anon113	file:
user_dt	pgen/disk_streaming_cylindrical.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, amp;$/;"	m	namespace:__anon54	file:
user_dt	pgen/disk_streaming_spherical.cpp	/^Real gm0, r0, rho0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, amp;$/;"	m	namespace:__anon75	file:
user_dt	pgen/dust_NSH.cpp	/^Real user_dt;$/;"	m	namespace:__anon103	file:
user_dt	pgen/dust_collision.cpp	/^Real v0, t0, x0, user_dt, iso_cs, gamma_gas;$/;"	m	namespace:__anon152	file:
user_dt	pgen/dust_collision_different_Ts.cpp	/^Real v0, t0, x0, user_dt, iso_cs, gamma_gas;$/;"	m	namespace:__anon131	file:
user_dt	pgen/dust_diffusion.cpp	/^Real gm0, r0, dslope, p0_over_r0, pslope, gamma_gas, dfloor, dffloor, user_dt, iso_cs2_r0;$/;"	m	namespace:__anon117	file:
user_dt	pgen/dust_inelastic_collision.cpp	/^Real v0, t0, x0, user_dt, iso_cs, press, gamma_gas;$/;"	m	namespace:__anon143	file:
user_dt	pgen/dust_squaredrag.cpp	/^Real v0, t0, x0, user_dt, iso_cs, gamma_gas;$/;"	m	namespace:__anon141	file:
user_dt	pgen/dusty_shock.cpp	/^Real user_dt, iso_cs, xshock, gamma_gas, vel_right;$/;"	m	namespace:__anon120	file:
user_dt	pgen/dusty_soundwave.cpp	/^Real user_dt;$/;"	m	namespace:__anon105	file:
user_dt	pgen/dusty_wave.cpp	/^Real user_dt;$/;"	m	namespace:__anon86	file:
user_dt	pgen/dusty_wave_1d.cpp	/^Real user_dt;$/;"	m	namespace:__anon137	file:
user_dt	pgen/ssheet_RWI_dust.cpp	/^kappap, kappap2, Kai0, etaVk, AN(0.0), BN(0.0), Psi(0.0), user_dt, time_drag, beta,$/;"	m	namespace:__anon90	file:
user_dt	pgen/ssheet_planet_dust.cpp	/^kappap, kappap2, Kai0, etaVk, AN, BN, Psi, time_drag, user_dt, rs, gmp, gMth, t_planet_growth,$/;"	m	namespace:__anon111	file:
user_dt	pgen/streaming_eigen.cpp	/^Real user_dt;$/;"	m	namespace:__anon66	file:
user_dt	pgen/streaming_eigen_2dust.cpp	/^Real user_dt;$/;"	m	namespace:__anon145	file:
user_dt	pgen/streaming_nonlinear.cpp	/^Real user_dt;$/;"	m	namespace:__anon135	file:
user_dt	pgen/streaming_stratified.cpp	/^Real user_dt;$/;"	m	namespace:__anon154	file:
user_history_func_	mesh/mesh.hpp	/^  HistoryOutputFunc *user_history_func_;$/;"	m	class:Mesh
user_history_ops_	mesh/mesh.hpp	/^  UserHistoryOperation *user_history_ops_;$/;"	m	class:Mesh
user_history_output_names_	mesh/mesh.hpp	/^  std::string *user_history_output_names_;$/;"	m	class:Mesh
user_out_var	mesh/mesh.hpp	/^  AthenaArray<Real> user_out_var;$/;"	m	class:MeshBlock
user_out_var_1D	mesh/mesh.hpp	/^  AthenaArray<Real> user_out_var_1D;$/;"	m	class:MeshBlock
user_out_var_2D	mesh/mesh.hpp	/^  AthenaArray<Real> user_out_var_2D;$/;"	m	class:MeshBlock
user_out_var_names_	mesh/mesh.hpp	/^  std::string *user_out_var_names_;$/;"	m	class:MeshBlock
user_out_var_names_1D_	mesh/mesh.hpp	/^  std::string *user_out_var_names_1D_;$/;"	m	class:MeshBlock
user_out_var_names_2D_	mesh/mesh.hpp	/^  std::string *user_out_var_names_2D_;$/;"	m	class:MeshBlock
v0	pgen/dust_collision.cpp	/^Real v0, t0, x0, user_dt, iso_cs, gamma_gas;$/;"	m	namespace:__anon152	file:
v0	pgen/dust_collision_different_Ts.cpp	/^Real v0, t0, x0, user_dt, iso_cs, gamma_gas;$/;"	m	namespace:__anon131	file:
v0	pgen/dust_diffusion.cpp	/^Real v0, t0, x0, d0, rho0, v1, v2, v3;$/;"	m	namespace:__anon117	file:
v0	pgen/dust_inelastic_collision.cpp	/^Real v0, t0, x0, user_dt, iso_cs, press, gamma_gas;$/;"	m	namespace:__anon143	file:
v0	pgen/dust_squaredrag.cpp	/^Real v0, t0, x0, user_dt, iso_cs, gamma_gas;$/;"	m	namespace:__anon141	file:
v0	pgen/dusty_soundwave.cpp	/^Real rho_g0, p0, u0, v0, w0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon105	file:
v0	pgen/jeans.cpp	/^Real d0, p0, v0, u0, w0, va, b0;$/;"	m	namespace:__anon119	file:
v0	pgen/visc_dustfluids.cpp	/^Real v0, t0, x0;$/;"	m	namespace:__anon151	file:
v0	pgen/visc_scalars.cpp	/^Real v0, t0, x0;$/;"	m	namespace:__anon53	file:
v1	pgen/dust_diffusion.cpp	/^Real v0, t0, x0, d0, rho0, v1, v2, v3;$/;"	m	namespace:__anon117	file:
v2	pgen/dust_diffusion.cpp	/^Real v0, t0, x0, d0, rho0, v1, v2, v3;$/;"	m	namespace:__anon117	file:
v3	pgen/dust_diffusion.cpp	/^Real v0, t0, x0, d0, rho0, v1, v2, v3;$/;"	m	namespace:__anon117	file:
vK_max	orbital_advection/orbital_advection.hpp	/^  Real vK_max, vK_min;$/;"	m	class:OrbitalTransform::OrbitalAdvection
vK_min	orbital_advection/orbital_advection.hpp	/^  Real vK_max, vK_min;$/;"	m	class:OrbitalTransform::OrbitalAdvection
vKc	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> vKc,   vKf[2]; \/\/ Orbital Velocity (cell-centered and face)$/;"	m	class:OrbitalTransform::OrbitalAdvection
vKc_coarse	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> vKc_coarse, vKf_coarse[2];$/;"	m	class:OrbitalTransform::OrbitalAdvection
vKf	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> vKc,   vKf[2]; \/\/ Orbital Velocity (cell-centered and face)$/;"	m	class:OrbitalTransform::OrbitalAdvection
vKf_coarse	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> vKc_coarse, vKf_coarse[2];$/;"	m	class:OrbitalTransform::OrbitalAdvection
v_par	pgen/cpaw.cpp	/^Real den, pres, gm1, b_par, b_perp, v_perp, v_par;$/;"	m	namespace:__anon88	file:
v_perp	pgen/cpaw.cpp	/^Real den, pres, gm1, b_par, b_perp, v_perp, v_par;$/;"	m	namespace:__anon88	file:
va	pgen/jeans.cpp	/^Real d0, p0, v0, u0, w0, va, b0;$/;"	m	namespace:__anon119	file:
var_cc	bvals/cc/bvals_cc.hpp	/^  AthenaArray<Real> *var_cc;$/;"	m	class:CellCenteredBoundaryVariable
var_fc	bvals/fc/bvals_fc.hpp	/^  FaceField *var_fc;$/;"	m	class:FaceCenteredBoundaryVariable
var_names	utils/eos_table_class.cpp	/^const char *var_names[] = {"p\/e(e\/rho,rho)", "e\/p(p\/rho,rho)", "asq*rho\/p(p\/rho,rho)"};$/;"	v
variable	outputs/outputs.hpp	/^  std::string variable;$/;"	m	struct:OutputParameters
variable_names	outputs/outputs.hpp	/^  char (*variable_names)[max_name_length+1];  \/\/ array of C-string names of variables$/;"	m	class:ATHDF5Output
vars_cc_	mesh/mesh.hpp	/^  std::vector<std::reference_wrapper<AthenaArray<Real>>> vars_cc_;$/;"	m	class:MeshBlock
vars_fc_	mesh/mesh.hpp	/^  std::vector<std::reference_wrapper<FaceField>> vars_fc_;$/;"	m	class:MeshBlock
vel	fft/turbulence.hpp	/^  AthenaArray<Real> vel[3];$/;"	m	class:TurbulenceDriver
vel_right	pgen/dusty_shock.cpp	/^Real user_dt, iso_cs, xshock, gamma_gas, vel_right;$/;"	m	namespace:__anon120	file:
vel_vortex	pgen/disk_RWI_2D.cpp	/^vel_vortex, r0_vortex, x0_vortex, y0_vortex, amp, time_drag, x1min, x1max,$/;"	m	namespace:__anon101	file:
velx_dust_imag	pgen/streaming_eigen.cpp	/^Real velx_dust_real[NDUSTFLUIDS], velx_dust_imag[NDUSTFLUIDS];$/;"	m	namespace:__anon66	file:
velx_dust_imag	pgen/streaming_eigen_2dust.cpp	/^Real velx_dust_real[NDUSTFLUIDS], velx_dust_imag[NDUSTFLUIDS];$/;"	m	namespace:__anon145	file:
velx_dust_real	pgen/streaming_eigen.cpp	/^Real velx_dust_real[NDUSTFLUIDS], velx_dust_imag[NDUSTFLUIDS];$/;"	m	namespace:__anon66	file:
velx_dust_real	pgen/streaming_eigen_2dust.cpp	/^Real velx_dust_real[NDUSTFLUIDS], velx_dust_imag[NDUSTFLUIDS];$/;"	m	namespace:__anon145	file:
velx_gas_imag	pgen/streaming_eigen.cpp	/^Real rho_gas_real,  rho_gas_imag,  velx_gas_real, velx_gas_imag;$/;"	m	namespace:__anon66	file:
velx_gas_imag	pgen/streaming_eigen_2dust.cpp	/^Real rho_gas_real,  rho_gas_imag,  velx_gas_real, velx_gas_imag;$/;"	m	namespace:__anon145	file:
velx_gas_real	pgen/streaming_eigen.cpp	/^Real rho_gas_real,  rho_gas_imag,  velx_gas_real, velx_gas_imag;$/;"	m	namespace:__anon66	file:
velx_gas_real	pgen/streaming_eigen_2dust.cpp	/^Real rho_gas_real,  rho_gas_imag,  velx_gas_real, velx_gas_imag;$/;"	m	namespace:__anon145	file:
vely_dust_imag	pgen/streaming_eigen.cpp	/^Real vely_dust_real[NDUSTFLUIDS], vely_dust_imag[NDUSTFLUIDS];$/;"	m	namespace:__anon66	file:
vely_dust_imag	pgen/streaming_eigen_2dust.cpp	/^Real vely_dust_real[NDUSTFLUIDS], vely_dust_imag[NDUSTFLUIDS];$/;"	m	namespace:__anon145	file:
vely_dust_real	pgen/streaming_eigen.cpp	/^Real vely_dust_real[NDUSTFLUIDS], vely_dust_imag[NDUSTFLUIDS];$/;"	m	namespace:__anon66	file:
vely_dust_real	pgen/streaming_eigen_2dust.cpp	/^Real vely_dust_real[NDUSTFLUIDS], vely_dust_imag[NDUSTFLUIDS];$/;"	m	namespace:__anon145	file:
vely_gas_imag	pgen/streaming_eigen.cpp	/^Real vely_gas_real, vely_gas_imag, velz_gas_real, velz_gas_imag;$/;"	m	namespace:__anon66	file:
vely_gas_imag	pgen/streaming_eigen_2dust.cpp	/^Real vely_gas_real, vely_gas_imag, velz_gas_real, velz_gas_imag;$/;"	m	namespace:__anon145	file:
vely_gas_real	pgen/streaming_eigen.cpp	/^Real vely_gas_real, vely_gas_imag, velz_gas_real, velz_gas_imag;$/;"	m	namespace:__anon66	file:
vely_gas_real	pgen/streaming_eigen_2dust.cpp	/^Real vely_gas_real, vely_gas_imag, velz_gas_real, velz_gas_imag;$/;"	m	namespace:__anon145	file:
velz_dust_imag	pgen/streaming_eigen.cpp	/^Real velz_dust_real[NDUSTFLUIDS], velz_dust_imag[NDUSTFLUIDS];$/;"	m	namespace:__anon66	file:
velz_dust_imag	pgen/streaming_eigen_2dust.cpp	/^Real velz_dust_real[NDUSTFLUIDS], velz_dust_imag[NDUSTFLUIDS];$/;"	m	namespace:__anon145	file:
velz_dust_real	pgen/streaming_eigen.cpp	/^Real velz_dust_real[NDUSTFLUIDS], velz_dust_imag[NDUSTFLUIDS];$/;"	m	namespace:__anon66	file:
velz_dust_real	pgen/streaming_eigen_2dust.cpp	/^Real velz_dust_real[NDUSTFLUIDS], velz_dust_imag[NDUSTFLUIDS];$/;"	m	namespace:__anon145	file:
velz_gas_imag	pgen/streaming_eigen.cpp	/^Real vely_gas_real, vely_gas_imag, velz_gas_real, velz_gas_imag;$/;"	m	namespace:__anon66	file:
velz_gas_imag	pgen/streaming_eigen_2dust.cpp	/^Real vely_gas_real, vely_gas_imag, velz_gas_real, velz_gas_imag;$/;"	m	namespace:__anon145	file:
velz_gas_real	pgen/streaming_eigen.cpp	/^Real vely_gas_real, vely_gas_imag, velz_gas_real, velz_gas_imag;$/;"	m	namespace:__anon66	file:
velz_gas_real	pgen/streaming_eigen_2dust.cpp	/^Real vely_gas_real, vely_gas_imag, velz_gas_real, velz_gas_imag;$/;"	m	namespace:__anon145	file:
vflow	pgen/dusty_kh.cpp	/^Real vflow;$/;"	m	namespace:__anon129	file:
vflow	pgen/dusty_soundwave.cpp	/^Real gam, gm1, iso_cs, vflow;$/;"	m	namespace:__anon105	file:
vflow	pgen/dusty_wave.cpp	/^Real gam,gm1,iso_cs,vflow;$/;"	m	namespace:__anon86	file:
vflow	pgen/dusty_wave_1d.cpp	/^Real gam, gm1, iso_cs, vflow;$/;"	m	namespace:__anon137	file:
vflow	pgen/kh.cpp	/^Real vflow;$/;"	m	namespace:__anon97	file:
vflow	pgen/kh_dust.cpp	/^Real vflow;$/;"	m	namespace:__anon107	file:
vflow	pgen/linear_wave.cpp	/^Real gam,gm1,iso_cs,vflow;$/;"	m	namespace:__anon125	file:
visflx	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> visflx[3];     \/\/ viscous stress tensor$/;"	m	class:HydroDiffusion
vk_planet	pgen/disk_dust_diffusion.cpp	/^Real tau_relax, rs, gmstar, gmp, rad_planet, phi_planet_0, z_planet, t0_planet, t_end_planet, vk_planet, omega_planet, inv_omega_planet;$/;"	m	namespace:__anon70	file:
vk_planet	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^phi_planet[10], z_planet[10], t0_planet[10], time_drag, vk_planet[10],$/;"	m	namespace:__anon68	file:
vk_planet	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^phi_planet[10], z_planet[10], t0_planet[10], time_drag, vk_planet[10],$/;"	m	namespace:__anon109	file:
vk_planet	pgen/disk_planet_dust_cylindrical.cpp	/^t0_planet, time_drag, vk_planet, omega_planet, inv_omega_planet, cs_planet,$/;"	m	namespace:__anon99	file:
vk_planet	pgen/disk_planet_dust_spherical.cpp	/^t0_planet, time_drag, vk_planet, omega_planet, inv_omega_planet, cs_planet,$/;"	m	namespace:__anon113	file:
vmg_	multigrid/multigrid.hpp	/^  std::vector<Multigrid*> vmg_;$/;"	m	class:MultigridDriver
vol_	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> vol_;$/;"	m	class:HydroDiffusion
volume	pgen/gr_linear_wave.cpp	/^AthenaArray<Real> volume;     \/\/ 1D array of volumes$/;"	v
volume	pgen/hb3.cpp	/^AthenaArray<Real> volume; \/\/ 1D array of volumes$/;"	m	namespace:__anon58	file:
vr	pgen/magnoh.cpp	/^Real alpha, beta, rho0, P0, pcoeff, vr, perturb, mphi;$/;"	m	namespace:__anon92	file:
vsqr_unit_	eos/eos.hpp	/^  Real vsqr_unit_, inv_vsqr_unit_;       \/\/ physical unit\/sim unit for speed^2$/;"	m	class:EquationOfState
vx	pgen/gr_linear_wave.cpp	/^Real vx, vy, vz;              \/\/ 3-velocity components$/;"	m	namespace:__anon84	file:
vx_0	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real gmstar, x_0, y_0, z_0, vx_0, vy_0, vz_0, x_cur, y_cur, z_cur, vx_cur, vy_cur, vz_cur;$/;"	m	namespace:__anon68	file:
vx_0	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real gmstar, x_0, y_0, z_0, vx_0, vy_0, vz_0, x_cur, y_cur, z_cur, vx_cur, vy_cur, vz_cur;$/;"	m	namespace:__anon109	file:
vx_amb	pgen/jet.cpp	/^Real d_amb, p_amb, vx_amb, vy_amb, vz_amb, bx_amb, by_amb, bz_amb;$/;"	m	namespace:__anon77	file:
vx_cur	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real gmstar, x_0, y_0, z_0, vx_0, vy_0, vz_0, x_cur, y_cur, z_cur, vx_cur, vy_cur, vz_cur;$/;"	m	namespace:__anon68	file:
vx_cur	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real gmstar, x_0, y_0, z_0, vx_0, vy_0, vz_0, x_cur, y_cur, z_cur, vx_cur, vy_cur, vz_cur;$/;"	m	namespace:__anon109	file:
vx_jet	pgen/jet.cpp	/^Real r_jet, d_jet, p_jet, vx_jet, vy_jet, vz_jet, bx_jet, by_jet, bz_jet;$/;"	m	namespace:__anon77	file:
vx_planet	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^accretion_rate[10], x_planet[10], y_planet[10], vx_planet[10],$/;"	m	namespace:__anon68	file:
vx_planet	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^accretion_rate[10], x_planet[10], y_planet[10], vx_planet[10],$/;"	m	namespace:__anon109	file:
vy	pgen/gr_linear_wave.cpp	/^Real vx, vy, vz;              \/\/ 3-velocity components$/;"	m	namespace:__anon84	file:
vy0	pgen/field_loop_poles.cpp	/^Real vy0, rho0, isocs2, gamma_gas;$/;"	m	namespace:__anon56	file:
vy_0	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real gmstar, x_0, y_0, z_0, vx_0, vy_0, vz_0, x_cur, y_cur, z_cur, vx_cur, vy_cur, vz_cur;$/;"	m	namespace:__anon68	file:
vy_0	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real gmstar, x_0, y_0, z_0, vx_0, vy_0, vz_0, x_cur, y_cur, z_cur, vx_cur, vy_cur, vz_cur;$/;"	m	namespace:__anon109	file:
vy_amb	pgen/jet.cpp	/^Real d_amb, p_amb, vx_amb, vy_amb, vz_amb, bx_amb, by_amb, bz_amb;$/;"	m	namespace:__anon77	file:
vy_cur	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real gmstar, x_0, y_0, z_0, vx_0, vy_0, vz_0, x_cur, y_cur, z_cur, vx_cur, vy_cur, vz_cur;$/;"	m	namespace:__anon68	file:
vy_cur	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real gmstar, x_0, y_0, z_0, vx_0, vy_0, vz_0, x_cur, y_cur, z_cur, vx_cur, vy_cur, vz_cur;$/;"	m	namespace:__anon109	file:
vy_jet	pgen/jet.cpp	/^Real r_jet, d_jet, p_jet, vx_jet, vy_jet, vz_jet, bx_jet, by_jet, bz_jet;$/;"	m	namespace:__anon77	file:
vy_planet	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^vy_planet[10], vz_planet[10], gm_cur[11], rad_cor[10], planets_number;$/;"	m	namespace:__anon68	file:
vy_planet	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^vy_planet[10], vz_planet[10], gm_cur[11], rad_cor[10], planets_number;$/;"	m	namespace:__anon109	file:
vz	pgen/gr_linear_wave.cpp	/^Real vx, vy, vz;              \/\/ 3-velocity components$/;"	m	namespace:__anon84	file:
vz_0	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real gmstar, x_0, y_0, z_0, vx_0, vy_0, vz_0, x_cur, y_cur, z_cur, vx_cur, vy_cur, vz_cur;$/;"	m	namespace:__anon68	file:
vz_0	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real gmstar, x_0, y_0, z_0, vx_0, vy_0, vz_0, x_cur, y_cur, z_cur, vx_cur, vy_cur, vz_cur;$/;"	m	namespace:__anon109	file:
vz_amb	pgen/jet.cpp	/^Real d_amb, p_amb, vx_amb, vy_amb, vz_amb, bx_amb, by_amb, bz_amb;$/;"	m	namespace:__anon77	file:
vz_cur	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real gmstar, x_0, y_0, z_0, vx_0, vy_0, vz_0, x_cur, y_cur, z_cur, vx_cur, vy_cur, vz_cur;$/;"	m	namespace:__anon68	file:
vz_cur	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real gmstar, x_0, y_0, z_0, vx_0, vy_0, vz_0, x_cur, y_cur, z_cur, vx_cur, vy_cur, vz_cur;$/;"	m	namespace:__anon109	file:
vz_jet	pgen/jet.cpp	/^Real r_jet, d_jet, p_jet, vx_jet, vy_jet, vz_jet, bx_jet, by_jet, bz_jet;$/;"	m	namespace:__anon77	file:
vz_planet	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^vy_planet[10], vz_planet[10], gm_cur[11], rad_cor[10], planets_number;$/;"	m	namespace:__anon68	file:
vz_planet	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^vy_planet[10], vz_planet[10], gm_cur[11], rad_cor[10], planets_number;$/;"	m	namespace:__anon109	file:
w	hydro/hydro.hpp	/^  AthenaArray<Real> u, w;           \/\/ time-integrator memory register #1$/;"	m	class:Hydro
w0	pgen/dusty_soundwave.cpp	/^Real rho_g0, p0, u0, v0, w0, bx0, by0, bz0, dby, dbz;$/;"	m	namespace:__anon105	file:
w0	pgen/jeans.cpp	/^Real d0, p0, v0, u0, w0, va, b0;$/;"	m	namespace:__anon119	file:
w1	hydro/hydro.hpp	/^  AthenaArray<Real> u1, w1;         \/\/ time-integrator memory register #2$/;"	m	class:Hydro
w_cc	hydro/hydro.hpp	/^  AthenaArray<Real> u_cc, w_cc;      \/\/ cell-centered approximations$/;"	m	class:Hydro
w_n	hydro/hydro.hpp	/^  AthenaArray<Real> w_n;            \/\/ time-integrator memory register used in dust-gas drag integrators$/;"	m	class:Hydro
w_orb	orbital_advection/orbital_advection.hpp	/^  AthenaArray<Real> w_orb,       u_orb;       \/\/ buffer for orbital advection system output$/;"	m	class:OrbitalTransform::OrbitalAdvection
waiting	bvals/bvals_interfaces.hpp	/^enum class BoundaryStatus {waiting, arrived, completed};$/;"	m	class:BoundaryStatus
wave_flag	pgen/dusty_wave.cpp	/^int wave_flag;$/;"	m	namespace:__anon86	file:
wave_flag	pgen/linear_wave.cpp	/^int wave_flag;$/;"	m	namespace:__anon125	file:
wavenumber	pgen/gr_linear_wave.cpp	/^Real wavenumber;              \/\/ wavenumber$/;"	m	namespace:__anon84	file:
weight	utils/gl_quadrature.cpp	/^  const Real *weight;$/;"	m	struct:GaussLegendre::Quadrature	file:
weight_dust	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> qvalue, weight_gas, weight_dust;$/;"	m	class:DustGasDrag
weight_dust	pgen/disk_3d_mhd_dust.cpp	/^weight_dust[NDUSTFLUIDS];$/;"	m	namespace:__anon60	file:
weight_dust	pgen/disk_RWI_2D.cpp	/^Real initial_D2G[NDUSTFLUIDS], ring_D2G[NDUSTFLUIDS], Stokes_number[NDUSTFLUIDS], Hratio[NDUSTFLUIDS], weight_dust[NDUSTFLUIDS];$/;"	m	namespace:__anon101	file:
weight_dust	pgen/disk_VSI.cpp	/^weight_dust[NDUSTFLUIDS];$/;"	m	namespace:__anon133	file:
weight_dust	pgen/disk_dust_diffusion.cpp	/^weight_dust[NDUSTFLUIDS], Dd[NDUSTFLUIDS];$/;"	m	namespace:__anon70	file:
weight_dust	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^weight_dust[NDUSTFLUIDS];$/;"	m	namespace:__anon68	file:
weight_dust	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^weight_dust[NDUSTFLUIDS];$/;"	m	namespace:__anon109	file:
weight_dust	pgen/disk_planet_dust_cylindrical.cpp	/^weight_dust[NDUSTFLUIDS];$/;"	m	namespace:__anon99	file:
weight_dust	pgen/disk_planet_dust_spherical.cpp	/^weight_dust[NDUSTFLUIDS];$/;"	m	namespace:__anon113	file:
weight_gas	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> qvalue, weight_gas, weight_dust;$/;"	m	class:DustGasDrag
weight_n0	utils/gl_quadrature.cpp	/^static constexpr Real weight_n0[] = {0.0};$/;"	m	namespace:GaussLegendre	file:
weight_n1	utils/gl_quadrature.cpp	/^static constexpr Real weight_n1[] = {0.0};$/;"	m	namespace:GaussLegendre	file:
weight_n10	utils/gl_quadrature.cpp	/^static constexpr Real weight_n10[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n11	utils/gl_quadrature.cpp	/^static constexpr Real weight_n11[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n12	utils/gl_quadrature.cpp	/^static constexpr Real weight_n12[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n13	utils/gl_quadrature.cpp	/^static constexpr Real weight_n13[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n14	utils/gl_quadrature.cpp	/^static constexpr Real weight_n14[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n15	utils/gl_quadrature.cpp	/^static constexpr Real weight_n15[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n16	utils/gl_quadrature.cpp	/^static constexpr Real weight_n16[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n17	utils/gl_quadrature.cpp	/^static constexpr Real weight_n17[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n18	utils/gl_quadrature.cpp	/^static constexpr Real weight_n18[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n19	utils/gl_quadrature.cpp	/^static constexpr Real weight_n19[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n2	utils/gl_quadrature.cpp	/^static constexpr Real weight_n2[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n20	utils/gl_quadrature.cpp	/^static constexpr Real weight_n20[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n21	utils/gl_quadrature.cpp	/^static constexpr Real weight_n21[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n22	utils/gl_quadrature.cpp	/^static constexpr Real weight_n22[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n23	utils/gl_quadrature.cpp	/^static constexpr Real weight_n23[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n24	utils/gl_quadrature.cpp	/^static constexpr Real weight_n24[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n25	utils/gl_quadrature.cpp	/^static constexpr Real weight_n25[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n26	utils/gl_quadrature.cpp	/^static constexpr Real weight_n26[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n27	utils/gl_quadrature.cpp	/^static constexpr Real weight_n27[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n28	utils/gl_quadrature.cpp	/^static constexpr Real weight_n28[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n29	utils/gl_quadrature.cpp	/^static constexpr Real weight_n29[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n3	utils/gl_quadrature.cpp	/^static constexpr Real weight_n3[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n30	utils/gl_quadrature.cpp	/^static constexpr Real weight_n30[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n31	utils/gl_quadrature.cpp	/^static constexpr Real weight_n31[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n32	utils/gl_quadrature.cpp	/^static constexpr Real weight_n32[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n33	utils/gl_quadrature.cpp	/^static constexpr Real weight_n33[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n34	utils/gl_quadrature.cpp	/^static constexpr Real weight_n34[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n35	utils/gl_quadrature.cpp	/^static constexpr Real weight_n35[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n36	utils/gl_quadrature.cpp	/^static constexpr Real weight_n36[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n37	utils/gl_quadrature.cpp	/^static constexpr Real weight_n37[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n38	utils/gl_quadrature.cpp	/^static constexpr Real weight_n38[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n39	utils/gl_quadrature.cpp	/^static constexpr Real weight_n39[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n4	utils/gl_quadrature.cpp	/^static constexpr Real weight_n4[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n40	utils/gl_quadrature.cpp	/^static constexpr Real weight_n40[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n41	utils/gl_quadrature.cpp	/^static constexpr Real weight_n41[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n42	utils/gl_quadrature.cpp	/^static constexpr Real weight_n42[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n43	utils/gl_quadrature.cpp	/^static constexpr Real weight_n43[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n44	utils/gl_quadrature.cpp	/^static constexpr Real weight_n44[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n45	utils/gl_quadrature.cpp	/^static constexpr Real weight_n45[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n46	utils/gl_quadrature.cpp	/^static constexpr Real weight_n46[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n47	utils/gl_quadrature.cpp	/^static constexpr Real weight_n47[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n48	utils/gl_quadrature.cpp	/^static constexpr Real weight_n48[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n49	utils/gl_quadrature.cpp	/^static constexpr Real weight_n49[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n5	utils/gl_quadrature.cpp	/^static constexpr Real weight_n5[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n50	utils/gl_quadrature.cpp	/^static constexpr Real weight_n50[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n51	utils/gl_quadrature.cpp	/^static constexpr Real weight_n51[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n52	utils/gl_quadrature.cpp	/^static constexpr Real weight_n52[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n53	utils/gl_quadrature.cpp	/^static constexpr Real weight_n53[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n54	utils/gl_quadrature.cpp	/^static constexpr Real weight_n54[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n55	utils/gl_quadrature.cpp	/^static constexpr Real weight_n55[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n56	utils/gl_quadrature.cpp	/^static constexpr Real weight_n56[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n57	utils/gl_quadrature.cpp	/^static constexpr Real weight_n57[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n58	utils/gl_quadrature.cpp	/^static constexpr Real weight_n58[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n59	utils/gl_quadrature.cpp	/^static constexpr Real weight_n59[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n6	utils/gl_quadrature.cpp	/^static constexpr Real weight_n6[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n60	utils/gl_quadrature.cpp	/^static constexpr Real weight_n60[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n61	utils/gl_quadrature.cpp	/^static constexpr Real weight_n61[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n62	utils/gl_quadrature.cpp	/^static constexpr Real weight_n62[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n63	utils/gl_quadrature.cpp	/^static constexpr Real weight_n63[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n64	utils/gl_quadrature.cpp	/^static constexpr Real weight_n64[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n7	utils/gl_quadrature.cpp	/^static constexpr Real weight_n7[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n8	utils/gl_quadrature.cpp	/^static constexpr Real weight_n8[] = {$/;"	m	namespace:GaussLegendre	file:
weight_n9	utils/gl_quadrature.cpp	/^static constexpr Real weight_n9[] = {$/;"	m	namespace:GaussLegendre	file:
wght	field/field.hpp	/^  FaceField wght; \/\/!> weights used to integrate E to corner using GS algorithm$/;"	m	class:Field
width_vortex	pgen/disk_RWI_2D.cpp	/^A_bump, sigma_bump, r0_bump, width_vortex, eta_gas, beta_gas, ks_gas,$/;"	m	namespace:__anon101	file:
wl	pgen/dusty_shock.cpp	/^Real wl[NHYDRO];$/;"	m	namespace:__anon120	file:
wl3d_	hydro/hydro.hpp	/^  AthenaArray<Real> wl3d_, wr3d_;$/;"	m	class:Hydro
wl_	hydro/hydro.hpp	/^  AthenaArray<Real> wl_, wr_, wlb_;$/;"	m	class:Hydro
wl_d	pgen/dusty_shock.cpp	/^Real wl_d[4];$/;"	m	namespace:__anon120	file:
wlb_	hydro/hydro.hpp	/^  AthenaArray<Real> wl_, wr_, wlb_;$/;"	m	class:Hydro
wr	pgen/dusty_shock.cpp	/^Real wr[NHYDRO];$/;"	m	namespace:__anon120	file:
wr3d_	hydro/hydro.hpp	/^  AthenaArray<Real> wl3d_, wr3d_;$/;"	m	class:Hydro
wr_	hydro/hydro.hpp	/^  AthenaArray<Real> wl_, wr_, wlb_;$/;"	m	class:Hydro
wr_d	pgen/dusty_shock.cpp	/^Real wr_d[4];$/;"	m	namespace:__anon120	file:
x0	pgen/dust_collision.cpp	/^Real v0, t0, x0, user_dt, iso_cs, gamma_gas;$/;"	m	namespace:__anon152	file:
x0	pgen/dust_collision_different_Ts.cpp	/^Real v0, t0, x0, user_dt, iso_cs, gamma_gas;$/;"	m	namespace:__anon131	file:
x0	pgen/dust_diffusion.cpp	/^Real v0, t0, x0, d0, rho0, v1, v2, v3;$/;"	m	namespace:__anon117	file:
x0	pgen/dust_inelastic_collision.cpp	/^Real v0, t0, x0, user_dt, iso_cs, press, gamma_gas;$/;"	m	namespace:__anon143	file:
x0	pgen/dust_squaredrag.cpp	/^Real v0, t0, x0, user_dt, iso_cs, gamma_gas;$/;"	m	namespace:__anon141	file:
x0	pgen/visc_dustfluids.cpp	/^Real v0, t0, x0;$/;"	m	namespace:__anon151	file:
x0	pgen/visc_scalars.cpp	/^Real v0, t0, x0;$/;"	m	namespace:__anon53	file:
x0_vortex	pgen/disk_RWI_2D.cpp	/^vel_vortex, r0_vortex, x0_vortex, y0_vortex, amp, time_drag, x1min, x1max,$/;"	m	namespace:__anon101	file:
x1_slice	outputs/outputs.hpp	/^  Real x1_slice, x2_slice, x3_slice;$/;"	m	struct:OutputParameters
x1area_	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> x1area_, x2area_, x2area_p1_, x3area_, x3area_p1_;$/;"	m	class:HydroDiffusion
x1e	athena.hpp	/^  AthenaArray<Real> x1e, x2e, x3e;$/;"	m	struct:EdgeField
x1f	athena.hpp	/^  AthenaArray<Real> x1f, x2f, x3f;$/;"	m	struct:FaceField
x1f	coordinates/coordinates.hpp	/^  AthenaArray<Real> dx1f, dx2f, dx3f, x1f, x2f, x3f;    \/\/ face   spacing and positions$/;"	m	class:Coordinates
x1face_area_	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> x1face_area_, x2face_area_, x3face_area_; \/\/ face area in x1, x2, x3 directions$/;"	m	class:DustFluids
x1face_area_	hydro/hydro.hpp	/^  AthenaArray<Real> x1face_area_, x2face_area_, x3face_area_;$/;"	m	class:Hydro
x1face_area_	scalars/scalars.hpp	/^  AthenaArray<Real> x1face_area_, x2face_area_, x3face_area_;$/;"	m	class:PassiveScalars
x1flux	bvals/cc/bvals_cc.hpp	/^  AthenaArray<Real> &x1flux, &x2flux, &x3flux;$/;"	m	class:CellCenteredBoundaryVariable
x1max	athena.hpp	/^  Real x1max, x2max, x3max;$/;"	m	struct:RegionSize
x1max	pgen/disk_RWI_2D.cpp	/^vel_vortex, r0_vortex, x0_vortex, y0_vortex, amp, time_drag, x1min, x1max,$/;"	m	namespace:__anon101	file:
x1max	pgen/disk_VSI.cpp	/^x1min, x1max, x2min, x2max, damping_rate, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon133	file:
x1max	pgen/disk_dust_diffusion.cpp	/^Real x1min, x1max, tau_damping, damping_rate;$/;"	m	namespace:__anon70	file:
x1max	pgen/disk_dust_drift.cpp	/^Real x1min, x1max, tau_damping, damping_rate;$/;"	m	namespace:__anon64	file:
x1max	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real x1min, x1max, damping_rate, gm0, r0, rho0, dslope, p0_over_r0, pslope, beta,$/;"	m	namespace:__anon68	file:
x1max	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real x1min, x1max, damping_rate, gm0, r0, rho0, dslope, p0_over_r0, pslope, beta,$/;"	m	namespace:__anon109	file:
x1max	pgen/disk_planet_dust_cylindrical.cpp	/^x1min, x1max, damping_rate, Hill_radius, accretion_radius, accretion_rate,$/;"	m	namespace:__anon99	file:
x1max	pgen/disk_planet_dust_spherical.cpp	/^x1min, x1max, damping_rate, Hill_radius, accretion_radius, accretion_rate,$/;"	m	namespace:__anon113	file:
x1max	pgen/disk_streaming_cylindrical.cpp	/^Real x1min, x1max, tau_damping, damping_rate;$/;"	m	namespace:__anon54	file:
x1max	pgen/disk_streaming_spherical.cpp	/^Real x1min, x1max, tau_damping, damping_rate;$/;"	m	namespace:__anon75	file:
x1max	pgen/dust_diffusion.cpp	/^Real x1min, x1max, tau_damping, damping_rate;$/;"	m	namespace:__anon117	file:
x1max	pgen/inject_pebble_3D.cpp	/^Real mplanet, tsoft, rsoft, gamma_gas, x1min, x1max;$/;"	m	namespace:__anon62	file:
x1max	pgen/ssheet_RWI_dust.cpp	/^A_bump, sigma_bump, x1min, x1max, damping_rate, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon90	file:
x1max	pgen/ssheet_planet_dust.cpp	/^x1min, x1max, damping_rate, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon111	file:
x1max_	utils/interp_table.hpp	/^  Real x1max_;$/;"	m	class:InterpTable2D
x1min	athena.hpp	/^  Real x1min, x2min, x3min;$/;"	m	struct:RegionSize
x1min	pgen/disk_RWI_2D.cpp	/^vel_vortex, r0_vortex, x0_vortex, y0_vortex, amp, time_drag, x1min, x1max,$/;"	m	namespace:__anon101	file:
x1min	pgen/disk_VSI.cpp	/^x1min, x1max, x2min, x2max, damping_rate, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon133	file:
x1min	pgen/disk_dust_diffusion.cpp	/^Real x1min, x1max, tau_damping, damping_rate;$/;"	m	namespace:__anon70	file:
x1min	pgen/disk_dust_drift.cpp	/^Real x1min, x1max, tau_damping, damping_rate;$/;"	m	namespace:__anon64	file:
x1min	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real x1min, x1max, damping_rate, gm0, r0, rho0, dslope, p0_over_r0, pslope, beta,$/;"	m	namespace:__anon68	file:
x1min	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real x1min, x1max, damping_rate, gm0, r0, rho0, dslope, p0_over_r0, pslope, beta,$/;"	m	namespace:__anon109	file:
x1min	pgen/disk_planet_dust_cylindrical.cpp	/^x1min, x1max, damping_rate, Hill_radius, accretion_radius, accretion_rate,$/;"	m	namespace:__anon99	file:
x1min	pgen/disk_planet_dust_spherical.cpp	/^x1min, x1max, damping_rate, Hill_radius, accretion_radius, accretion_rate,$/;"	m	namespace:__anon113	file:
x1min	pgen/disk_streaming_cylindrical.cpp	/^Real x1min, x1max, tau_damping, damping_rate;$/;"	m	namespace:__anon54	file:
x1min	pgen/disk_streaming_spherical.cpp	/^Real x1min, x1max, tau_damping, damping_rate;$/;"	m	namespace:__anon75	file:
x1min	pgen/dust_diffusion.cpp	/^Real x1min, x1max, tau_damping, damping_rate;$/;"	m	namespace:__anon117	file:
x1min	pgen/inject_pebble_3D.cpp	/^Real mplanet, tsoft, rsoft, gamma_gas, x1min, x1max;$/;"	m	namespace:__anon62	file:
x1min	pgen/ssheet_RWI_dust.cpp	/^A_bump, sigma_bump, x1min, x1max, damping_rate, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon90	file:
x1min	pgen/ssheet_planet_dust.cpp	/^x1min, x1max, damping_rate, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon111	file:
x1min_	utils/interp_table.hpp	/^  Real x1min_;$/;"	m	class:InterpTable2D
x1norm_	utils/interp_table.hpp	/^  Real x1norm_;$/;"	m	class:InterpTable2D
x1rat	athena.hpp	/^  Real x1rat, x2rat, x3rat; \/\/ ratio of dxf(i)\/dxf(i-1)$/;"	m	struct:RegionSize
x1s2	coordinates/coordinates.hpp	/^  AthenaArray<Real> x1s2, x1s3, x2s1, x2s3, x3s1, x3s2; \/\/ area averaged positions for AMR$/;"	m	class:Coordinates
x1s3	coordinates/coordinates.hpp	/^  AthenaArray<Real> x1s2, x1s3, x2s1, x2s3, x3s1, x3s2; \/\/ area averaged positions for AMR$/;"	m	class:Coordinates
x1size	pgen/dust_NSH.cpp	/^Real x1size, x2size, x3size;$/;"	m	namespace:__anon103	file:
x1size	pgen/hb3.cpp	/^Real x1size, x2size, x3size;$/;"	m	namespace:__anon58	file:
x1size	pgen/ssheet.cpp	/^Real x1size,x2size,x3size;$/;"	m	namespace:__anon95	file:
x1size	pgen/ssheet_RWI_dust.cpp	/^Real sound_speed, gamma1, inv_gm1, d0, amp, x1size, x2size, x3size, qshear, Omega0,$/;"	m	namespace:__anon90	file:
x1size	pgen/ssheet_planet_dust.cpp	/^Real x1size, x2size, x3size, sound_speed, gm1, inv_gm1, d0, qshear, Omega0, beta,$/;"	m	namespace:__anon111	file:
x1size	pgen/streaming_eigen.cpp	/^Real x1size, x2size, x3size;$/;"	m	namespace:__anon66	file:
x1size	pgen/streaming_eigen_2dust.cpp	/^Real x1size, x2size, x3size;$/;"	m	namespace:__anon145	file:
x1size	pgen/streaming_nonlinear.cpp	/^Real x1size, x2size, x3size;$/;"	m	namespace:__anon135	file:
x1size	pgen/streaming_stratified.cpp	/^Real x1size, x2size, x3size;$/;"	m	namespace:__anon154	file:
x1v	coordinates/coordinates.hpp	/^  AthenaArray<Real> dx1v, dx2v, dx3v, x1v, x2v, x3v;    \/\/ volume spacing and positions$/;"	m	class:Coordinates
x2_0	pgen/jet.cpp	/^Real gm1, x2_0, x3_0;$/;"	m	namespace:__anon77	file:
x2_slice	outputs/outputs.hpp	/^  Real x1_slice, x2_slice, x3_slice;$/;"	m	struct:OutputParameters
x2area_	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> x1area_, x2area_, x2area_p1_, x3area_, x3area_p1_;$/;"	m	class:HydroDiffusion
x2area_p1_	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> x1area_, x2area_, x2area_p1_, x3area_, x3area_p1_;$/;"	m	class:HydroDiffusion
x2e	athena.hpp	/^  AthenaArray<Real> x1e, x2e, x3e;$/;"	m	struct:EdgeField
x2f	athena.hpp	/^  AthenaArray<Real> x1f, x2f, x3f;$/;"	m	struct:FaceField
x2f	coordinates/coordinates.hpp	/^  AthenaArray<Real> dx1f, dx2f, dx3f, x1f, x2f, x3f;    \/\/ face   spacing and positions$/;"	m	class:Coordinates
x2face_area_	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> x1face_area_, x2face_area_, x3face_area_; \/\/ face area in x1, x2, x3 directions$/;"	m	class:DustFluids
x2face_area_	hydro/hydro.hpp	/^  AthenaArray<Real> x1face_area_, x2face_area_, x3face_area_;$/;"	m	class:Hydro
x2face_area_	scalars/scalars.hpp	/^  AthenaArray<Real> x1face_area_, x2face_area_, x3face_area_;$/;"	m	class:PassiveScalars
x2face_area_p1_	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> x2face_area_p1_, x3face_area_p1_;         \/\/ face area in x2, x3 directions$/;"	m	class:DustFluids
x2face_area_p1_	hydro/hydro.hpp	/^  AthenaArray<Real> x2face_area_p1_, x3face_area_p1_;$/;"	m	class:Hydro
x2face_area_p1_	scalars/scalars.hpp	/^  AthenaArray<Real> x2face_area_p1_, x3face_area_p1_;$/;"	m	class:PassiveScalars
x2flux	bvals/cc/bvals_cc.hpp	/^  AthenaArray<Real> &x1flux, &x2flux, &x3flux;$/;"	m	class:CellCenteredBoundaryVariable
x2max	athena.hpp	/^  Real x1max, x2max, x3max;$/;"	m	struct:RegionSize
x2max	pgen/disk_VSI.cpp	/^x1min, x1max, x2min, x2max, damping_rate, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon133	file:
x2max_	utils/interp_table.hpp	/^  Real x2max_;$/;"	m	class:InterpTable2D
x2min	athena.hpp	/^  Real x1min, x2min, x3min;$/;"	m	struct:RegionSize
x2min	pgen/disk_VSI.cpp	/^x1min, x1max, x2min, x2max, damping_rate, radius_inner_damping, radius_outer_damping,$/;"	m	namespace:__anon133	file:
x2min_	utils/interp_table.hpp	/^  Real x2min_;$/;"	m	class:InterpTable2D
x2norm_	utils/interp_table.hpp	/^  Real x2norm_;$/;"	m	class:InterpTable2D
x2rat	athena.hpp	/^  Real x1rat, x2rat, x3rat; \/\/ ratio of dxf(i)\/dxf(i-1)$/;"	m	struct:RegionSize
x2s1	coordinates/coordinates.hpp	/^  AthenaArray<Real> x1s2, x1s3, x2s1, x2s3, x3s1, x3s2; \/\/ area averaged positions for AMR$/;"	m	class:Coordinates
x2s3	coordinates/coordinates.hpp	/^  AthenaArray<Real> x1s2, x1s3, x2s1, x2s3, x3s1, x3s2; \/\/ area averaged positions for AMR$/;"	m	class:Coordinates
x2size	pgen/dust_NSH.cpp	/^Real x1size, x2size, x3size;$/;"	m	namespace:__anon103	file:
x2size	pgen/hb3.cpp	/^Real x1size, x2size, x3size;$/;"	m	namespace:__anon58	file:
x2size	pgen/ssheet.cpp	/^Real x1size,x2size,x3size;$/;"	m	namespace:__anon95	file:
x2size	pgen/ssheet_RWI_dust.cpp	/^Real sound_speed, gamma1, inv_gm1, d0, amp, x1size, x2size, x3size, qshear, Omega0,$/;"	m	namespace:__anon90	file:
x2size	pgen/ssheet_planet_dust.cpp	/^Real x1size, x2size, x3size, sound_speed, gm1, inv_gm1, d0, qshear, Omega0, beta,$/;"	m	namespace:__anon111	file:
x2size	pgen/streaming_eigen.cpp	/^Real x1size, x2size, x3size;$/;"	m	namespace:__anon66	file:
x2size	pgen/streaming_eigen_2dust.cpp	/^Real x1size, x2size, x3size;$/;"	m	namespace:__anon145	file:
x2size	pgen/streaming_nonlinear.cpp	/^Real x1size, x2size, x3size;$/;"	m	namespace:__anon135	file:
x2size	pgen/streaming_stratified.cpp	/^Real x1size, x2size, x3size;$/;"	m	namespace:__anon154	file:
x2v	coordinates/coordinates.hpp	/^  AthenaArray<Real> dx1v, dx2v, dx3v, x1v, x2v, x3v;    \/\/ volume spacing and positions$/;"	m	class:Coordinates
x3_0	pgen/jet.cpp	/^Real gm1, x2_0, x3_0;$/;"	m	namespace:__anon77	file:
x3_slice	outputs/outputs.hpp	/^  Real x1_slice, x2_slice, x3_slice;$/;"	m	struct:OutputParameters
x3area_	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> x1area_, x2area_, x2area_p1_, x3area_, x3area_p1_;$/;"	m	class:HydroDiffusion
x3area_p1_	hydro/hydro_diffusion/hydro_diffusion.hpp	/^  AthenaArray<Real> x1area_, x2area_, x2area_p1_, x3area_, x3area_p1_;$/;"	m	class:HydroDiffusion
x3e	athena.hpp	/^  AthenaArray<Real> x1e, x2e, x3e;$/;"	m	struct:EdgeField
x3f	athena.hpp	/^  AthenaArray<Real> x1f, x2f, x3f;$/;"	m	struct:FaceField
x3f	coordinates/coordinates.hpp	/^  AthenaArray<Real> dx1f, dx2f, dx3f, x1f, x2f, x3f;    \/\/ face   spacing and positions$/;"	m	class:Coordinates
x3face_area_	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> x1face_area_, x2face_area_, x3face_area_; \/\/ face area in x1, x2, x3 directions$/;"	m	class:DustFluids
x3face_area_	hydro/hydro.hpp	/^  AthenaArray<Real> x1face_area_, x2face_area_, x3face_area_;$/;"	m	class:Hydro
x3face_area_	scalars/scalars.hpp	/^  AthenaArray<Real> x1face_area_, x2face_area_, x3face_area_;$/;"	m	class:PassiveScalars
x3face_area_p1_	dustfluids/dustfluids.hpp	/^  AthenaArray<Real> x2face_area_p1_, x3face_area_p1_;         \/\/ face area in x2, x3 directions$/;"	m	class:DustFluids
x3face_area_p1_	hydro/hydro.hpp	/^  AthenaArray<Real> x2face_area_p1_, x3face_area_p1_;$/;"	m	class:Hydro
x3face_area_p1_	scalars/scalars.hpp	/^  AthenaArray<Real> x2face_area_p1_, x3face_area_p1_;$/;"	m	class:PassiveScalars
x3flux	bvals/cc/bvals_cc.hpp	/^  AthenaArray<Real> &x1flux, &x2flux, &x3flux;$/;"	m	class:CellCenteredBoundaryVariable
x3max	athena.hpp	/^  Real x1max, x2max, x3max;$/;"	m	struct:RegionSize
x3min	athena.hpp	/^  Real x1min, x2min, x3min;$/;"	m	struct:RegionSize
x3rat	athena.hpp	/^  Real x1rat, x2rat, x3rat; \/\/ ratio of dxf(i)\/dxf(i-1)$/;"	m	struct:RegionSize
x3s1	coordinates/coordinates.hpp	/^  AthenaArray<Real> x1s2, x1s3, x2s1, x2s3, x3s1, x3s2; \/\/ area averaged positions for AMR$/;"	m	class:Coordinates
x3s2	coordinates/coordinates.hpp	/^  AthenaArray<Real> x1s2, x1s3, x2s1, x2s3, x3s1, x3s2; \/\/ area averaged positions for AMR$/;"	m	class:Coordinates
x3size	pgen/dust_NSH.cpp	/^Real x1size, x2size, x3size;$/;"	m	namespace:__anon103	file:
x3size	pgen/hb3.cpp	/^Real x1size, x2size, x3size;$/;"	m	namespace:__anon58	file:
x3size	pgen/ssheet.cpp	/^Real x1size,x2size,x3size;$/;"	m	namespace:__anon95	file:
x3size	pgen/ssheet_RWI_dust.cpp	/^Real sound_speed, gamma1, inv_gm1, d0, amp, x1size, x2size, x3size, qshear, Omega0,$/;"	m	namespace:__anon90	file:
x3size	pgen/ssheet_planet_dust.cpp	/^Real x1size, x2size, x3size, sound_speed, gm1, inv_gm1, d0, qshear, Omega0, beta,$/;"	m	namespace:__anon111	file:
x3size	pgen/streaming_eigen.cpp	/^Real x1size, x2size, x3size;$/;"	m	namespace:__anon66	file:
x3size	pgen/streaming_eigen_2dust.cpp	/^Real x1size, x2size, x3size;$/;"	m	namespace:__anon145	file:
x3size	pgen/streaming_nonlinear.cpp	/^Real x1size, x2size, x3size;$/;"	m	namespace:__anon135	file:
x3size	pgen/streaming_stratified.cpp	/^Real x1size, x2size, x3size;$/;"	m	namespace:__anon154	file:
x3v	coordinates/coordinates.hpp	/^  AthenaArray<Real> dx1v, dx2v, dx3v, x1v, x2v, x3v;    \/\/ volume spacing and positions$/;"	m	class:Coordinates
x_	eos/general/hydrogen.cpp	/^Real x_(Real rho, Real T) {$/;"	f	namespace:__anon11
x_0	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real gmstar, x_0, y_0, z_0, vx_0, vy_0, vz_0, x_cur, y_cur, z_cur, vx_cur, vy_cur, vz_cur;$/;"	m	namespace:__anon68	file:
x_0	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real gmstar, x_0, y_0, z_0, vx_0, vy_0, vz_0, x_cur, y_cur, z_cur, vx_cur, vy_cur, vz_cur;$/;"	m	namespace:__anon109	file:
x_cur	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real gmstar, x_0, y_0, z_0, vx_0, vy_0, vz_0, x_cur, y_cur, z_cur, vx_cur, vy_cur, vz_cur;$/;"	m	namespace:__anon68	file:
x_cur	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real gmstar, x_0, y_0, z_0, vx_0, vy_0, vz_0, x_cur, y_cur, z_cur, vx_cur, vy_cur, vz_cur;$/;"	m	namespace:__anon109	file:
x_decomp	fft/athena_fft.hpp	/^const unsigned int x_decomp = 1<<0;$/;"	m	namespace:FFTBlock::DecompositionNames
x_planet	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^accretion_rate[10], x_planet[10], y_planet[10], vx_planet[10],$/;"	m	namespace:__anon68	file:
x_planet	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^accretion_rate[10], x_planet[10], y_planet[10], vx_planet[10],$/;"	m	namespace:__anon109	file:
xc	pgen/field_loop_poles.cpp	/^Real xc, yc, zc, beta, b0;$/;"	m	namespace:__anon56	file:
xgh	bvals/orbital/bvals_orbital.hpp	/^  int xgh;$/;"	m	class:OrbitalBoundaryCommunication
xgh	orbital_advection/orbital_advection.hpp	/^  int xorder, xgh, dust_xorder;$/;"	m	class:OrbitalTransform::OrbitalAdvection
xgh_	bvals/bvals.hpp	/^  int xorder_, xgh_, dust_xorder_;$/;"	m	class:BoundaryValues
xgh_	bvals/fc/bvals_fc.hpp	/^  int xorder_, xgh_;$/;"	m	class:FaceCenteredBoundaryVariable
xorder	orbital_advection/orbital_advection.hpp	/^  int xorder, xgh, dust_xorder;$/;"	m	class:OrbitalTransform::OrbitalAdvection
xorder	reconstruct/reconstruction.hpp	/^  int xorder;   \/\/ roughly the formal order of accuracy of overall reconstruction method$/;"	m	class:Reconstruction
xorder_	bvals/bvals.hpp	/^  int xorder_, xgh_, dust_xorder_;$/;"	m	class:BoundaryValues
xorder_	bvals/fc/bvals_fc.hpp	/^  int xorder_, xgh_;$/;"	m	class:FaceCenteredBoundaryVariable
xshock	pgen/dusty_shock.cpp	/^Real user_dt, iso_cs, xshock, gamma_gas, vel_right;$/;"	m	namespace:__anon120	file:
xx_arr	dustfluids/dustfluids_drags/dust_gas_drag.hpp	/^  AthenaArray<Real> sum_arr, xx_arr;$/;"	m	class:DustGasDrag
xy_decomp	fft/athena_fft.hpp	/^const unsigned int xy_decomp = x_decomp | y_decomp;$/;"	m	namespace:FFTBlock::DecompositionNames
xyz_decomp	fft/athena_fft.hpp	/^const unsigned int xyz_decomp = x_decomp | y_decomp | z_decomp;$/;"	m	namespace:FFTBlock::DecompositionNames
xz_decomp	fft/athena_fft.hpp	/^const unsigned int xz_decomp = x_decomp | z_decomp;$/;"	m	namespace:FFTBlock::DecompositionNames
y0_vortex	pgen/disk_RWI_2D.cpp	/^vel_vortex, r0_vortex, x0_vortex, y0_vortex, amp, time_drag, x1min, x1max,$/;"	m	namespace:__anon101	file:
y_0	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real gmstar, x_0, y_0, z_0, vx_0, vy_0, vz_0, x_cur, y_cur, z_cur, vx_cur, vy_cur, vz_cur;$/;"	m	namespace:__anon68	file:
y_0	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real gmstar, x_0, y_0, z_0, vx_0, vy_0, vz_0, x_cur, y_cur, z_cur, vx_cur, vy_cur, vz_cur;$/;"	m	namespace:__anon109	file:
y_cur	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real gmstar, x_0, y_0, z_0, vx_0, vy_0, vz_0, x_cur, y_cur, z_cur, vx_cur, vy_cur, vz_cur;$/;"	m	namespace:__anon68	file:
y_cur	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real gmstar, x_0, y_0, z_0, vx_0, vy_0, vz_0, x_cur, y_cur, z_cur, vx_cur, vy_cur, vz_cur;$/;"	m	namespace:__anon109	file:
y_decomp	fft/athena_fft.hpp	/^const unsigned int y_decomp = 1<<1;$/;"	m	namespace:FFTBlock::DecompositionNames
y_planet	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^accretion_rate[10], x_planet[10], y_planet[10], vx_planet[10],$/;"	m	namespace:__anon68	file:
y_planet	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^accretion_rate[10], x_planet[10], y_planet[10], vx_planet[10],$/;"	m	namespace:__anon109	file:
yc	pgen/field_loop_poles.cpp	/^Real xc, yc, zc, beta, b0;$/;"	m	namespace:__anon56	file:
yz_decomp	fft/athena_fft.hpp	/^const unsigned int yz_decomp = y_decomp | z_decomp;$/;"	m	namespace:FFTBlock::DecompositionNames
z_0	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real gmstar, x_0, y_0, z_0, vx_0, vy_0, vz_0, x_cur, y_cur, z_cur, vx_cur, vy_cur, vz_cur;$/;"	m	namespace:__anon68	file:
z_0	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real gmstar, x_0, y_0, z_0, vx_0, vy_0, vz_0, x_cur, y_cur, z_cur, vx_cur, vy_cur, vz_cur;$/;"	m	namespace:__anon109	file:
z_cur	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^Real gmstar, x_0, y_0, z_0, vx_0, vy_0, vz_0, x_cur, y_cur, z_cur, vx_cur, vy_cur, vz_cur;$/;"	m	namespace:__anon68	file:
z_cur	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^Real gmstar, x_0, y_0, z_0, vx_0, vy_0, vz_0, x_cur, y_cur, z_cur, vx_cur, vy_cur, vz_cur;$/;"	m	namespace:__anon109	file:
z_decomp	fft/athena_fft.hpp	/^const unsigned int z_decomp = 1<<2;$/;"	m	namespace:FFTBlock::DecompositionNames
z_planet	pgen/disk_dust_diffusion.cpp	/^Real tau_relax, rs, gmstar, gmp, rad_planet, phi_planet_0, z_planet, t0_planet, t_end_planet, vk_planet, omega_planet, inv_omega_planet;$/;"	m	namespace:__anon70	file:
z_planet	pgen/disk_multiple_planet_dust_cylindrical.cpp	/^phi_planet[10], z_planet[10], t0_planet[10], time_drag, vk_planet[10],$/;"	m	namespace:__anon68	file:
z_planet	pgen/disk_multiple_planets_dust_cylindrical.cpp	/^phi_planet[10], z_planet[10], t0_planet[10], time_drag, vk_planet[10],$/;"	m	namespace:__anon109	file:
z_planet	pgen/disk_planet_dust_cylindrical.cpp	/^Real rad_soft, gmp, inv_sqrt2gmp, rad_planet, phi_planet_0, z_planet,$/;"	m	namespace:__anon99	file:
z_planet	pgen/disk_planet_dust_spherical.cpp	/^Real rad_soft, gmp, inv_sqrt2gmp, rad_planet, phi_planet_0, z_planet,$/;"	m	namespace:__anon113	file:
zc	pgen/field_loop_poles.cpp	/^Real xc, yc, zc, beta, b0;$/;"	m	namespace:__anon56	file:
~AthenaArray	athena_arrays.hpp	/^AthenaArray<T>::~AthenaArray() {$/;"	f	class:AthenaArray
~BoundaryBase	bvals/bvals_base.cpp	/^BoundaryBase::~BoundaryBase() {$/;"	f	class:BoundaryBase
~BoundaryBuffer	bvals/bvals_interfaces.hpp	/^  virtual ~BoundaryBuffer() {}$/;"	f	class:BoundaryBuffer
~BoundaryCommunication	bvals/bvals_interfaces.hpp	/^  virtual ~BoundaryCommunication() {}$/;"	f	class:BoundaryCommunication
~BoundaryPhysics	bvals/bvals_interfaces.hpp	/^  virtual ~BoundaryPhysics() {}$/;"	f	class:BoundaryPhysics
~BoundaryValues	bvals/bvals.cpp	/^BoundaryValues::~BoundaryValues() {$/;"	f	class:BoundaryValues
~CellCenteredBoundaryVariable	bvals/cc/bvals_cc.cpp	/^CellCenteredBoundaryVariable::~CellCenteredBoundaryVariable() {$/;"	f	class:CellCenteredBoundaryVariable
~FFTBlock	fft/athena_fft.cpp	/^FFTBlock::~FFTBlock() {$/;"	f	class:FFTBlock
~FFTDriver	fft/fft_driver.cpp	/^FFTDriver::~FFTDriver() {$/;"	f	class:FFTDriver
~FFTGravity	gravity/fft_gravity.hpp	/^  ~FFTGravity() {}$/;"	f	class:FFTGravity
~FFTGravityDriver	gravity/fft_gravity.cpp	/^FFTGravityDriver::~FFTGravityDriver() {$/;"	f	class:FFTGravityDriver
~FaceCenteredBoundaryVariable	bvals/fc/bvals_fc.cpp	/^FaceCenteredBoundaryVariable::~FaceCenteredBoundaryVariable() {$/;"	f	class:FaceCenteredBoundaryVariable
~IOWrapper	outputs/io_wrapper.hpp	/^  ~IOWrapper() {}$/;"	f	class:IOWrapper
~InputBlock	parameter_input.cpp	/^InputBlock::~InputBlock() {$/;"	f	class:InputBlock
~MGBoundaryValues	bvals/cc/mg/bvals_mg.cpp	/^MGBoundaryValues::~MGBoundaryValues() {$/;"	f	class:MGBoundaryValues
~MGGravity	gravity/mg_gravity.cpp	/^MGGravity::~MGGravity() {$/;"	f	class:MGGravity
~MGGravityDriver	gravity/mg_gravity.cpp	/^MGGravityDriver::~MGGravityDriver() {$/;"	f	class:MGGravityDriver
~Mesh	mesh/mesh.cpp	/^Mesh::~Mesh() {$/;"	f	class:Mesh
~MeshBlock	mesh/meshblock.cpp	/^MeshBlock::~MeshBlock() {$/;"	f	class:MeshBlock
~MeshBlockTree	mesh/meshblock_tree.cpp	/^MeshBlockTree::~MeshBlockTree() {$/;"	f	class:MeshBlockTree
~MeshRefinement	mesh/mesh_refinement.cpp	/^MeshRefinement::~MeshRefinement() {$/;"	f	class:MeshRefinement
~Multigrid	multigrid/multigrid.cpp	/^Multigrid::~Multigrid() {$/;"	f	class:Multigrid
~MultigridDriver	multigrid/multigrid_driver.cpp	/^MultigridDriver::~MultigridDriver() {$/;"	f	class:MultigridDriver
~OrbitalAdvection	orbital_advection/orbital_advection.cpp	/^OrbitalAdvection::~OrbitalAdvection() {$/;"	f	class:OrbitalAdvection
~OrbitalBoundaryCommunication	bvals/orbital/bvals_orbital.cpp	/^OrbitalBoundaryCommunication::~OrbitalBoundaryCommunication() {$/;"	f	class:OrbitalBoundaryCommunication
~Outputs	outputs/outputs.cpp	/^Outputs::~Outputs() {$/;"	f	class:Outputs
~ParameterInput	parameter_input.cpp	/^ParameterInput::~ParameterInput() {$/;"	f	class:ParameterInput
~TurbulenceDriver	fft/turbulence.cpp	/^TurbulenceDriver::~TurbulenceDriver() {$/;"	f	class:TurbulenceDriver
