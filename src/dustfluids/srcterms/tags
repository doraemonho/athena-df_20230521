!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AddDustFluidsSourceTerms	dustfluids_srcterms.cpp	/^void DustFluidsSourceTerms::AddDustFluidsSourceTerms(const Real time, const Real dt,$/;"	f	class:DustFluidsSourceTerms
ConstantAccelerationDustFluids	constant_acc_dustfluids.cpp	/^void DustFluidsSourceTerms::ConstantAccelerationDustFluids(const Real dt, const AthenaArray<Real> *flux_df,$/;"	f	class:DustFluidsSourceTerms
DUSTFLUIDS_SRCTERMS_HPP_	dustfluids_srcterms.hpp	/^#define DUSTFLUIDS_SRCTERMS_HPP_$/;"	d
DustFluidsSourceTerms	dustfluids_srcterms.cpp	/^DustFluidsSourceTerms::DustFluidsSourceTerms(DustFluids *pdf, ParameterInput *pin) {$/;"	f	class:DustFluidsSourceTerms
DustFluidsSourceTerms	dustfluids_srcterms.hpp	/^class DustFluidsSourceTerms {$/;"	c
GetGM	dustfluids_srcterms.hpp	/^  Real GetGM() const {return gm_;}$/;"	f	class:DustFluidsSourceTerms
Omega_0_	dustfluids_srcterms.hpp	/^  Real Omega_0_, qshear_;           \/\/ Orbital freq and shear rate in shearing box$/;"	m	class:DustFluidsSourceTerms
OrbitalAdvectionSourceTermsDustFluids	orbital_advection_srcterms_dustfluids.cpp	/^void DustFluidsSourceTerms::OrbitalAdvectionSourceTermsDustFluids$/;"	f	class:DustFluidsSourceTerms
PointMassDustFluids	pointmass_dustfluids.cpp	/^void DustFluidsSourceTerms::PointMassDustFluids(const Real dt, const AthenaArray<Real> *flux_df,$/;"	f	class:DustFluidsSourceTerms
PolarAveragingDustFluids	dustfluids_srcterms.cpp	/^void DustFluidsSourceTerms::PolarAveragingDustFluids(AthenaArray<Real> &cons_df, int j, int nlayer)$/;"	f	class:DustFluidsSourceTerms
RotatingSystemSourceTermsDustFluids	rotating_system_srcterms_dustfluids.cpp	/^void DustFluidsSourceTerms::RotatingSystemSourceTermsDustFluids$/;"	f	class:DustFluidsSourceTerms
ShBoxCoord_	dustfluids_srcterms.hpp	/^  int  ShBoxCoord_;                 \/\/ ShearCoordinate type: 1=xy (default), 2=xz$/;"	m	class:DustFluidsSourceTerms
ShearingBoxSourceTermsDustFluids	shearing_box_dustfluids.cpp	/^void DustFluidsSourceTerms::ShearingBoxSourceTermsDustFluids(const Real dt,$/;"	f	class:DustFluidsSourceTerms
UserSourceTerm	dustfluids_srcterms.hpp	/^  SrcTermFunc UserSourceTerm;$/;"	m	class:DustFluidsSourceTerms
dust_avg_	dustfluids_srcterms.hpp	/^  AthenaArray<Real> dust_avg_;      \/\/ storage for polar averaging$/;"	m	class:DustFluidsSourceTerms
dustfluids_sourceterms_defined	dustfluids_srcterms.hpp	/^  bool dustfluids_sourceterms_defined;$/;"	m	class:DustFluidsSourceTerms
flag_point_mass_	dustfluids_srcterms.hpp	/^  bool flag_point_mass_;            \/\/ flag for calling PointMass function$/;"	m	class:DustFluidsSourceTerms
flag_shearing_source_	dustfluids_srcterms.hpp	/^  int  flag_shearing_source_;       \/\/ 1=orbital advection, 2=shearing box, 3=rotating system$/;"	m	class:DustFluidsSourceTerms
g1_	dustfluids_srcterms.hpp	/^  Real g1_, g2_, g3_;               \/\/ constant acc'n in each direction$/;"	m	class:DustFluidsSourceTerms
g2_	dustfluids_srcterms.hpp	/^  Real g1_, g2_, g3_;               \/\/ constant acc'n in each direction$/;"	m	class:DustFluidsSourceTerms
g3_	dustfluids_srcterms.hpp	/^  Real g1_, g2_, g3_;               \/\/ constant acc'n in each direction$/;"	m	class:DustFluidsSourceTerms
gm_	dustfluids_srcterms.hpp	/^  Real gm_;                         \/\/ GM for point mass MUST BE LOCATED AT ORIGIN$/;"	m	class:DustFluidsSourceTerms
pmy_dustfluids_	dustfluids_srcterms.hpp	/^  DustFluids *pmy_dustfluids_;      \/\/ ptr to DustFluids containing this DustFluidsSourceTerms$/;"	m	class:DustFluidsSourceTerms
qshear_	dustfluids_srcterms.hpp	/^  Real Omega_0_, qshear_;           \/\/ Orbital freq and shear rate in shearing box$/;"	m	class:DustFluidsSourceTerms
