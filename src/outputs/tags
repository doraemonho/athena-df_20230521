!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ATHDF5Output	outputs.hpp	/^  explicit ATHDF5Output(OutputParameters oparams) : OutputType(oparams) {}$/;"	f	class:ATHDF5Output
ATHDF5Output	outputs.hpp	/^class ATHDF5Output : public OutputType {$/;"	c
AppendOutputDataNode	outputs.cpp	/^void OutputType::AppendOutputDataNode(OutputData *pnew_data) {$/;"	f	class:OutputType
CalculateCartesianVector	outputs.cpp	/^void OutputType::CalculateCartesianVector(AthenaArray<Real> &src, AthenaArray<Real> &dst,$/;"	f	class:OutputType
ClearOutputData	outputs.cpp	/^void OutputType::ClearOutputData() {$/;"	f	class:OutputType
Close	io_wrapper.cpp	/^int IOWrapper::Close() {$/;"	f	class:IOWrapper
ContainVariable	outputs.cpp	/^bool OutputType::ContainVariable(const std::string &haystack, const std::string &needle) {$/;"	f	class:OutputType
FileMode	io_wrapper.hpp	/^  enum class FileMode {read, write};$/;"	c	class:IOWrapper
FormattedTableOutput	outputs.hpp	/^  explicit FormattedTableOutput(OutputParameters oparams) : OutputType(oparams) {}$/;"	f	class:FormattedTableOutput
FormattedTableOutput	outputs.hpp	/^class FormattedTableOutput : public OutputType {$/;"	c
GetPosition	io_wrapper.cpp	/^IOWrapperSizeT IOWrapper::GetPosition() {$/;"	f	class:IOWrapper
H5T_NATIVE_REAL	athena_hdf5.cpp	/^#define H5T_NATIVE_REAL /;"	d	file:
HistoryOutput	outputs.hpp	/^  explicit HistoryOutput(OutputParameters oparams) : OutputType(oparams) {}$/;"	f	class:HistoryOutput
HistoryOutput	outputs.hpp	/^class HistoryOutput : public OutputType {$/;"	c
IOWrapper	io_wrapper.hpp	/^  IOWrapper() : fh_(nullptr), comm_(MPI_COMM_WORLD) {}$/;"	f	class:IOWrapper
IOWrapper	io_wrapper.hpp	/^class IOWrapper {$/;"	c
IsBigEndian	vtk.cpp	/^int IsBigEndian() {$/;"	f
LoadOutputData	outputs.cpp	/^void OutputType::LoadOutputData(MeshBlock *pmb) {$/;"	f	class:OutputType
MakeOutputs	outputs.cpp	/^void Outputs::MakeOutputs(Mesh *pm, ParameterInput *pin, bool wtflag) {$/;"	f	class:Outputs
MakeXDMF	athena_hdf5.cpp	/^void ATHDF5Output::MakeXDMF() {$/;"	f	class:ATHDF5Output
NHISTORY_VARS	history.cpp	/^#define NHISTORY_VARS /;"	d	file:
OUTPUTS_IO_WRAPPER_HPP_	io_wrapper.hpp	/^#define OUTPUTS_IO_WRAPPER_HPP_$/;"	d
OUTPUTS_OUTPUTS_HPP_	outputs.hpp	/^#define OUTPUTS_OUTPUTS_HPP_$/;"	d
Open	io_wrapper.cpp	/^int IOWrapper::Open(const char* fname, FileMode rw) {$/;"	f	class:IOWrapper
OutputData	outputs.hpp	/^  OutputData() : pnext(nullptr),  pprev(nullptr) {}$/;"	f	struct:OutputData
OutputData	outputs.hpp	/^struct OutputData {$/;"	s
OutputParameters	outputs.hpp	/^  OutputParameters() : block_number(0), next_time(0.0), dt(0.0), file_number(0),$/;"	f	struct:OutputParameters
OutputParameters	outputs.hpp	/^struct OutputParameters {$/;"	s
OutputType	outputs.cpp	/^OutputType::OutputType(OutputParameters oparams) :$/;"	f	class:OutputType
OutputType	outputs.hpp	/^class OutputType {$/;"	c
Outputs	outputs.cpp	/^Outputs::Outputs(Mesh *pm, ParameterInput *pin) {$/;"	f	class:Outputs
Outputs	outputs.hpp	/^class Outputs {$/;"	c
Read	io_wrapper.cpp	/^std::size_t IOWrapper::Read(void *buf, IOWrapperSizeT size, IOWrapperSizeT count) {$/;"	f	class:IOWrapper
Read_all	io_wrapper.cpp	/^std::size_t IOWrapper::Read_all(void *buf, IOWrapperSizeT size, IOWrapperSizeT count) {$/;"	f	class:IOWrapper
Read_at	io_wrapper.cpp	/^std::size_t IOWrapper::Read_at(void *buf, IOWrapperSizeT size,$/;"	f	class:IOWrapper
Read_at_all	io_wrapper.cpp	/^std::size_t IOWrapper::Read_at_all(void *buf, IOWrapperSizeT size,$/;"	f	class:IOWrapper
ReplaceOutputDataNode	outputs.cpp	/^void OutputType::ReplaceOutputDataNode(OutputData *pold, OutputData *pnew) {$/;"	f	class:OutputType
RestartOutput	outputs.hpp	/^  explicit RestartOutput(OutputParameters oparams) : OutputType(oparams) {}$/;"	f	class:RestartOutput
RestartOutput	outputs.hpp	/^class RestartOutput : public OutputType {$/;"	c
Seek	io_wrapper.cpp	/^int IOWrapper::Seek(IOWrapperSizeT offset) {$/;"	f	class:IOWrapper
SetCommunicator	io_wrapper.hpp	/^  void SetCommunicator(MPI_Comm scomm) { comm_=scomm;}$/;"	f	class:IOWrapper
SliceOutputData	outputs.cpp	/^bool OutputType::SliceOutputData(MeshBlock *pmb, int dim) {$/;"	f	class:OutputType
SumOutputData	outputs.cpp	/^void OutputType::SumOutputData(MeshBlock* pmb, int dim) {$/;"	f	class:OutputType
Swap4Bytes	vtk.cpp	/^inline void Swap4Bytes(void *vdat) {$/;"	f	namespace:__anon1
TransformOutputData	outputs.cpp	/^bool OutputType::TransformOutputData(MeshBlock *pmb) {$/;"	f	class:OutputType
VTKOutput	outputs.hpp	/^  explicit VTKOutput(OutputParameters oparams) : OutputType(oparams) {}$/;"	f	class:VTKOutput
VTKOutput	outputs.hpp	/^class VTKOutput : public OutputType {$/;"	c
Write	io_wrapper.cpp	/^std::size_t IOWrapper::Write(const void *buf, IOWrapperSizeT size, IOWrapperSizeT count) {$/;"	f	class:IOWrapper
WriteOutputFile	athena_hdf5.cpp	/^void ATHDF5Output::WriteOutputFile(Mesh *pm, ParameterInput *pin, bool flag) {$/;"	f	class:ATHDF5Output
WriteOutputFile	formatted_table.cpp	/^void FormattedTableOutput::WriteOutputFile(Mesh *pm, ParameterInput *pin, bool flag) {$/;"	f	class:FormattedTableOutput
WriteOutputFile	history.cpp	/^void HistoryOutput::WriteOutputFile(Mesh *pm, ParameterInput *pin, bool flag) {$/;"	f	class:HistoryOutput
WriteOutputFile	restart.cpp	/^void RestartOutput::WriteOutputFile(Mesh *pm, ParameterInput *pin, bool force_write) {$/;"	f	class:RestartOutput
WriteOutputFile	vtk.cpp	/^void VTKOutput::WriteOutputFile(Mesh *pm, ParameterInput *pin, bool flag) {$/;"	f	class:VTKOutput
Write_at	io_wrapper.cpp	/^std::size_t IOWrapper::Write_at(const void *buf, IOWrapperSizeT size,$/;"	f	class:IOWrapper
Write_at_all	io_wrapper.cpp	/^std::size_t IOWrapper::Write_at_all(const void *buf, IOWrapperSizeT size,$/;"	f	class:IOWrapper
block_name	outputs.hpp	/^  std::string block_name;$/;"	m	struct:OutputParameters
block_number	outputs.hpp	/^  int block_number;$/;"	m	struct:OutputParameters
cartesian_vector	outputs.hpp	/^  bool include_ghost_zones, cartesian_vector;$/;"	m	struct:OutputParameters
code_time	outputs.hpp	/^  float code_time;                            \/\/ time in code unit for XDMF$/;"	m	class:ATHDF5Output
comm_	io_wrapper.hpp	/^  MPI_Comm comm_;$/;"	m	class:IOWrapper
copy_other	outputs.hpp	/^  OutputType& operator=(const OutputType& copy_other) = default;$/;"	m	class:OutputType
copy_other	outputs.hpp	/^  OutputType(const OutputType& copy_other) = default;$/;"	m	class:OutputType
data	outputs.hpp	/^  AthenaArray<Real> data;  \/\/ array containing data (usually shallow copy\/slice)$/;"	m	struct:OutputData
data_format	outputs.hpp	/^  std::string data_format;$/;"	m	struct:OutputParameters
dataset_names	outputs.hpp	/^  char (*dataset_names)[max_name_length+1];   \/\/ array of C-string names of datasets$/;"	m	class:ATHDF5Output
dcycle	outputs.hpp	/^  int dcycle;$/;"	m	struct:OutputParameters
dt	outputs.hpp	/^  Real next_time, dt;$/;"	m	struct:OutputParameters
fh_	io_wrapper.hpp	/^  IOWrapperFile fh_;$/;"	m	class:IOWrapper
file_basename	outputs.hpp	/^  std::string file_basename;$/;"	m	struct:OutputParameters
file_id	outputs.hpp	/^  std::string file_id;$/;"	m	struct:OutputParameters
file_number	outputs.hpp	/^  int file_number;$/;"	m	struct:OutputParameters
file_type	outputs.hpp	/^  std::string file_type;$/;"	m	struct:OutputParameters
filename	outputs.hpp	/^  std::string filename;                       \/\/ name of athdf file$/;"	m	class:ATHDF5Output
include_ghost_zones	outputs.hpp	/^  bool include_ghost_zones, cartesian_vector;$/;"	m	struct:OutputParameters
islice	outputs.hpp	/^  int islice, jslice, kslice;$/;"	m	struct:OutputParameters
jslice	outputs.hpp	/^  int islice, jslice, kslice;$/;"	m	struct:OutputParameters
kslice	outputs.hpp	/^  int islice, jslice, kslice;$/;"	m	struct:OutputParameters
max_name_length	outputs.hpp	/^  static const int max_name_length = 20;  \/\/ maximum length of names excluding \\0$/;"	m	class:ATHDF5Output
name	outputs.hpp	/^  std::string name;$/;"	m	struct:OutputData
next_time	outputs.hpp	/^  Real next_time, dt;$/;"	m	struct:OutputParameters
num_blocks_global	outputs.hpp	/^  int num_blocks_global;                      \/\/ number of MeshBlocks in simulation$/;"	m	class:ATHDF5Output
num_datasets	outputs.hpp	/^  int num_datasets;                           \/\/ count of datasets to output$/;"	m	class:ATHDF5Output
num_variables	outputs.hpp	/^  int *num_variables;                         \/\/ list of counts of variables per dataset$/;"	m	class:ATHDF5Output
num_vars_	outputs.hpp	/^  int num_vars_;             \/\/ number of variables in output$/;"	m	class:OutputType
nx1	outputs.hpp	/^  int nx1, nx2, nx3;                          \/\/ sizes of MeshBlocks$/;"	m	class:ATHDF5Output
nx2	outputs.hpp	/^  int nx1, nx2, nx3;                          \/\/ sizes of MeshBlocks$/;"	m	class:ATHDF5Output
nx3	outputs.hpp	/^  int nx1, nx2, nx3;                          \/\/ sizes of MeshBlocks$/;"	m	class:ATHDF5Output
orbital_system_output	outputs.hpp	/^  bool orbital_system_output;$/;"	m	struct:OutputParameters
out_ie	outputs.hpp	/^  int out_is, out_ie, out_js, out_je, out_ks, out_ke;  \/\/ OutputData array start\/end index$/;"	m	class:OutputType
out_is	outputs.hpp	/^  int out_is, out_ie, out_js, out_je, out_ks, out_ke;  \/\/ OutputData array start\/end index$/;"	m	class:OutputType
out_je	outputs.hpp	/^  int out_is, out_ie, out_js, out_je, out_ks, out_ke;  \/\/ OutputData array start\/end index$/;"	m	class:OutputType
out_js	outputs.hpp	/^  int out_is, out_ie, out_js, out_je, out_ks, out_ke;  \/\/ OutputData array start\/end index$/;"	m	class:OutputType
out_ke	outputs.hpp	/^  int out_is, out_ie, out_js, out_je, out_ks, out_ke;  \/\/ OutputData array start\/end index$/;"	m	class:OutputType
out_ks	outputs.hpp	/^  int out_is, out_ie, out_js, out_je, out_ks, out_ke;  \/\/ OutputData array start\/end index$/;"	m	class:OutputType
output_params	outputs.hpp	/^  OutputParameters output_params; \/\/ control data read from <output> block$/;"	m	class:OutputType
output_slicex1	outputs.hpp	/^  bool output_slicex1, output_slicex2, output_slicex3;$/;"	m	struct:OutputParameters
output_slicex2	outputs.hpp	/^  bool output_slicex1, output_slicex2, output_slicex3;$/;"	m	struct:OutputParameters
output_slicex3	outputs.hpp	/^  bool output_slicex1, output_slicex2, output_slicex3;$/;"	m	struct:OutputParameters
output_sumx1	outputs.hpp	/^  bool output_sumx1, output_sumx2, output_sumx3;$/;"	m	struct:OutputParameters
output_sumx2	outputs.hpp	/^  bool output_sumx1, output_sumx2, output_sumx3;$/;"	m	struct:OutputParameters
output_sumx3	outputs.hpp	/^  bool output_sumx1, output_sumx2, output_sumx3;$/;"	m	struct:OutputParameters
override	outputs.hpp	/^  void WriteOutputFile(Mesh *pm, ParameterInput *pin, bool flag) override;$/;"	m	class:ATHDF5Output
override	outputs.hpp	/^  void WriteOutputFile(Mesh *pm, ParameterInput *pin, bool flag) override;$/;"	m	class:FormattedTableOutput
override	outputs.hpp	/^  void WriteOutputFile(Mesh *pm, ParameterInput *pin, bool flag) override;$/;"	m	class:HistoryOutput
override	outputs.hpp	/^  void WriteOutputFile(Mesh *pm, ParameterInput *pin, bool flag) override;$/;"	m	class:RestartOutput
override	outputs.hpp	/^  void WriteOutputFile(Mesh *pm, ParameterInput *pin, bool flag) override;$/;"	m	class:VTKOutput
pfirst_data_	outputs.hpp	/^  OutputData *pfirst_data_;  \/\/ ptr to head OutputData node in doubly linked list$/;"	m	class:OutputType
pfirst_type_	outputs.hpp	/^  OutputType *pfirst_type_; \/\/ ptr to head OutputType node in singly linked list$/;"	m	class:Outputs
plast_data_	outputs.hpp	/^  OutputData *plast_data_;   \/\/ ptr to tail OutputData node in doubly linked list$/;"	m	class:OutputType
pnext	outputs.hpp	/^  OutputData *pnext, *pprev;$/;"	m	struct:OutputData
pnext_type	outputs.hpp	/^  OutputType *pnext_type;         \/\/ ptr to next node in singly linked list of OutputTypes$/;"	m	class:OutputType
pprev	outputs.hpp	/^  OutputData *pnext, *pprev;$/;"	m	struct:OutputData
read	io_wrapper.hpp	/^  enum class FileMode {read, write};$/;"	m	class:IOWrapper::FileMode
type	outputs.hpp	/^  std::string type;        \/\/ one of (SCALARS,VECTORS) used for vtk outputs$/;"	m	struct:OutputData
variable	outputs.hpp	/^  std::string variable;$/;"	m	struct:OutputParameters
variable_names	outputs.hpp	/^  char (*variable_names)[max_name_length+1];  \/\/ array of C-string names of variables$/;"	m	class:ATHDF5Output
x1_slice	outputs.hpp	/^  Real x1_slice, x2_slice, x3_slice;$/;"	m	struct:OutputParameters
x2_slice	outputs.hpp	/^  Real x1_slice, x2_slice, x3_slice;$/;"	m	struct:OutputParameters
x3_slice	outputs.hpp	/^  Real x1_slice, x2_slice, x3_slice;$/;"	m	struct:OutputParameters
~IOWrapper	io_wrapper.hpp	/^  ~IOWrapper() {}$/;"	f	class:IOWrapper
~Outputs	outputs.cpp	/^Outputs::~Outputs() {$/;"	f	class:Outputs
