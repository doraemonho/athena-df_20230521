!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AddMultigridTask	mg_task_list.cpp	/^void MultigridTaskList::AddMultigridTask(const TaskID& id, const TaskID& dep) {$/;"	f	class:MultigridTaskList
AddSourceTermsDustFluids	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::AddSourceTermsDustFluids(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
AddSourceTermsHydro	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::AddSourceTermsHydro(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
AddTask	fft_grav_task_list.cpp	/^void FFTGravitySolverTaskList::AddTask(const TaskID& id, const TaskID& dep) {$/;"	f	class:FFTGravitySolverTaskList
AddTask	sts_task_list.cpp	/^void SuperTimeStepTaskList::AddTask(const TaskID& id, const TaskID& dep) {$/;"	f	class:SuperTimeStepTaskList
AddTask	time_integrator.cpp	/^void TimeIntegratorTaskList::AddTask(const TaskID& id, const TaskID& dep) {$/;"	f	class:TimeIntegratorTaskList
CalculateDustFluidsFlux	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::CalculateDustFluidsFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
CalculateEMF	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::CalculateEMF(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
CalculateEMF_STS	sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::CalculateEMF_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
CalculateFASRHS	mg_task_list.cpp	/^TaskStatus MultigridTaskList::CalculateFASRHS(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
CalculateFieldOrbital	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::CalculateFieldOrbital(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
CalculateHydroFlux	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::CalculateHydroFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
CalculateHydroFlux_STS	sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::CalculateHydroFlux_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
CalculateHydroOrbital	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::CalculateHydroOrbital(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
CalculateScalarFlux	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::CalculateScalarFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
CalculateScalarFlux_STS	sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::CalculateScalarFlux_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
CheckDependencies	task_id.cpp	/^bool TaskID::CheckDependencies(const TaskID& dep) const {$/;"	f	class:TaskID
CheckNextMainStage	task_list.hpp	/^  bool CheckNextMainStage(int stage) const {return stage_wghts[stage%nstages].main_stage;}$/;"	f	class:TimeIntegratorTaskList
CheckRefinement	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::CheckRefinement(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
CheckRefinement_STS	sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::CheckRefinement_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
Clear	task_id.cpp	/^void TaskID::Clear() {$/;"	f	class:TaskID
ClearAllBoundary	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ClearAllBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ClearAllBoundary_STS	sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::ClearAllBoundary_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
ClearBoundary	mg_task_list.cpp	/^TaskStatus MultigridTaskList::ClearBoundary(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
ClearBoundaryFluxCons	mg_task_list.cpp	/^TaskStatus MultigridTaskList::ClearBoundaryFluxCons(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
ClearFFTGravityBoundary	fft_grav_task_list.cpp	/^TaskStatus FFTGravitySolverTaskList::ClearFFTGravityBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:FFTGravitySolverTaskList
ClearTaskList	mg_task_list.hpp	/^  void ClearTaskList() {ntasks=0;}$/;"	f	class:MultigridTaskList
DiffuseDustFluids	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::DiffuseDustFluids(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
DiffuseField	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::DiffuseField(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
DiffuseHydro	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::DiffuseHydro(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
DiffuseScalars	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::DiffuseScalars(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
DoAllAvailableTasks	mg_task_list.cpp	/^TaskListStatus MultigridTaskList::DoAllAvailableTasks(Multigrid *pmg, TaskStates &ts) {$/;"	f	class:MultigridTaskList
DoAllAvailableTasks	task_list.cpp	/^TaskListStatus TaskList::DoAllAvailableTasks(MeshBlock *pmb, int stage, TaskStates &ts) {$/;"	f	class:TaskList
DoTaskListOneStage	mg_task_list.cpp	/^void MultigridTaskList::DoTaskListOneStage(MultigridDriver *pmd) {$/;"	f	class:MultigridTaskList
DoTaskListOneStage	task_list.cpp	/^void TaskList::DoTaskListOneStage(Mesh *pmesh, int stage) {$/;"	f	class:TaskList
DustGasDrag	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::DustGasDrag(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
FFTGravitySolverTaskList	fft_grav_task_list.cpp	/^FFTGravitySolverTaskList::FFTGravitySolverTaskList(ParameterInput *pin, Mesh *pm) {$/;"	f	class:FFTGravitySolverTaskList
FFTGravitySolverTaskList	fft_grav_task_list.hpp	/^class FFTGravitySolverTaskList : public TaskList {$/;"	c
FFTGravitySolverTaskNames	fft_grav_task_list.hpp	/^namespace FFTGravitySolverTaskNames {$/;"	n
FMGProlongate	mg_task_list.cpp	/^TaskStatus MultigridTaskList::FMGProlongate(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
HydroIntegratorTaskNames	task_list.hpp	/^namespace HydroIntegratorTaskNames {$/;"	n
IntegrateDustFluids	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::IntegrateDustFluids(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
IntegrateField	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::IntegrateField(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
IntegrateField_STS	sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::IntegrateField_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
IntegrateHydro	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::IntegrateHydro(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
IntegrateHydro_STS	sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::IntegrateHydro_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
IntegrateScalars	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::IntegrateScalars(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
IntegrateScalars_STS	sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::IntegrateScalars_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
IntegratorWeight	task_list.hpp	/^  struct IntegratorWeight {$/;"	s	class:TimeIntegratorTaskList
IsUnfinished	task_id.cpp	/^bool TaskID::IsUnfinished(const TaskID& id) const {$/;"	f	class:TaskID
MGTask	mg_task_list.hpp	/^struct MGTask {$/;"	s
MultigridTaskList	mg_task_list.hpp	/^  explicit MultigridTaskList(MultigridDriver *pmd) : ntasks(0), pmy_mgdriver_(pmd),$/;"	f	class:MultigridTaskList
MultigridTaskList	mg_task_list.hpp	/^class MultigridTaskList {$/;"	c
MultigridTaskNames	mg_task_list.hpp	/^namespace MultigridTaskNames {$/;"	n
NewBlockTimeStep	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::NewBlockTimeStep(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
NewBlockTimeStep_STS	sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::NewBlockTimeStep_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
ORBITAL_ADVECTION	task_list.hpp	/^  bool ORBITAL_ADVECTION; \/\/ flag for orbital advection (true w\/ , false w\/o)$/;"	m	class:TimeIntegratorTaskList
PhysicalBoundary	fft_grav_task_list.cpp	/^TaskStatus FFTGravitySolverTaskList::PhysicalBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:FFTGravitySolverTaskList
PhysicalBoundary	mg_task_list.cpp	/^TaskStatus MultigridTaskList::PhysicalBoundary(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
PhysicalBoundary	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::PhysicalBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
PhysicalBoundary_STS	sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::PhysicalBoundary_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
Primitives	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::Primitives(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
Primitives_STS	sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::Primitives_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
Prolongate	mg_task_list.cpp	/^TaskStatus MultigridTaskList::Prolongate(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
ProlongateBoundary	mg_task_list.cpp	/^TaskStatus MultigridTaskList::ProlongateBoundary(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
ProlongateBoundaryForProlongation	mg_task_list.cpp	/^TaskStatus MultigridTaskList::ProlongateBoundaryForProlongation(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
Prolongation	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::Prolongation(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
Prolongation_STS	sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::Prolongation_STS(MeshBlock *pmb,$/;"	f	class:SuperTimeStepTaskList
ReceiveAndCorrectDustFluidsFlux	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveAndCorrectDustFluidsFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveAndCorrectEMF	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveAndCorrectEMF(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveAndCorrectHydroFlux	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveAndCorrectHydroFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveBoundary	mg_task_list.cpp	/^TaskStatus MultigridTaskList::ReceiveBoundary(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
ReceiveBoundaryFluxCons	mg_task_list.cpp	/^TaskStatus MultigridTaskList::ReceiveBoundaryFluxCons(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
ReceiveBoundaryForProlongation	mg_task_list.cpp	/^TaskStatus MultigridTaskList::ReceiveBoundaryForProlongation(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
ReceiveDustFluids	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveDustFluids(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveDustFluidsFluxShear	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveDustFluidsFluxShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveDustFluidsShear	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveDustFluidsShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveEMFShear	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveEMFShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveFFTGravityBoundary	fft_grav_task_list.cpp	/^TaskStatus FFTGravitySolverTaskList::ReceiveFFTGravityBoundary(MeshBlock *pmb,$/;"	f	class:FFTGravitySolverTaskList
ReceiveField	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveField(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveFieldOrbital	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveFieldOrbital(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveFieldShear	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveFieldShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveHydro	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveHydro(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveHydroFluxShear	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveHydroFluxShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveHydroOrbital	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveHydroOrbital(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveHydroShear	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveHydroShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveScalarFlux	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveScalarFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveScalars	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveScalars(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveScalarsFluxShear	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveScalarsFluxShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
ReceiveScalarsShear	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::ReceiveScalarsShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
Reset	task_list.hpp	/^  void Reset(int ntasks) {$/;"	f	struct:TaskStates
Restrict	mg_task_list.cpp	/^TaskStatus MultigridTaskList::Restrict(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
SHEAR_PERIODIC	task_list.hpp	/^  bool SHEAR_PERIODIC; \/\/ flag for shear periodic boundary (true w\/ , false w\/o)$/;"	m	class:SuperTimeStepTaskList
SHEAR_PERIODIC	task_list.hpp	/^  bool SHEAR_PERIODIC; \/\/ flag for shear periodic boundary (true w\/ , false w\/o)$/;"	m	class:TimeIntegratorTaskList
SendBoundary	mg_task_list.cpp	/^TaskStatus MultigridTaskList::SendBoundary(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
SendBoundaryFluxCons	mg_task_list.cpp	/^TaskStatus MultigridTaskList::SendBoundaryFluxCons(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
SendBoundaryForProlongation	mg_task_list.cpp	/^TaskStatus MultigridTaskList::SendBoundaryForProlongation(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
SendDustFluids	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendDustFluids(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendDustFluidsFlux	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendDustFluidsFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendDustFluidsFluxShear	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendDustFluidsFluxShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendDustFluidsShear	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendDustFluidsShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendEMF	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendEMF(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendEMFShear	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendEMFShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendFFTGravityBoundary	fft_grav_task_list.cpp	/^TaskStatus FFTGravitySolverTaskList::SendFFTGravityBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:FFTGravitySolverTaskList
SendField	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendField(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendFieldOrbital	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendFieldOrbital(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendFieldShear	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendFieldShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendHydro	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendHydro(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendHydroFlux	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendHydroFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendHydroFluxShear	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendHydroFluxShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendHydroOrbital	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendHydroOrbital(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendHydroShear	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendHydroShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendScalarFlux	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendScalarFlux(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendScalars	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendScalars(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendScalarsFluxShear	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendScalarsFluxShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SendScalarsShear	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SendScalarsShear(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SetBoundariesDustFluids	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SetBoundariesDustFluids(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SetBoundariesField	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SetBoundariesField(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SetBoundariesHydro	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SetBoundariesHydro(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SetBoundariesScalars	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SetBoundariesScalars(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SetFFTGravityBoundary	fft_grav_task_list.cpp	/^TaskStatus FFTGravitySolverTaskList::SetFFTGravityBoundary(MeshBlock *pmb, int stage) {$/;"	f	class:FFTGravitySolverTaskList
SetFinished	task_id.cpp	/^void TaskID::SetFinished(const TaskID& id) {$/;"	f	class:TaskID
SetMGTaskListFMGProlongate	mg_task_list.cpp	/^void MultigridTaskList::SetMGTaskListFMGProlongate(int flag) {$/;"	f	class:MultigridTaskList
SetMGTaskListToCoarser	mg_task_list.cpp	/^void MultigridTaskList::SetMGTaskListToCoarser(int nsmooth, int ngh) {$/;"	f	class:MultigridTaskList
SetMGTaskListToFiner	mg_task_list.cpp	/^void MultigridTaskList::SetMGTaskListToFiner(int nsmooth, int ngh, int flag) {$/;"	f	class:MultigridTaskList
SetPropertiesDustFluids	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::SetPropertiesDustFluids(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SmoothBlack	mg_task_list.cpp	/^TaskStatus MultigridTaskList::SmoothBlack(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
SmoothRed	mg_task_list.cpp	/^TaskStatus MultigridTaskList::SmoothRed(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
StartReceive	mg_task_list.cpp	/^TaskStatus MultigridTaskList::StartReceive(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
StartReceiveFluxCons	mg_task_list.cpp	/^TaskStatus MultigridTaskList::StartReceiveFluxCons(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
StartReceiveForProlongation	mg_task_list.cpp	/^TaskStatus MultigridTaskList::StartReceiveForProlongation(Multigrid *pmg) {$/;"	f	class:MultigridTaskList
StartupTaskList	fft_grav_task_list.cpp	/^void FFTGravitySolverTaskList::StartupTaskList(MeshBlock *pmb, int stage) {$/;"	f	class:FFTGravitySolverTaskList
StartupTaskList	sts_task_list.cpp	/^void SuperTimeStepTaskList::StartupTaskList(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
StartupTaskList	time_integrator.cpp	/^void TimeIntegratorTaskList::StartupTaskList(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
SuperTimeStepTaskList	sts_task_list.cpp	/^SuperTimeStepTaskList::SuperTimeStepTaskList($/;"	f	class:SuperTimeStepTaskList
SuperTimeStepTaskList	task_list.hpp	/^class SuperTimeStepTaskList : public TaskList {$/;"	c
TASK_LIST_FFT_GRAV_TASK_LIST_HPP_	fft_grav_task_list.hpp	/^#define TASK_LIST_FFT_GRAV_TASK_LIST_HPP_$/;"	d
TASK_LIST_MG_TASK_LIST_HPP_	mg_task_list.hpp	/^#define TASK_LIST_MG_TASK_LIST_HPP_$/;"	d
TASK_LIST_TASK_LIST_HPP_	task_list.hpp	/^#define TASK_LIST_TASK_LIST_HPP_$/;"	d
Task	task_list.hpp	/^struct Task { \/\/ aggregate and POD$/;"	s
TaskFunc	mg_task_list.hpp	/^  TaskStatus (MultigridTaskList::*TaskFunc)(Multigrid*);  \/\/!> ptr to a task$/;"	m	struct:MGTask
TaskFunc	task_list.hpp	/^  TaskStatus (TaskList::*TaskFunc)(MeshBlock*, int);  \/\/!> ptr to member function$/;"	m	struct:Task
TaskID	task_id.cpp	/^TaskID::TaskID(unsigned int id) {$/;"	f	class:TaskID
TaskID	task_list.hpp	/^class TaskID {  \/\/ POD but not aggregate (there is a user-provided ctor)$/;"	c
TaskList	task_list.hpp	/^  TaskList() : ntasks(0), nstages(0), task_list_{} {} \/\/ 2x direct + zero initialization$/;"	f	class:TaskList
TaskList	task_list.hpp	/^class TaskList {$/;"	c
TaskListStatus	task_list.hpp	/^enum class TaskListStatus {running, stuck, complete, nothing_to_do};$/;"	c
TaskStates	task_list.hpp	/^struct TaskStates { \/\/ aggregate and POD$/;"	s
TaskStatus	task_list.hpp	/^enum class TaskStatus {fail, success, next};$/;"	c
TimeIntegratorTaskList	task_list.hpp	/^class TimeIntegratorTaskList : public TaskList {$/;"	c
TimeIntegratorTaskList	time_integrator.cpp	/^TimeIntegratorTaskList::TimeIntegratorTaskList(ParameterInput *pin, Mesh *pm) {$/;"	f	class:TimeIntegratorTaskList
UserWork	time_integrator.cpp	/^TaskStatus TimeIntegratorTaskList::UserWork(MeshBlock *pmb, int stage) {$/;"	f	class:TimeIntegratorTaskList
UserWork_STS	sts_task_list.cpp	/^TaskStatus SuperTimeStepTaskList::UserWork_STS(MeshBlock *pmb, int stage) {$/;"	f	class:SuperTimeStepTaskList
beta	task_list.hpp	/^    Real beta; \/\/ coeff. from bidiagonal Shu-Osher form Beta matrix, -1 diagonal terms$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
bitfld_	task_list.hpp	/^  std::uint64_t bitfld_[kNField_];$/;"	m	class:TaskID
cfl_limit	task_list.hpp	/^  Real cfl_limit; \/\/ dt stability limit for the particular time integrator + spatial order$/;"	m	class:TimeIntegratorTaskList
complete	task_list.hpp	/^enum class TaskListStatus {running, stuck, complete, nothing_to_do};$/;"	m	class:TaskListStatus
delta	task_list.hpp	/^    Real delta; \/\/!> low-storage coefficients to avoid double F() evaluation per substage$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
dependency	mg_task_list.hpp	/^  TaskID dependency;   \/\/!> encodes dependencies to other tasks using MultigridTaskNames$/;"	m	struct:MGTask
dependency	task_list.hpp	/^  TaskID dependency; \/\/!> encodes dependencies to other tasks using$/;"	m	struct:Task
do_sts_dustfluids	task_list.hpp	/^  bool do_sts_dustfluids;$/;"	m	class:SuperTimeStepTaskList
do_sts_field	task_list.hpp	/^  bool do_sts_field;$/;"	m	class:SuperTimeStepTaskList
do_sts_hydro	task_list.hpp	/^  bool do_sts_hydro;$/;"	m	class:SuperTimeStepTaskList
do_sts_scalar	task_list.hpp	/^  bool do_sts_scalar;$/;"	m	class:SuperTimeStepTaskList
ebeta	task_list.hpp	/^    Real sbeta, ebeta; \/\/ time coeff describing start\/end time of each stage$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
fail	task_list.hpp	/^enum class TaskStatus {fail, success, next};$/;"	m	class:TaskStatus
finished_tasks	task_list.hpp	/^  TaskID finished_tasks;$/;"	m	struct:TaskStates
gamma_1	task_list.hpp	/^    Real gamma_1, gamma_2, gamma_3; \/\/ low-storage coeff for weighted ave of registers$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
gamma_2	task_list.hpp	/^    Real gamma_1, gamma_2, gamma_3; \/\/ low-storage coeff for weighted ave of registers$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
gamma_3	task_list.hpp	/^    Real gamma_1, gamma_2, gamma_3; \/\/ low-storage coeff for weighted ave of registers$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
indx_first_task	task_list.hpp	/^  int indx_first_task, num_tasks_left;$/;"	m	struct:TaskStates
integrator	task_list.hpp	/^  std::string integrator;$/;"	m	class:TimeIntegratorTaskList
kNField_	task_list.hpp	/^  constexpr static int kNField_ = 2;$/;"	m	class:TaskID
lb_time	task_list.hpp	/^  bool lb_time; \/\/!> flag for automatic load balancing based on timing$/;"	m	struct:Task
main_stage	task_list.hpp	/^    bool main_stage, orbital_stage; \/\/ flag for whether the main calculation is done$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
nstages	task_list.hpp	/^  int nstages;    \/\/!> number of times the tasklist is repeated per each full timestep$/;"	m	class:TaskList
nstages_main	task_list.hpp	/^  int nstages_main; \/\/ number of stages labeled main_stage$/;"	m	class:TimeIntegratorTaskList
ntasks	mg_task_list.hpp	/^  int ntasks;     \/\/!> number of tasks in this list$/;"	m	class:MultigridTaskList
ntasks	task_list.hpp	/^  int ntasks;     \/\/!> number of tasks in this list$/;"	m	class:TaskList
num_tasks_left	task_list.hpp	/^  int indx_first_task, num_tasks_left;$/;"	m	struct:TaskStates
operator ==	task_id.cpp	/^bool TaskID::operator== (const TaskID& rhs) const {$/;"	f	class:TaskID
operator |	task_id.cpp	/^TaskID TaskID::operator| (const TaskID& rhs) const {$/;"	f	class:TaskID
orbital_stage	task_list.hpp	/^    bool main_stage, orbital_stage; \/\/ flag for whether the main calculation is done$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
override	fft_grav_task_list.hpp	/^  void AddTask(const TaskID& id, const TaskID& dep) override;$/;"	m	class:FFTGravitySolverTaskList
override	fft_grav_task_list.hpp	/^  void StartupTaskList(MeshBlock *pmb, int stage) override;$/;"	m	class:FFTGravitySolverTaskList
override	task_list.hpp	/^  void AddTask(const TaskID& id, const TaskID& dep) override;$/;"	m	class:TimeIntegratorTaskList
override	task_list.hpp	/^  void AddTask(const TaskID&, const TaskID& dep) override;$/;"	m	class:SuperTimeStepTaskList
override	task_list.hpp	/^  void StartupTaskList(MeshBlock *pmb, int stage) override;$/;"	m	class:SuperTimeStepTaskList
override	task_list.hpp	/^  void StartupTaskList(MeshBlock *pmb, int stage) override;$/;"	m	class:TimeIntegratorTaskList
pmy_mgdriver_	mg_task_list.hpp	/^  MultigridDriver* pmy_mgdriver_;$/;"	m	class:MultigridTaskList
ptlist_	task_list.hpp	/^  TimeIntegratorTaskList *ptlist_;$/;"	m	class:SuperTimeStepTaskList
running	task_list.hpp	/^enum class TaskListStatus {running, stuck, complete, nothing_to_do};$/;"	m	class:TaskListStatus
sbeta	task_list.hpp	/^    Real sbeta, ebeta; \/\/ time coeff describing start\/end time of each stage$/;"	m	struct:TimeIntegratorTaskList::IntegratorWeight
stage_wghts	task_list.hpp	/^  IntegratorWeight stage_wghts[MAX_NSTAGE];$/;"	m	class:TimeIntegratorTaskList
sts_idx_subset	task_list.hpp	/^  std::vector<int> sts_idx_subset;$/;"	m	class:SuperTimeStepTaskList
sts_max_dt_ratio	task_list.hpp	/^  const Real sts_max_dt_ratio;$/;"	m	class:SuperTimeStepTaskList
stuck	task_list.hpp	/^enum class TaskListStatus {running, stuck, complete, nothing_to_do};$/;"	m	class:TaskListStatus
success	task_list.hpp	/^enum class TaskStatus {fail, success, next};$/;"	m	class:TaskStatus
task_id	mg_task_list.hpp	/^  TaskID task_id;      \/\/!> encodes task using bit positions in MultigridTaskNames$/;"	m	struct:MGTask
task_id	task_list.hpp	/^  TaskID task_id;    \/\/!> encodes task with bit positions in HydroIntegratorTaskNames$/;"	m	struct:Task
task_list_	mg_task_list.hpp	/^  MGTask task_list_[64*TaskID::kNField_];$/;"	m	class:MultigridTaskList
task_list_	task_list.hpp	/^  Task task_list_[64*TaskID::kNField_];$/;"	m	class:TaskList
